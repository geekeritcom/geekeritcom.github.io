<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekerHub</title>
  
  <subtitle>信任 承诺 关怀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-03T10:51:40.789Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aaryn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用docker部署Mysql</title>
    <link href="http://yoursite.com/2019/11/03/docker/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Mysql/"/>
    <id>http://yoursite.com/2019/11/03/docker/使用docker部署Mysql/</id>
    <published>2019-11-03T10:42:14.000Z</published>
    <updated>2019-11-03T10:51:40.789Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何通过docker容器进行<code>Mysql</code>部署，并记录了自己在远程连接过程中遇到的几个小问题，对于数据的持久化到宿主机的问题还需要学习补充。</p><h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -e 代表添加环境变量，MYSQL_ROOT_PASSWORD是root用户的登录密码</span></span><br><span class="line">docker run -di --name=mysql -p 63306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="登陆MySQL"><a href="#登陆MySQL" class="headerlink" title="登陆MySQL"></a>登陆<code>MySQL</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h2 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,plugin,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure><h2 id="设置远程登录信息"><a href="#设置远程登录信息" class="headerlink" title="设置远程登录信息"></a>设置远程登录信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 允许root账户使用密码123456登录</span><br><span class="line">ALTER user &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br></pre></td></tr></table></figure><h2 id="刷新信息"><a href="#刷新信息" class="headerlink" title="刷新信息"></a>刷新信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h1 id="navicat远程连接"><a href="#navicat远程连接" class="headerlink" title="navicat远程连接"></a><code>navicat</code>远程连接</h1><h2 id="普通方式"><a href="#普通方式" class="headerlink" title="普通方式"></a>普通方式</h2><p>常规项内直接填写远程服务器的<code>IP</code>地址，端口填写服务器宿主机映射的<code>MySQL</code>的端口，用户名密码为docker容器内<code>MySQL</code>实例的用户名密码</p><blockquote><p> 需要注意</p><ol><li>云服务器需要将<code>MySQL</code>的端口放通</li><li>开启防火墙的情况下防火墙需要放通端口</li></ol></blockquote><h2 id="SSH方式"><a href="#SSH方式" class="headerlink" title="SSH方式"></a>SSH方式</h2><h3 id="常规项注意事项"><a href="#常规项注意事项" class="headerlink" title="常规项注意事项"></a>常规项注意事项</h3><ol><li>连接名自定义</li><li>主机填写<code>localhost</code></li><li>端口填写的应该是远程服务器中映射的宿主机的端口，而不是本地<code>navicat</code>所在的客户机的<code>MySQL</code>端口</li><li>用户名密码填写docker中设置的远程登录的用户名与密码</li></ol><h3 id="SSH项注意事项"><a href="#SSH项注意事项" class="headerlink" title="SSH项注意事项"></a>SSH项注意事项</h3><ol><li>主机填写远程服务器的<strong>公网</strong><code>IP</code>地址</li><li>端口使用自定义的SSH的端口，默认22，修改过的话就是自定义的SSH端口；</li><li>用户名密码填写远程登录用户名密码，或者使用公钥进行登录</li></ol><h3 id="可能造成SSH连接不通的原因"><a href="#可能造成SSH连接不通的原因" class="headerlink" title="可能造成SSH连接不通的原因"></a>可能造成SSH连接不通的原因</h3><ol><li>云服务器查看<strong>安全组</strong>是否放通SSH端口，一般不可能，不然你远程登录服务器时就已经报错了</li><li>服务器的<code>hosts.deny</code>文件中是否包含了<code>navicat</code>所在客户端的请求地址，一般是开启了防暴力破解有可能被误加入了，例如<code>Denthosts</code>等</li><li>检查SSH端口，默认为22，自定义的情况下一定记得修改</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何通过docker容器进行&lt;code&gt;Mysql&lt;/code&gt;部署，并记录了自己在远程连接过程中遇到的几个小问题，对于数据的持久化到宿主机的问题还需要学习补充。&lt;/p&gt;
&lt;h1 id=&quot;部署过程&quot;&gt;&lt;a href=&quot;#部署过程&quot; class=&quot;headerlink&quot; title=&quot;部署过程&quot;&gt;&lt;/a&gt;部署过程&lt;/h1&gt;&lt;h2 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建容器&quot;&gt;&lt;a href=&quot;#创建容器&quot; class=&quot;headerlink&quot; title=&quot;创建容器&quot;&gt;&lt;/a&gt;创建容器&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -e 代表添加环境变量，MYSQL_ROOT_PASSWORD是root用户的登录密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -di --name=mysql -p 63306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;进入容器&quot;&gt;&lt;a href=&quot;#进入容器&quot; class=&quot;headerlink&quot; title=&quot;进入容器&quot;&gt;&lt;/a&gt;进入容器&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it mysql /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Mysql - docker" scheme="http://yoursite.com/tags/Mysql-docker/"/>
    
  </entry>
  
  <entry>
    <title>Config Github And Gitlab At Same Computer</title>
    <link href="http://yoursite.com/2019/10/31/Java/vcs/git_config/"/>
    <id>http://yoursite.com/2019/10/31/Java/vcs/git_config/</id>
    <published>2019-10-31T09:30:09.000Z</published>
    <updated>2019-10-31T06:25:26.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h2><p>生成需要的秘钥公钥，这里需要注意的是如果需要同时为<code>github</code>与<code>gitlab</code>生成配置时需要指定文件名称，否则会被覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">'youremail'</span></span><br></pre></td></tr></table></figure><h2 id="上传秘钥"><a href="#上传秘钥" class="headerlink" title="上传秘钥"></a>上传秘钥</h2><p>将生成的公钥上传至网站ssh配置处</p><a id="more"></a><h2 id="本地机器配置"><a href="#本地机器配置" class="headerlink" title="本地机器配置"></a>本地机器配置</h2><p>位于用户目录下的<code>.ssh</code>文件夹中，不存在时创建该文件<code>config</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># gitlab</span><br><span class="line"># Host需要指定为自己gitlab的地址</span><br><span class="line">Host 192.168.1.102</span><br><span class="line">    HostName 192.168.1.102</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    # 指定对应网站相应的私钥</span><br><span class="line">    IdentityFile ~/.ssh/gitlab</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/hafiz/p/8146324.html" target="_blank" rel="noopener">GitLab配置ssh key</a></p><p><a href="https://stackoverflow.com/questions/40549348/is-it-possible-to-use-github-and-gitlab-on-one-machine" target="_blank" rel="noopener">可以在一台机器上使用GitHub和GitLab吗？</a></p><p><a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">Generating a new SSH key and adding it to the ssh-agent</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生成秘钥&quot;&gt;&lt;a href=&quot;#生成秘钥&quot; class=&quot;headerlink&quot; title=&quot;生成秘钥&quot;&gt;&lt;/a&gt;生成秘钥&lt;/h2&gt;&lt;p&gt;生成需要的秘钥公钥，这里需要注意的是如果需要同时为&lt;code&gt;github&lt;/code&gt;与&lt;code&gt;gitlab&lt;/code&gt;生成配置时需要指定文件名称，否则会被覆盖&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &lt;span class=&quot;string&quot;&gt;&#39;youremail&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;上传秘钥&quot;&gt;&lt;a href=&quot;#上传秘钥&quot; class=&quot;headerlink&quot; title=&quot;上传秘钥&quot;&gt;&lt;/a&gt;上传秘钥&lt;/h2&gt;&lt;p&gt;将生成的公钥上传至网站ssh配置处&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java8中的Optional容器</title>
    <link href="http://yoursite.com/2019/07/10/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java8/Optional/"/>
    <id>http://yoursite.com/2019/07/10/Java/基础知识/Java8/Optional/</id>
    <published>2019-07-10T04:40:14.000Z</published>
    <updated>2019-10-27T13:57:52.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>解决Java中最常见的异常之一：<code>NullPointerException</code>)</p><h3 id="创建Optional"><a href="#创建Optional" class="headerlink" title="创建Optional"></a>创建Optional</h3><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><p>创建指定对象的Optional<strong>空</strong>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Optional&lt;T&gt; <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="of-T-value"><a href="#of-T-value" class="headerlink" title="of(T value)"></a>of(T value)</h4><p>创建<strong>非空值</strong>的指定对象的Optional实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">of</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Optional&lt;&gt;(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h4 id="ofNullable-T-value"><a href="#ofNullable-T-value" class="headerlink" title="ofNullable(T value)"></a><code>ofNullable(T value)</code></h4><p>创建Optional实例，当指定对象为空值时返回Optional空实例，相当于结合了<code>empty()</code>与<code>of(T value)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/9 13:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalCreateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Department&gt; optionalDepartment = Optional.empty();</span><br><span class="line">        optionalDepartment.ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">        Optional&lt;Department&gt; departmentOptional = Optional.of(<span class="keyword">new</span> Department());</span><br><span class="line">        departmentOptional.ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">        Optional&lt;Department&gt; optional = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        optional.ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Optional中的值"><a href="#获取Optional中的值" class="headerlink" title="获取Optional中的值"></a>获取Optional中的值</h3><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>Optional中不存在该元素时抛出<code>NoSuchElementException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"No value present"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="orElse-T-other"><a href="#orElse-T-other" class="headerlink" title="orElse(T other)"></a><code>orElse(T other)</code></h4><p>对象存在时获取对象，不存在时返回指定的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElse</span><span class="params">(T other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="orElseGet-Supplier-lt-extends-T-gt-other"><a href="#orElseGet-Supplier-lt-extends-T-gt-other" class="headerlink" title="orElseGet(Supplier&lt;? extends T&gt; other)"></a><code>orElseGet(Supplier&lt;? extends T&gt; other)</code></h4><p>对象存在时获取对象，不存在时使用指定的Supplier创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier"><a href="#orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier" class="headerlink" title="orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)"></a><code>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code></h4><p>对象存在时返回对象，不存在时通过指定的<code>exceptionSupplier</code>抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/9 14:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalGetValueTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Animal&gt; animal = Optional.empty();</span><br><span class="line">        Animal backAnimal = <span class="keyword">new</span> Animal(<span class="string">"dog"</span>, <span class="string">"lily"</span>);</span><br><span class="line">        System.out.println(animal.orElse(backAnimal));</span><br><span class="line">        System.out.println(animal.orElseGet(Animal::<span class="keyword">new</span>));</span><br><span class="line">        System.out.println(animal.orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">"Animal not exists."</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断Optional容器中是否存在元素"><a href="#判断Optional容器中是否存在元素" class="headerlink" title="判断Optional容器中是否存在元素"></a>判断Optional容器中是否存在元素</h3><h4 id="isPresent"><a href="#isPresent" class="headerlink" title="isPresent()"></a><code>isPresent()</code></h4><p>元素不存在时返回<code>false</code>，存在时返回<code>true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ifPresent-Consumer-lt-super-T-gt-consumer"><a href="#ifPresent-Consumer-lt-super-T-gt-consumer" class="headerlink" title="ifPresent(Consumer&lt;? super T&gt; consumer)"></a><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code></h4><p>当元素存在时，将Optional容器中的元素作为指定的consumer的参数执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/9 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalPresentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Department&gt; department = Optional.empty();</span><br><span class="line">        System.out.println(department.isPresent());</span><br><span class="line"></span><br><span class="line">        Optional&lt;Department&gt; departmentOptional = Optional.of(<span class="keyword">new</span> Department());</span><br><span class="line">        departmentOptional.ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作Optional容器中的元素"><a href="#操作Optional容器中的元素" class="headerlink" title="操作Optional容器中的元素"></a>操作Optional容器中的元素</h3><h4 id="filter-Predicate-lt-super-T-gt-predicate"><a href="#filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="filter(Predicate&lt;? super T&gt; predicate)"></a><code>filter(Predicate&lt;? super T&gt; predicate)</code></h4><p>Optional容器中的元素符合给定<code>predicate</code>时返回元素，否则返回Optional空实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(predicate);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> predicate.test(value) ? <span class="keyword">this</span> : empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map-Function-lt-super-T-extends-U-gt-mapper"><a href="#map-Function-lt-super-T-extends-U-gt-mapper" class="headerlink" title="map(Function&lt;? super T, ? extends U&gt; mapper)"></a><code>map(Function&lt;? super T, ? extends U&gt; mapper)</code></h4><p>元素不为空时，将Optional容器中的元素按照给定函数进行映射，否则返回Optional空实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flatMap-Function-lt-super-T-Optional-lt-U-gt-gt-mapper"><a href="#flatMap-Function-lt-super-T-Optional-lt-U-gt-gt-mapper" class="headerlink" title="flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)"></a><code>flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code></h4><p>在我们定义的实体中很可能指定使用<code>Optional</code>容器定义具有级联关系的对象，那么在使用Map操作后返回的类型是<code>Optional&lt;Optional&lt;T value&gt;&gt;</code>类型的参数，这样就无法直接使用Map再进行操作，而使用<code>flatMap</code>可以直接取出Optional级联对象进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/9 16:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalElementTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动物昵称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动物编号</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String number;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 所属管理员</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Optional&lt;ZooManager&gt; zooManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooManager</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 管理员姓名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Optional&lt;Animal&gt; ANIMAL = Optional.of(<span class="keyword">new</span> Animal(<span class="string">"dog"</span>, <span class="string">"2019564124"</span>, Optional.of(<span class="keyword">new</span> ZooManager(<span class="string">"lily"</span>))));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        filterTest();</span><br><span class="line">        mapTest();</span><br><span class="line">        flatMapTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出小狗</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ANIMAL.filter(x -&gt; <span class="string">"dog"</span>.equals(x.getName()))</span><br><span class="line">                .ifPresent(System.out::println);</span><br><span class="line">        Optional&lt;Animal&gt; animal = Optional.empty();</span><br><span class="line">        animal.filter(Objects::nonNull);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出小狗的编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Animal&gt; animal = ANIMAL.filter(x -&gt; <span class="string">"dog"</span>.equals(x.getName()));       animal.map(Animal::getNumber).ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出小狗的管理员姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flatMapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ANIMAL.filter(x -&gt; <span class="string">"dog"</span>.equals(x.getName()))</span><br><span class="line">                .flatMap(Animal::getZooManager)</span><br><span class="line">                .map(ZooManager::getName)</span><br><span class="line">                .ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Optional&quot;&gt;&lt;a href=&quot;#Optional&quot; class=&quot;headerlink&quot; title=&quot;Optional&quot;&gt;&lt;/a&gt;Optional&lt;/h2&gt;&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;p&gt;解决Java中最常见的异常之一：&lt;code&gt;NullPointerException&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&quot;创建Optional&quot;&gt;&lt;a href=&quot;#创建Optional&quot; class=&quot;headerlink&quot; title=&quot;创建Optional&quot;&gt;&lt;/a&gt;创建Optional&lt;/h3&gt;&lt;h4 id=&quot;empty&quot;&gt;&lt;a href=&quot;#empty&quot; class=&quot;headerlink&quot; title=&quot;empty()&quot;&gt;&lt;/a&gt;empty()&lt;/h4&gt;&lt;p&gt;创建指定对象的Optional&lt;strong&gt;空&lt;/strong&gt;实例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&amp;lt;T&amp;gt; Optional&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Optional&amp;lt;T&amp;gt; t = (Optional&amp;lt;T&amp;gt;) EMPTY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;of-T-value&quot;&gt;&lt;a href=&quot;#of-T-value&quot; class=&quot;headerlink&quot; title=&quot;of(T value)&quot;&gt;&lt;/a&gt;of(T value)&lt;/h4&gt;&lt;p&gt;创建&lt;strong&gt;非空值&lt;/strong&gt;的指定对象的Optional实例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Optional&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Optional&amp;lt;&amp;gt;(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java8" scheme="http://yoursite.com/tags/Java8/"/>
    
      <category term="NPE - Optional" scheme="http://yoursite.com/tags/NPE-Optional/"/>
    
  </entry>
  
  <entry>
    <title>常用集合类介绍之List</title>
    <link href="http://yoursite.com/2019/04/01/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/collection/%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E7%B1%BB%E4%B9%8BList/"/>
    <id>http://yoursite.com/2019/04/01/Java/基础知识/collection/常用集合类之List/</id>
    <published>2019-04-01T13:26:14.000Z</published>
    <updated>2019-10-27T13:57:52.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>存储元素有序，可以重复，集合中的元素都有对应的索引</li><li>集合中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素</li></ul><h2 id="常用子类"><a href="#常用子类" class="headerlink" title="常用子类"></a>常用子类</h2><p><code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code></p><a id="more"></a><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名称</th><th>作用</th><th>返回值类型</th></tr></thead><tbody><tr><td><code>get(int index)</code></td><td>返回列表中指定位置的元素。</td><td><code>E</code></td></tr><tr><td><code>indexOf(Object o)</code></td><td>返回此列表中指定元素的第一个出现项的索引，如果该列表不包含该元素，则返回-1。</td><td><code>int</code></td></tr><tr><td><code>lastIndexOf(Object o)</code></td><td>返回此列表中指定元素的最后一次出现的索引，如果该列表不包含该元素，则返回-1。</td><td><code>int</code></td></tr><tr><td><code>listIterator()</code></td><td>返回列表中元素的列表迭代器(按适当的顺序)。</td><td><code>ListIterator&lt;E&gt;</code></td></tr><tr><td><code>set(int index, E element)</code></td><td>用指定的元素(可选操作)替换列表中指定位置的元素。</td><td><code>E</code></td></tr><tr><td><code>sort(Comparator&lt;? super E&gt; c)</code></td><td>根据指定比较器所诱导的顺序对该列表进行排序。</td><td><code>void</code></td></tr><tr><td><code>subList(int fromIndex, int toIndex)</code></td><td>返回列表中指定的包含的<code>fromIndex</code>和包含的<code>toIndex</code>之间的部分的视图。</td><td><code>List&lt;E&gt;</code></td></tr><tr><td><code>remove(int index)</code></td><td>移除集合中指定索引的元素</td><td><code>E</code></td></tr><tr><td><code>remove(Object o)</code></td><td>移除集合中的第一个匹配到的指定元素</td><td><code>boolean</code></td></tr></tbody></table><hr><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先调用无参构造初始化空的底层对象数组（在首次新增元素时才会创建初始长度为10的对象数组），新增元素时调用<code>add()</code>方法进行元素存储，如果在添加元素时导致底层数组的容量不足会触发底层数组扩容的操作，默认情况下会将数组容量扩容为原来的1.5倍，同时将原来数组中的内容复制到新数组中。</p><p>如果能够确定存放元素的大致数量时，建议开发中直接调用带参构造方法指定底层数组的容量，防止集合进行频繁扩容。</p><p>因为数组在存储数据时是按顺序存储的，存储数据的内存也是连续的，所以ArrayList的特点就是读取数据比较容易，插入删除数据比较困难。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定初始Object数组的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将指定集合转为ArrayList</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 集合转为数组</span></span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检测数组是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 数组赋值</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断index是否越界</span></span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    <span class="comment">// 检测数组是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 将index之后的所有数据向后移动一位，为新元素的存放做准备</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    <span class="comment">// 将index位置覆盖为指定值</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容入口</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算最小容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="comment">// DEFAULT_CAPACITY默认数组容量为10</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// 判断是否满足扩容条件 最小容量 - Object数组的长度</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组扩容方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// 当前数组长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// 新的数组容量 = 老容量 + 老容量/2(1.5倍)</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除指定位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检测index合法性</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 获取要删除的元素</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"><span class="comment">// 将index+1以及之后的元素向前移动一位，覆盖被删除的值</span></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    <span class="comment">// 将最后一个位置的元素清空</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除集合中的指定值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断元素是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有匹配元素的情况下返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速删除</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用foreach进行集合迭代时删除元素为抛出ConcurrentModificationException异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(numberList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == integer) &#123;</span><br><span class="line">            list.remove(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exception in thread "main" java.util.ConcurrentModificationException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为使用迭代器进行元素的移除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(numberList);</span><br><span class="line">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == iterator.next())&#123;</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 修改expectedModCount与modCount一致</span></span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>链表是一种物理存储单元上非连续，非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列的节点（链表中的每一个元素称为节点）组成，节点可以在运行时动态生成。每个节点包括两部分：一部分是存储数据元素的数据域，另一部分是存储下一个节点地址的指针域。</p><p>双向链表是链表的一种，由节点组成，每个数据节点中都有两个指针，分别指向直接后继和直接前驱。</p><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入方法"><a href="#插入方法" class="headerlink" title="插入方法"></a>插入方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 新创建节点 l前继节点，e（新创建节点）,null</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 新节点是尾节点</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">// 判断链表是否有元素</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 设置原尾节点的后继节点是新节点</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 链表指定位置插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查index的合法性</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"><span class="comment">// 当index等于链表大小时表示要将元素插入链表尾部</span></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// element 要插入的节点</span></span><br><span class="line">        <span class="comment">// node(index) 原index位置节点</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="comment">// 原来index位置的前节点pred</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="comment">// 创建新节点 pred(前节点),e(指定插入节点),succ(原节点)</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    <span class="comment">// 原index位置节点的前继节点变为新节点</span></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="comment">// 判断原节点的前节点是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 前节点为空时新节点为链表的第一个节点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 修改pred的指针，指向newNode节点</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    <span class="comment">// 链表元素个数增加</span></span><br><span class="line">    size++;</span><br><span class="line">    <span class="comment">// 更改次数增加</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除指定位置的节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取index位置的元素节点</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"><span class="comment">// 如果index小于(链表的size/2)</span></span><br><span class="line">    <span class="comment">// 从前往后找</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 从后往前找</span></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中的指定内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="comment">// x 要删除的节点</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"><span class="comment">// 判断要删除节点的前继节点是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 头部指向x删除节点的后继节点</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 删除元素的前继节点指向删除元素的后继节点</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        <span class="comment">// 清空删除节点x的前继指向</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// prev &lt;-- x --&gt; next</span></span><br><span class="line"><span class="comment">// 删除节点的后继节点为空</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 尾部指向删除节点的前继节点</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 删除节点的后继节点，指向删除节点的前继节点</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        <span class="comment">// 清空删除节点x的后继指向</span></span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 清空x节点</span></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="ArrayList，LinkedList与Vector的区别"><a href="#ArrayList，LinkedList与Vector的区别" class="headerlink" title="ArrayList，LinkedList与Vector的区别"></a>ArrayList<code>，</code>LinkedList<code>与</code>Vector的区别</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>都实现了<code>List</code>接口，存储有序可重复的数据</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="ArrayList-1"><a href="#ArrayList-1" class="headerlink" title="ArrayList"></a><code>ArrayList</code></h3><p>采用异步方式处理数据，效率高，是非线程安全的。底层使用Object[]存储</p><h3 id="LinkedList-1"><a href="#LinkedList-1" class="headerlink" title="LinkedList"></a><code>LinkedList</code></h3><p>底层使用双向链表存储，对于需要频繁插入删除的操作会比<code>ArrayList</code>效率高</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><code>Vector</code></h3><p><code>Vector</code>的推出时间早于<code>ArrayList</code>与<code>LinkedList</code>,处理数据时采用同步方式，属于线程安全的操作，效率低；</p><p>虽然<code>Vector</code>属于<code>List</code>接口中线程安全的实现，但是在实际的并发操作中我们还是采用<code>Collections</code>工具类通过其提供的<code>synchronizedList(List&lt;T&gt; list)</code>方法将<code>ArrayList</code>转变为线程安全的集合实现同步操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;存储元素有序，可以重复，集合中的元素都有对应的索引&lt;/li&gt;
&lt;li&gt;集合中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用子类&quot;&gt;&lt;a href=&quot;#常用子类&quot; class=&quot;headerlink&quot; title=&quot;常用子类&quot;&gt;&lt;/a&gt;常用子类&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;、&lt;code&gt;LinkedList&lt;/code&gt;、&lt;code&gt;Vector&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="List" scheme="http://yoursite.com/tags/List/"/>
    
      <category term="JDK源码解读" scheme="http://yoursite.com/tags/JDK%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础数据操纵语言 DML 更新语句</title>
    <link href="http://yoursite.com/2019/03/18/database/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E8%AF%AD%E8%A8%80%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/03/18/database/MySQL/数据库基础之数据管理语言更新语句/</id>
    <published>2019-03-18T15:01:14.000Z</published>
    <updated>2019-10-27T13:57:52.781Z</updated>
    
    <content type="html"><![CDATA[<p>数据的更新处理大体可以分为插入（<code>INSERT</code>）、删除（<code>DELETE</code>）和更新（<code>UPDATE</code>）三类。</p><h3 id="创建测试表"><a href="#创建测试表" class="headerlink" title="创建测试表"></a>创建测试表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE ProductIns (product_id      CHAR(4)      NOT NULL,product_name    VARCHAR(100) NOT NULL, product_type    VARCHAR(32)  NOT NULL,sale_price      INTEGER      DEFAULT 0,purchase_price  INTEGER      ,regist_date     DATE ,PRIMARY KEY (product_id));</span><br></pre></td></tr></table></figure><hr><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><h4 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a><code>syntax</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class="line"></span><br><span class="line">INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class="line"></span><br><span class="line">INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    SELECT ...</span><br><span class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="基本使用1"><a href="#基本使用1" class="headerlink" title="基本使用1"></a>基本使用1</h4><h5 id="syntax-1"><a href="#syntax-1" class="headerlink" title="syntax"></a><code>syntax</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tb_name [(col1,col2,...)] &#123;VALUES | VALUE&#125; (val1,val2...)[,(val1,val2,...)];</span><br></pre></td></tr></table></figure><h5 id="eg"><a href="#eg" class="headerlink" title="eg"></a><code>eg</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> -- 插入表的全部字段的两种方式</span><br><span class="line"> -- 1.指定全部列名</span><br><span class="line"> INSERT INTO ProductIns (product_id, product_name, product_type, sale_price, purchase_price, regist_date) VALUES (&apos;0001&apos;, &apos;T恤衫&apos;, &apos;衣服&apos;, 1000, 500,Now());</span><br><span class="line"> -- 2.插入全部列时可以不指定列名，一般在插入全部字段数据时使用此方式</span><br><span class="line"> INSERT INTO ProductIns VALUES (&apos;0003&apos;, &apos;牛仔裤&apos;, &apos;衣服&apos;, 900, 600,Now());</span><br><span class="line"> </span><br><span class="line"> -- 插入表的部分字段的数据</span><br><span class="line">INSERT INTO ProductIns (product_id, product_name, product_type, sale_price, purchase_price) VALUES (&apos;0002&apos;, &apos;夹克&apos;, &apos;衣服&apos;, 1500, 800);</span><br></pre></td></tr></table></figure><h4 id="基本使用2"><a href="#基本使用2" class="headerlink" title="基本使用2"></a>基本使用2</h4><h5 id="syntax-2"><a href="#syntax-2" class="headerlink" title="syntax"></a><code>syntax</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tb_name SET col1=val1, col2=val2,...</span><br></pre></td></tr></table></figure><h5 id="eg-1"><a href="#eg-1" class="headerlink" title="eg"></a><code>eg</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO productins SET product_id=&apos;0005&apos;,product_name=&apos;灯泡&apos;,product_type=&apos;电器&apos;,sale_price=100,purchase_price=78,regist_date=NULL ;</span><br></pre></td></tr></table></figure><h4 id="基本使用3"><a href="#基本使用3" class="headerlink" title="基本使用3"></a>基本使用3</h4><h5 id="syntax-3"><a href="#syntax-3" class="headerlink" title="syntax"></a><code>syntax</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tb_name SELECT column;</span><br></pre></td></tr></table></figure><h5 id="eg-2"><a href="#eg-2" class="headerlink" title="eg"></a><code>eg</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询从其他表中查询的数据（需要注意字段类型）</span><br><span class="line">INSERT INTO productcopy SELECT * FROM productins;</span><br><span class="line"></span><br><span class="line">-- 根据商品种类进行汇总的表；</span><br><span class="line">CREATE TABLE ProductType (product_type       VARCHAR(32)     NOT NULL,sum_sale_price     INTEGER         ,sum_purchase_price INTEGER         ,PRIMARY KEY (product_type));</span><br><span class="line"></span><br><span class="line">-- 将查询到的数据插入表中（可以使用 WHERE, GROUP BY等字句）</span><br><span class="line">INSERT INTO ProductType (product_type, sum_sale_price, sum_purchase_price) SELECT product_type, SUM(sale_price), SUM(purchase_price) FROM Product GROUP BY product_type;</span><br></pre></td></tr></table></figure><blockquote><p>插入默认值可以通过两种方式实现，即在<code>INSERT</code>语句的<code>VALUES</code>子句中指定<code>DEFAULT</code>关键字（显式方法），或省略列清单（隐式方法）。</p></blockquote><hr><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><h4 id="删除整张表（包括表结构，表索引，表数据等）"><a href="#删除整张表（包括表结构，表索引，表数据等）" class="headerlink" title="删除整张表（包括表结构，表索引，表数据等）"></a>删除整张表（包括表结构，表索引，表数据等）</h4><p><code>syntax</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE tb_name；</span><br></pre></td></tr></table></figure><h4 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h4><h5 id="使用-DELETE删除数据"><a href="#使用-DELETE删除数据" class="headerlink" title="使用 DELETE删除数据"></a>使用 <code>DELETE</code>删除数据</h5><h6 id="syntax-4"><a href="#syntax-4" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br></pre></td></tr></table></figure><h6 id="eg-3"><a href="#eg-3" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 删除表中全部数据</span><br><span class="line">DELETE FROM tb_name；</span><br><span class="line"></span><br><span class="line">-- 删除表中的指定数据(可以使用 WHERE字句进行条件筛选，使用 ORDER BY，LIMIT 进行排序与限制)</span><br><span class="line"> DELETE FROM productins WHERE product_type = &apos;衣服&apos; ORDER BY sale_price DESC LIMIT 1;</span><br></pre></td></tr></table></figure><h5 id="使用-TRUNCATE删除表中数据"><a href="#使用-TRUNCATE删除表中数据" class="headerlink" title="使用 TRUNCATE删除表中数据"></a>使用 <code>TRUNCATE</code>删除表中数据</h5><h6 id="syntax-5"><a href="#syntax-5" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name;</span><br></pre></td></tr></table></figure><h6 id="TRUNCATE与-DELETE对比"><a href="#TRUNCATE与-DELETE对比" class="headerlink" title="TRUNCATE与 DELETE对比"></a><code>TRUNCATE</code>与 <code>DELETE</code>对比</h6><ul><li>Truncate操作删除并重新创建表，这很重要比逐个删除行要快，特别是对于大型表。</li><li>Truncate操作会导致隐式提交，因此无法回滚。</li><li>截断操作不会返回数字的有意义的值删除的行。通常的结果是“0行受影响”，应该是这样被解释为“没有信息”。</li><li>任何<code>AUTO_INCREMENT</code>值都重置为它的起始值。即使是<code>MyISAM</code>和<code>InnoDB</code>，它们通常也不会重用序列值。</li><li><code>TRUNCATE TABLE</code>语句不会对<code>DELETE</code>触发器调用。</li></ul><blockquote><p>虽然TRUNCATE表类似于DELETE，但它被分类为DDL语句而不是DML语句。</p></blockquote><hr><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><h4 id="syntax-6"><a href="#syntax-6" class="headerlink" title="syntax"></a><code>syntax</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_references</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [WHERE where_condition]</span><br></pre></td></tr></table></figure><h4 id="eg-4"><a href="#eg-4" class="headerlink" title="eg"></a><code>eg</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE productins SET sale_price=1300,purchase_price=800 WHERE product_id = &apos;0001&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>通常情况下 <code>UPDATE</code> 语句必须要使用 <code>WHERE</code>字句或者使用 <code>LIMIT</code>限制要修改的行数</p></blockquote><h3 id="数据库的安全模式"><a href="#数据库的安全模式" class="headerlink" title="数据库的安全模式"></a>数据库的安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查看数据库是否开启安全模式</span><br><span class="line">show variables like &apos;SQL_SAFE_UPDATES&apos;;</span><br><span class="line"></span><br><span class="line">-- 开启数据库的安全模式（关闭时将该值设置为0）</span><br><span class="line"> SET SQL_SAFE_UPDATES = 1;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据的更新处理大体可以分为插入（&lt;code&gt;INSERT&lt;/code&gt;）、删除（&lt;code&gt;DELETE&lt;/code&gt;）和更新（&lt;code&gt;UPDATE&lt;/code&gt;）三类。&lt;/p&gt;
&lt;h3 id=&quot;创建测试表&quot;&gt;&lt;a href=&quot;#创建测试表&quot; class=&quot;headerlink&quot; title=&quot;创建测试表&quot;&gt;&lt;/a&gt;创建测试表&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE ProductIns (product_id      CHAR(4)      NOT NULL,product_name    VARCHAR(100) NOT NULL, product_type    VARCHAR(32)  NOT NULL,sale_price      INTEGER      DEFAULT 0,purchase_price  INTEGER      ,regist_date     DATE ,PRIMARY KEY (product_id));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;新增数据&quot;&gt;&lt;a href=&quot;#新增数据&quot; class=&quot;headerlink&quot; title=&quot;新增数据&quot;&gt;&lt;/a&gt;新增数据&lt;/h3&gt;&lt;h4 id=&quot;syntax&quot;&gt;&lt;a href=&quot;#syntax&quot; class=&quot;headerlink&quot; title=&quot;syntax&quot;&gt;&lt;/a&gt;&lt;code&gt;syntax&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INTO] tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [PARTITION (partition_name [, partition_name] ...)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [(col_name [, col_name] ...)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;VALUES | VALUE&amp;#125; (value_list) [, (value_list)] ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ON DUPLICATE KEY UPDATE assignment_list]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INTO] tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [PARTITION (partition_name [, partition_name] ...)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SET assignment_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ON DUPLICATE KEY UPDATE assignment_list]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INTO] tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [PARTITION (partition_name [, partition_name] ...)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [(col_name [, col_name] ...)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SELECT ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ON DUPLICATE KEY UPDATE assignment_list]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="DML" scheme="http://yoursite.com/tags/DML/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础数据操纵语言 DML 简单查询</title>
    <link href="http://yoursite.com/2019/03/12/database/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2019/03/12/database/MySQL/数据库基础之数据管理语言简单查询/</id>
    <published>2019-03-12T03:18:14.000Z</published>
    <updated>2019-10-27T13:57:52.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-DML"><a href="#什么是-DML" class="headerlink" title="什么是 DML"></a>什么是 <code>DML</code></h2><p><code>DML</code>（Data Manipulation Language，数据操纵语言）用来查询或者变更表中的记录。</p><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td><code>SELECT</code></td><td>查询表中的数据</td></tr><tr><td><code>INSERT</code></td><td>向表中插入新数据</td></tr><tr><td><code>UPDATE</code></td><td>更新表中的数据</td></tr><tr><td><code>DELETE</code></td><td>删除表中的数据</td></tr></tbody></table><a id="more"></a><hr><h2 id="练习所需表"><a href="#练习所需表" class="headerlink" title="练习所需表"></a>练习所需表</h2><h3 id="基础表"><a href="#基础表" class="headerlink" title="基础表"></a>基础表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Product</span><br><span class="line">(product_id      CHAR(4)      NOT NULL,</span><br><span class="line"> product_name    VARCHAR(100) NOT NULL,</span><br><span class="line"> product_type    VARCHAR(32)  NOT NULL,</span><br><span class="line"> sale_price      INTEGER      ,</span><br><span class="line"> purchase_price  INTEGER      ,</span><br><span class="line"> regist_date     DATE         ,</span><br><span class="line"> PRIMARY KEY (product_id));</span><br></pre></td></tr></table></figure><h3 id="基础数据"><a href="#基础数据" class="headerlink" title="基础数据"></a>基础数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 插入数据</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">INSERT INTO Product VALUES (&apos;0001&apos;, &apos;T恤衫&apos;, &apos;衣服&apos;, 1000, 500, &apos;2009-09-20&apos;);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0002&apos;, &apos;打孔器&apos;, &apos;办公用品&apos;, 500, 320, &apos;2009-09-11&apos;);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0003&apos;, &apos;运动T恤&apos;, &apos;衣服&apos;, 4000, 2800, NULL);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0004&apos;, &apos;菜刀&apos;, &apos;厨房用具&apos;, 3000, 2800, &apos;2009-09-20&apos;);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0005&apos;, &apos;高压锅&apos;, &apos;厨房用具&apos;, 6800, 5000, &apos;2009-01-15&apos;);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0006&apos;, &apos;叉子&apos;, &apos;厨房用具&apos;, 500, NULL, &apos;2009-09-20&apos;);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0007&apos;, &apos;擦菜板&apos;, &apos;厨房用具&apos;, 880, 790, &apos;2008-04-28&apos;);</span><br><span class="line">INSERT INTO Product VALUES (&apos;0008&apos;, &apos;圆珠笔&apos;, &apos;办公用品&apos;, 100, NULL,&apos;2009-11-11&apos;);</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a><code>SELECT</code></h2><h3 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a><code>syntax</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    [ALL | DISTINCT | DISTINCTROW ]</span><br><span class="line">      [HIGH_PRIORITY]</span><br><span class="line">      [STRAIGHT_JOIN]</span><br><span class="line">      [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]</span><br><span class="line">      SQL_NO_CACHE [SQL_CALC_FOUND_ROWS]</span><br><span class="line">    select_expr [, select_expr ...]</span><br><span class="line">    [FROM table_references</span><br><span class="line">      [PARTITION partition_list]</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [GROUP BY &#123;col_name | expr | position&#125;, ... [WITH ROLLUP]]</span><br><span class="line">    [HAVING where_condition]</span><br><span class="line">    [WINDOW window_name AS (window_spec)</span><br><span class="line">        [, window_name AS (window_spec)] ...]</span><br><span class="line">    [ORDER BY &#123;col_name | expr | position&#125;</span><br><span class="line">      [ASC | DESC], ... [WITH ROLLUP]]</span><br><span class="line">    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br><span class="line">    [INTO OUTFILE &apos;file_name&apos;</span><br><span class="line">        [CHARACTER SET charset_name]</span><br><span class="line">        export_options</span><br><span class="line">      | INTO DUMPFILE &apos;file_name&apos;</span><br><span class="line">      | INTO var_name [, var_name]]</span><br><span class="line">    [FOR &#123;UPDATE | SHARE&#125; [OF tbl_name [, tbl_name] ...] [NOWAIT | SKIP LOCKED]</span><br><span class="line">      | LOCK IN SHARE MODE]]</span><br></pre></td></tr></table></figure><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><h4 id="查询表中全部的列"><a href="#查询表中全部的列" class="headerlink" title="查询表中全部的列"></a>查询表中全部的列</h4><p><code>syntax</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb_name;</span><br></pre></td></tr></table></figure><p>使用 <code>*</code>代替列名不能指定查询后列的显示顺序，查询结果按照定义表时的字段顺序进行排列。</p><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/flvLrC93pzIf.png" alt="mark"></p><h4 id="使用-DISTINCT去除重复记录"><a href="#使用-DISTINCT去除重复记录" class="headerlink" title="使用 DISTINCT去除重复记录"></a>使用 <code>DISTINCT</code>去除重复记录</h4><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT product_type FROM product;</span><br></pre></td></tr></table></figure><ul><li><code>DISTINCT</code> 关键字只能出现在第一个列名之前</li><li><code>DISTINCT</code>关键字可以用于多列之前，会将多列数据进行组合，并将重复数据合并为一条。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT product_type,regist_date FROM product;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/cNKRaaVj4fsl.png" alt="mark"></p><h4 id="使用-AS-关键字指定查询列的别名"><a href="#使用-AS-关键字指定查询列的别名" class="headerlink" title="使用 AS 关键字指定查询列的别名"></a>使用 <code>AS</code> 关键字指定查询列的别名</h4><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_name AS &quot;商品名称&quot;,sale_price AS &quot;售价&quot;,product_type AS &quot;商品类型&quot; FROM product;</span><br></pre></td></tr></table></figure><ul><li>设定汉语别名时需要使用双引号（<code>&quot;</code>）括起来。</li></ul><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/piJPI7pSAqyL.png" alt="mark"></p><h4 id="使用-WHERE-关键字筛选记录"><a href="#使用-WHERE-关键字筛选记录" class="headerlink" title="使用 WHERE 关键字筛选记录"></a>使用 <code>WHERE</code> 关键字筛选记录</h4><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询商品名称为“叉子”的商品信息</span><br><span class="line">SELECT product_name AS &quot;商品名称&quot;,sale_price AS &quot;售价&quot;,product_type AS &quot;商品类型&quot; FROM product WHERE product_name = &apos;叉子&apos;;</span><br><span class="line"></span><br><span class="line">-- 查询售价小于1000的商品</span><br><span class="line">SELECT * FROM product WHERE sale_price &lt;= 1000;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/4L2caUFuMQpI.png" alt="mark"></p><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td><code>=</code></td><td>相等</td></tr><tr><td><code>&lt;&gt;</code></td><td>不相等</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr></tbody></table><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询日期不等于“2009-09-20”的商品</span><br><span class="line">SELECT * FROM product WHERE regist_date &lt;&gt; &apos;2009-09-20&apos;;</span><br></pre></td></tr></table></figure><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td><code>NOT</code></td><td>不是</td></tr><tr><td><code>AND</code></td><td>与</td></tr><tr><td><code>OR</code></td><td>或</td></tr></tbody></table><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM product WHERE regist_date IS NOT NULL AND product_name = &apos;菜刀&apos;;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/EDw1yvPMwOC0.png" alt="mark"></p><hr><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p><code>question</code></p><p>编写一条 SQL 语句，从 <code>Product</code>（商品）表中选取出“登记日期（<code>regist_date</code>）在 2009 年 4 月 28 日之后”的商品。查询结果要包含 <code>product_name</code> 和 <code>regist_date</code> 两列。</p><p><code>answer</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_name AS &quot;商品名称&quot;,regist_date AS &quot;日期&quot; FROM product WHERE regist_date &gt; &apos;2009-04-28&apos;;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/cRCMcTCa2LpM.png" alt="mark"></p><p><code>question</code></p><p>请说出对 <code>Product</code> 表执行如下 3 条 <code>SELECT</code> 语句时的返回结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">① SELECT *</span><br><span class="line">        FROM Product</span><br><span class="line">       WHERE purchase_price = NULL;</span><br><span class="line">② SELECT *</span><br><span class="line">        FROM Product</span><br><span class="line">       WHERE purchase_price &lt;&gt; NULL;</span><br><span class="line">③ SELECT *</span><br><span class="line">        FROM Product</span><br><span class="line">       WHERE product_name &gt; NULL;</span><br></pre></td></tr></table></figure><p><code>answer</code></p><p>结果全部为空，对包含 <code>NULL</code>值的筛选应该使用 <code>IS NULL</code> 或者 <code>IS NOT NULL</code></p><p><code>question</code></p><p>代码清单 2-22（2-2 节）中的 <code>SELECT</code> 语句能够从 <code>Product</code> 表中取出“销售单价（<code>sale_price</code>）比进货单价（<code>purchase_price</code>）高出 500 日元以上”的商品。请写出两条可以得到相同结果的 <code>SELECT</code> 语句。执行结果如下所示。</p><p><strong>执行结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> product_name  | sale_price  | purchase_price</span><br><span class="line">---------------+-------------+----------------</span><br><span class="line"> T恤衫         |        1000 |            500</span><br><span class="line"> 运动T恤       |        4000 |           2800</span><br><span class="line"> 高压锅        |        6800 |           5000</span><br></pre></td></tr></table></figure><p><code>answer1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_name,sale_price,purchase_price FROM product WHERE product_name = &quot;高压锅&quot; OR product_type = &quot;衣服&quot;;</span><br></pre></td></tr></table></figure><p><code>answer2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_name,sale_price,purchase_price FROM product WHERE product_id%2 = 1 LIMIT 3;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/cqaUrAjPzA8A.png" alt></p><p><code>question</code></p><p>请写出一条 <code>SELECT</code> 语句，从 <code>Product</code> 表中选取出满足“销售单价打九折之后利润高于 100 日元的办公用品和厨房用具”条件的记录。查询结果要包括 <code>produpct_name</code> 列、<code>product_type</code> 列以及销售单价打九折之后的利润（别名设定为 <code>profit</code>）。</p><p>提示：销售单价打九折，可以通过 <code>sale_price</code> 列的值乘以 0.9 获得，利润可以通过该值减去 <code>purchase_price</code> 列的值获得。</p><p><code>answer</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_name,product_type,(sale_price*0.9-purchase_price) AS &apos;profit&apos; FROM product WHERE sale_price*0.9-purchase_price &gt; 100 AND (product_type = &apos;办公用品&apos; OR product_type = &apos;厨房用具&apos;);</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/2xonSQCDJdtQ.png" alt="mark"></p><hr><h3 id="聚合与排序"><a href="#聚合与排序" class="headerlink" title="聚合与排序"></a>聚合与排序</h3><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table><thead><tr><th>函数名称</th><th>操作</th></tr></thead><tbody><tr><td>COUNT</td><td>计算表中的记录数（行数）</td></tr><tr><td>SUM</td><td>计算表中数值列中数据的合计值</td></tr><tr><td>AVG</td><td>计算表中数值列中数据的平均值</td></tr><tr><td>MAX</td><td>求出表中任意列中数据的最大值</td></tr><tr><td>MIN</td><td>求出表中任意列中数据的最小值</td></tr></tbody></table><h5 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a><code>COUNT</code></h5><p><code>COUNT</code>函数的结果根据参数的不同而不同。<code>COUNT(*)</code>会得到包含<code>NULL</code>的数据行数，而<code>COUNT(&lt;列名&gt;)</code>会得到<code>NULL</code>之外的数据行数。</p><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询包含NULL值的列</span><br><span class="line">SELECT COUNT(purchase_price) FROM product;</span><br><span class="line">-- 查询总记录数</span><br><span class="line">SELECT COUNT(*) FROM product;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/qxl9jFo4LlTq.png" alt="mark"></p><h5 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a><code>SUM</code></h5><p>计算合计值</p><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(sale_price) AS &quot;售价总和&quot; FROM product;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/mvUYVBsoQvI6.png" alt="mark"></p><h5 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a><code>AVG</code></h5><p>计算平均值</p><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(sale_price) AS &quot;售价平均值&quot; FROM product;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/KE8kO6b2P6rN.png" alt></p><h5 id="MAX-MIN"><a href="#MAX-MIN" class="headerlink" title="MAX MIN"></a><code>MAX</code> <code>MIN</code></h5><p>最大值与最小值</p><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(sale_price) AS &quot;最高售价&quot;,MIN(sale_price) AS &quot;最低售价&quot; FROM product;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/8mFNxhm5fyXh.png" alt="mark"></p><blockquote><p>聚合函数会将<code>NULL</code>排除在外。但<code>COUNT(*)</code>例外，并不会排除<code>NULL</code>。</p><p><code>MAX/MIN</code>函数几乎适用于所有数据类型的列。<code>SUM/AVG</code>函数只适用于数值类型的列。</p><p>在聚合函数的参数中使用<code>DISTINCT</code>，可以删除重复数据。</p></blockquote><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>使用聚合函数和<code>GROUP BY</code>子句时需要注意以下4点。</p><ul><li>只能写在<code>SELECT</code>子句之中</li><li><code>GROUP BY</code>子句中不能使用<code>SELECT</code>子句中列的别名</li><li><code>GROUP BY</code>子句的聚合结果是无序的</li><li><code>WHERE</code>子句中不能使用聚合函数</li></ul><p>聚合键中包含<code>NULL</code>时，在结果中会以“不确定”行（空行）的形式表现出来。</p><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_type, COUNT(*) FROM Product GROUP BY product_type;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/tcHfAjHlAYYy.png" alt="mark"></p><h5 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h5><ul><li>使用<code>GROUP BY</code>子句时，<code>SELECT</code>子句中不能出现聚合键之外的列名。</li><li>在 <code>GROUP BY</code> 子句中写了列的别名（与SQL内部的执行顺序有关）</li><li><code>GROUP BY</code> 字句的结果无法进行排序（通过 <code>SELECT</code>语句指定排序方式）</li><li>只有<code>SELECT</code>子句和<code>HAVING</code>子句（以及<code>ORDER BY</code>子句）中能够使用聚合函数。</li></ul><h5 id="为聚合结果指定条件（HAVING）"><a href="#为聚合结果指定条件（HAVING）" class="headerlink" title="为聚合结果指定条件（HAVING）"></a>为聚合结果指定条件（HAVING）</h5><ul><li>使用<code>COUNT</code>函数等对表中数据进行汇总操作时，为其指定条件的不是<code>WHERE</code>子句，而是<code>HAVING</code>子句。</li><li>聚合函数可以在<code>SELECT</code>子句、<code>HAVING</code>子句和<code>ORDER BY</code>子句中使用。</li><li><code>HAVING</code>子句要写在<code>GROUP BY</code>子句之后。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_type, COUNT(*) FROM Product GROUP BY product_type HAVING COUNT(*) = 2;</span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code>子句用来指定数据行的条件，<code>HAVING</code>子句用来指定分组的条件。</li></ul><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/AqVw4PKGviM0.png" alt="mark"></p><h6 id="HAVING字句构成要素"><a href="#HAVING字句构成要素" class="headerlink" title="HAVING字句构成要素"></a><code>HAVING</code>字句构成要素</h6><ul><li>常数</li><li>聚合函数</li><li><code>GROUP BY</code>字句指定的列名</li></ul><h6 id="HAVING-与-WHERE-对比"><a href="#HAVING-与-WHERE-对比" class="headerlink" title="HAVING 与 WHERE 对比"></a><code>HAVING</code> 与 <code>WHERE</code> 对比</h6><p>聚合键所对应的条件不应该书写在<code>HAVING</code>子句当中，而应该书写在<code>WHERE</code>子句当中。</p><ul><li>二者的作用不同，<code>HAVING</code> 子句是用来指定“组”的条件的。“行”所对应的条件还是应该写在 <code>WHERE</code> 子句当中。</li><li>使用 <code>COUNT</code> 函数等对表中的数据进行聚合操作时，DBMS 内部就会进行排序处理。通过 <code>WHERE</code> 子句指定条件时，由于排序之前就对数据进行了过滤，因此能够减少排序的数据量。但 <code>HAVING</code> 子句是在排序之后才对数据进行分组的，因此与在 <code>WHERE</code> 子句中指定条件比起来，需要排序的数据量就会多得多。</li><li>对 <code>WHERE</code> 子句指定条件所对应的列创建<strong>索引</strong>，这样也可以大幅提高处理速度。</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ul><li>使用<code>ORDER BY</code>子句对查询结果进行排序,<code>ORDER BY</code>子句通常写在<code>SELECT</code>语句的末尾。</li><li>在<code>ORDER BY</code>子句中列名的后面使用关键字<code>ASC</code>可以进行升序排序，使用<code>DESC</code>关键字可以进行降序排序,默认使用升序进行排列。</li><li><code>ORDER BY</code>子句中可以指定多个排序键。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_id, product_name, sale_price, purchase_price FROM Product ORDER BY sale_price, purchase_price;</span><br></pre></td></tr></table></figure><ul><li>排序健中包含<code>NULL</code>时，会在开头或末尾进行汇总。</li><li><code>ORDER BY</code>子句中可以使用<code>SELECT</code>子句中定义的列的别名。</li><li><code>ORDER BY</code>子句中可以使用<code>SELECT</code>子句中未出现的列或者聚合函数。</li><li><code>ORDER BY</code>子句中不能使用列的编号。</li></ul><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/mUcDgXklc1vK.png" alt="mark"></p><h4 id="使用-HAVING-子句时-SELECT-语句的顺序"><a href="#使用-HAVING-子句时-SELECT-语句的顺序" class="headerlink" title="使用 HAVING 子句时 SELECT 语句的顺序"></a>使用 HAVING 子句时 SELECT 语句的顺序</h4><p><code>FROM</code> → <code>WHERE</code> → <code>GROUP BY</code> → <code>HAVING</code> → <code>SELECT</code> → <code>ORDER BY</code></p><p>执行流程</p><p>先执行 <code>FROM</code> 字句，然后从表中执行 <code>WHERE</code> 字句找到符合筛选条件的记录，在执行 <code>GROUP BY</code> 函数进行分组，而后执行 <code>HAVING</code> 对分组结果进行聚合过滤，而后使用 <code>ORDER BY</code> 进行排序，然后才去执行 <code>SELECT</code> 操作，最后执行 <code>LIMIT</code> 限制返回记录数</p><hr><h4 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h4><p><code>question</code></p><p>请指出下述 <code>SELECT</code> 语句中所有的语法错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_id, SUM(product_name)</span><br><span class="line">-- 本SELECT语句中存在错误。</span><br><span class="line">  FROM Product</span><br><span class="line"> GROUP BY product_type</span><br><span class="line"> WHERE regist_date &gt; &apos;2009-09-01&apos;;</span><br></pre></td></tr></table></figure><p><code>answer</code></p><ul><li><code>GROUP BY</code> 字句中不能出现<code>SELECT</code> 字句不包含的列；</li><li><code>GROUP BY</code>字句应该位于 <code>WHERE</code>字句之后；</li></ul><p><code>question</code></p><p>请编写一条 <code>SELECT</code> 语句，求出销售单价（<code>sale_price</code> 列）合计值是进货单价（<code>purchase_price</code> 列）合计值 1.5 倍的商品种类。执行结果如下所示。</p><p><img src="http://www.ituring.com.cn/figures/2017/SQLbase/05.d03z.029.png" alt></p><p><code>answer</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_type,SUM(sale_price) AS &quot;售价总和&quot;,SUM(purchase_price) AS &quot;进价总和&quot; FROM product GROUP BY product_type HAVING SUM(sale_price)/SUM(purchase_price) = 1.5;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/raFmHrqMVYxo.png" alt="mark"></p><p><code>question</code></p><p>此前我们曾经使用 <code>SELECT</code> 语句选取出了 <code>Product</code>（商品）表中的全部记录。当时我们使用了 <code>ORDER BY</code> 子句来指定排列顺序，但现在已经无法记起当时如何指定的了。请根据下列执行结果，思考 <code>ORDER BY</code> 子句的内容。</p><p><strong>执行结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">product_id | product_name | product_type | sale_price  | purchase_price | regist_date</span><br><span class="line">-----------+--------------+--------------+-------------+----------------+-----------</span><br><span class="line">0003       | 运动T恤      | 衣服         |        4000 |           2800 |</span><br><span class="line">0008       | 圆珠笔       | 办公用品     |         100 |                | 2009-11-11</span><br><span class="line">0006       | 叉子         | 厨房用具     |         500 |                | 2009-09-20</span><br><span class="line">0001       | T恤衫        | 衣服         |        1000 |            500 | 2009-09-20</span><br><span class="line">0004       | 菜刀         | 厨房用具     |        3000 |           2800 | 2009-09-20</span><br><span class="line">0002       | 打孔器       | 办公用品     |         500 |            320 | 2009-09-11</span><br><span class="line">0005       | 高压锅       | 厨房用具     |        6800 |           5000 | 2009-01-15</span><br><span class="line">0007       | 擦菜板       | 厨房用具     |         880 |            790 | 2008-04-28</span><br></pre></td></tr></table></figure><p><code>answer</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 按照日期降序，售价升序的方式排列</span><br><span class="line">SELECT * FROM product ORDER BY regist_date DESC,sale_price ASC;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/blog/database/sql/DML//20190312/dztiwn5OSh8S.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-DML&quot;&gt;&lt;a href=&quot;#什么是-DML&quot; class=&quot;headerlink&quot; title=&quot;什么是 DML&quot;&gt;&lt;/a&gt;什么是 &lt;code&gt;DML&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;DML&lt;/code&gt;（Data Manipulation Language，数据操纵语言）用来查询或者变更表中的记录。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查询表中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INSERT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向表中插入新数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UPDATE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;更新表中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除表中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="DML" scheme="http://yoursite.com/tags/DML/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础之数据定义语言 DDL</title>
    <link href="http://yoursite.com/2019/03/11/database/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%802019%E5%B9%B43%E6%9C%8811%E6%97%A5/"/>
    <id>http://yoursite.com/2019/03/11/database/MySQL/数据库基础之数据定义语言2019年3月11日/</id>
    <published>2019-03-11T06:40:14.000Z</published>
    <updated>2019-10-27T13:57:52.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL基本书写规则"><a href="#SQL基本书写规则" class="headerlink" title="SQL基本书写规则"></a><code>SQL</code>基本书写规则</h2><ul><li><code>SQL</code> 语句要以分号（;）结尾.</li><li><p><code>SQL</code> 不区分关键字的大小写。</p></li><li><p>字符串和日期常数需要使用单引号（’）括起来，数字常数无需加注单引号。</p></li><li><p>SQL 语句的单词之间需使用<strong>半角</strong>空格或换行符来进行分隔。</p></li></ul><a id="more"></a><ul><li>数据库名称、表名和列名等可以使用以下三种字符<ul><li>半角英文字母</li><li>半角数字</li><li>下划线 <code>_</code></li></ul></li><li>数据库名称必须以<strong>半角</strong>英文字母作为开头,并且不能创建同名称数据库，表或者列。</li><li>设定汉语别名时需要使用双引号（<code>&quot;</code>）括起来。</li></ul><blockquote><p><code>MySQL</code>字符大小写问题</p><ul><li><code>SQL</code>函数与关键字是不区分大小写的</li><li>数据库、表名、视图名大小写区分与否取决于底层操作系统与文件系统</li><li>存储过程，存储函数以及时间调度器的名字不区分大小写，但是触发器区分大小写</li><li>表别名区分大小写</li><li>对字段的数据，如果字段类型为 <code>Binary</code>类型，区分大小写，非 <code>Binary</code>不区分大小写</li></ul></blockquote><hr><h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL 数据定义语言"></a><code>DDL</code> 数据定义语言</h2><p><strong>DDL（Data Definition Language，数据定义语言）</strong>用来创建或者删除存储数据用的数据库以及数据库中的表等对象。</p><table><thead><tr><th>关键字</th><th>操作</th></tr></thead><tbody><tr><td><code>CREATE</code></td><td><strong>创建</strong>数据库和表等对象</td></tr><tr><td><code>DROP</code></td><td><strong>删除</strong>数据库和表等对象</td></tr><tr><td><code>ALTER</code></td><td><strong>修改</strong>数据库和表等对象的结构</td></tr></tbody></table><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h4 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a><code>syntax</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name</span><br><span class="line">    [ ] ...</span><br><span class="line">create_specification:</span><br><span class="line">    [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>db_name</code></td><td>数据库名称</td></tr><tr><td><code>CHARACTER</code></td><td>字符集</td></tr><tr><td><code>COLLATE</code></td><td>排序规则</td></tr></tbody></table><h4 id="eg"><a href="#eg" class="headerlink" title="eg"></a><code>eg</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mydb DEFAULT CHARACTER SET &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><h4 id="syntax-1"><a href="#syntax-1" class="headerlink" title="syntax"></a><code>syntax</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name</span><br></pre></td></tr></table></figure><h4 id="eg-1"><a href="#eg-1" class="headerlink" title="eg"></a><code>eg</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE mydb;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93.png-geekerit" alt></p><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><h4 id="syntax-2"><a href="#syntax-2" class="headerlink" title="syntax"></a><code>syntax</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name]</span><br><span class="line">    alter_specification ...</span><br><span class="line"></span><br><span class="line">alter_specification:</span><br><span class="line">    [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br></pre></td></tr></table></figure><h3 id="修改数据库表"><a href="#修改数据库表" class="headerlink" title="修改数据库表"></a>修改数据库表</h3><h4 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h4><h5 id="字段设置默认值"><a href="#字段设置默认值" class="headerlink" title="字段设置默认值"></a>字段设置默认值</h5><h6 id="syntax-3"><a href="#syntax-3" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name  ALTER [COLUMN] col_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;</span><br></pre></td></tr></table></figure><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students ALTER Tutor SET DEFAULT &apos;Arwin&apos;;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E8%AE%BE%E7%BD%AE%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E5%80%BC%EF%BC%88ALTER%EF%BC%89.png" alt></p><h5 id="插入新字段"><a href="#插入新字段" class="headerlink" title="插入新字段"></a>插入新字段</h5><h6 id="syntax-4"><a href="#syntax-4" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过关键词 AFTER 指定该字段位于哪个字段之后</span><br><span class="line">ALTER TABLE tbl_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name]</span><br></pre></td></tr></table></figure><h6 id="eg-2"><a href="#eg-2" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students ADD COLUMN phone VARVHAR(20) NOT NULL AFTER Age;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E6%8F%92%E5%85%A5%E6%96%B0%E5%AD%97%E6%AE%B5%EF%BC%88ALTER%EF%BC%89.png-geekerit" alt></p><h5 id="修改字段名与定义"><a href="#修改字段名与定义" class="headerlink" title="修改字段名与定义"></a>修改字段名与定义</h5><h6 id="syntax-5"><a href="#syntax-5" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name]</span><br></pre></td></tr></table></figure><p><code>eg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students CHANGE phone user_phone CHAR(11) NOT NULL;</span><br></pre></td></tr></table></figure><h5 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h5><h6 id="syntax-6"><a href="#syntax-6" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name RENAME COLUMN old_col_name TO new_col_name</span><br></pre></td></tr></table></figure><h6 id="eg-3"><a href="#eg-3" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students RENAME COLUMN user_phone TO phone;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0%EF%BC%88ALTER%20RENAME%20TO%EF%BC%89.png" alt></p><h5 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h5><h6 id="syntax-7"><a href="#syntax-7" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name DROP [COLUMN] col_name</span><br></pre></td></tr></table></figure><h6 id="eg-4"><a href="#eg-4" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students DROP COLUMN phone;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5%EF%BC%88ALTER%20DROP%20COLUMN%EF%BC%89.png" alt></p><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><h5 id="更改表名"><a href="#更改表名" class="headerlink" title="更改表名"></a>更改表名</h5><h6 id="syntax-8"><a href="#syntax-8" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name</span><br></pre></td></tr></table></figure><h6 id="eg-5"><a href="#eg-5" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students RENAME TO student;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E6%9B%B4%E6%94%B9%E8%A1%A8%E5%90%8D%EF%BC%88ALTER%20RENAME%20TB_NAME%EF%BC%89.png-geekerit" alt></p><h5 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a>修改存储引擎</h5><h6 id="syntax-9"><a href="#syntax-9" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ENGINE [=] engine_name</span><br></pre></td></tr></table></figure><h6 id="eg-6"><a href="#eg-6" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student RNGINE = MyISAM;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%EF%BC%88ALTER%20ENGINE%EF%BC%89.png" alt></p><h5 id="指定排序标准的字段"><a href="#指定排序标准的字段" class="headerlink" title="指定排序标准的字段"></a>指定排序标准的字段</h5><h6 id="syntax-10"><a href="#syntax-10" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name [DEFAULT] COLLATE [=] collation_name</span><br></pre></td></tr></table></figure><h5 id="转换字符集及排序规则"><a href="#转换字符集及排序规则" class="headerlink" title="转换字符集及排序规则"></a>转换字符集及排序规则</h5><h6 id="syntax-11"><a href="#syntax-11" class="headerlink" title="syntax"></a><code>syntax</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name [DEFAULT] CHARACTER SET [=] charset_name</span><br></pre></td></tr></table></figure><h6 id="eg-7"><a href="#eg-7" class="headerlink" title="eg"></a><code>eg</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student CHARACTER SET = UTF8;</span><br></pre></td></tr></table></figure><hr><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><h5 id="syntax-12"><a href="#syntax-12" class="headerlink" title="syntax"></a><code>syntax</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    (create_definition,...)</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create_definition:</span><br><span class="line">    col_name column_definition</span><br><span class="line">  | [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (key_part,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | &#123;INDEX|KEY&#125; [index_name] [index_type] (key_part,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY]</span><br><span class="line">      [index_name] [index_type] (key_part,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | &#123;FULLTEXT|SPATIAL&#125; [INDEX|KEY] [index_name] (key_part,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [CONSTRAINT [symbol]] FOREIGN KEY</span><br><span class="line">      [index_name] (col_name,...) reference_definition</span><br><span class="line">  | CHECK (expr)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">table_option:</span><br><span class="line"># 自动增长值从几开始</span><br><span class="line">    AUTO_INCREMENT [=] value</span><br><span class="line">  | AVG_ROW_LENGTH [=] value</span><br><span class="line">  # 默认字符集</span><br><span class="line">  | [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  # 是否校验表，每次对表的操作都会触发，系统开销较大</span><br><span class="line">  | CHECKSUM [=] &#123;0 | 1&#125;</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br><span class="line">  # 添加表注释</span><br><span class="line">  | COMMENT [=] &apos;string&apos;</span><br><span class="line">  | COMPRESSION [=] &#123;&apos;ZLIB&apos;|&apos;LZ4&apos;|&apos;NONE&apos;&#125;</span><br><span class="line">  | CONNECTION [=] &apos;connect_string&apos;</span><br><span class="line">  # 数据目录 | 索引目录</span><br><span class="line">  | &#123;DATA|INDEX&#125; DIRECTORY [=] &apos;absolute path to directory&apos;</span><br><span class="line">  # 延迟键写入</span><br><span class="line">  | DELAY_KEY_WRITE [=] &#123;0 | 1&#125;</span><br><span class="line">  | ENCRYPTION [=] &#123;&apos;Y&apos; | &apos;N&apos;&#125;</span><br><span class="line">  | ENGINE [=] engine_name</span><br><span class="line">  | INSERT_METHOD [=] &#123; NO | FIRST | LAST &#125;</span><br><span class="line">  | KEY_BLOCK_SIZE [=] value</span><br><span class="line">  | MAX_ROWS [=] value</span><br><span class="line">  | MIN_ROWS [=] value</span><br><span class="line">  | PACK_KEYS [=] &#123;0 | 1 | DEFAULT&#125;</span><br><span class="line">  | PASSWORD [=] &apos;string&apos;</span><br><span class="line">  # 表格式</span><br><span class="line">  | ROW_FORMAT [=] &#123;DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT&#125;</span><br><span class="line">  | STATS_AUTO_RECALC [=] &#123;DEFAULT|0|1&#125;</span><br><span class="line">  | STATS_PERSISTENT [=] &#123;DEFAULT|0|1&#125;</span><br><span class="line">  | STATS_SAMPLE_PAGES [=] value</span><br><span class="line">  # 文件存储位置 &#123;DISK | MEMEORY | DEFAULT&#125;</span><br><span class="line">  | TABLESPACE tablespace_name</span><br><span class="line">  | UNION [=] (tbl_name[,tbl_name]...)</span><br></pre></td></tr></table></figure><h5 id="eg-8"><a href="#eg-8" class="headerlink" title="eg"></a><code>eg</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students (SID INT UNSIGNED AUTO_INCREMENT NOT NULL UNIQUE KEY,Name CHAR(30) NOT NULL,Age TINYINT UNSIGNED NOT NULL,Gender ENUM (&apos;F&apos;,&apos;M&apos;) NOT NULL,Tutor CHAR(30));</span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>根据现有的表记录填充数据，并不会完全复制表结构</p><h5 id="syntax-13"><a href="#syntax-13" class="headerlink" title="syntax"></a><code>syntax</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    [(create_definition,...)]</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line">    [IGNORE | REPLACE]</span><br><span class="line">    [AS] query_expression</span><br></pre></td></tr></table></figure><h5 id="eg-9"><a href="#eg-9" class="headerlink" title="eg"></a><code>eg</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students2 select * from students;</span><br></pre></td></tr></table></figure><p>表数据</p><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%A4%8D%E5%88%B6%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%88%E5%AF%B9%E6%AF%94%E8%A1%A8%E6%95%B0%E6%8D%AE%EF%BC%89.png" alt></p><p>表结构</p><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%A4%8D%E5%88%B6%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%88%E5%AF%B9%E6%AF%94%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%89.png" alt="表结构"></p><h4 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h4><p>根据现有表复制表结构</p><h5 id="syntax-14"><a href="#syntax-14" class="headerlink" title="syntax"></a><code>syntax</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;</span><br></pre></td></tr></table></figure><h5 id="eg-10"><a href="#eg-10" class="headerlink" title="eg"></a><code>eg</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students3 LIKE students;</span><br></pre></td></tr></table></figure><p>表数据</p><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%A4%8D%E5%88%B6%E8%A1%A8%E7%BB%93%E6%9E%84%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%88%E5%AF%B9%E6%AF%94%E8%A1%A8%E6%95%B0%E6%8D%AE%EF%BC%89.png" alt></p><p>表结构</p><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%A4%8D%E5%88%B6%E8%A1%A8%E7%BB%93%E6%9E%84%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%88%E5%AF%B9%E6%AF%94%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%89.png" alt></p><p>字段的定义：字段名、类型和类型修饰符</p><p>键、约束或者索引</p><ul><li><code>PRIMARY KEY</code> 主键</li><li><code>UNIQUE KEY</code> 唯一键</li><li><code>FOREIGN KEY</code> 外键</li></ul><p>键本身就是约束，主键非空唯一</p><p>键本身都是索引，但是索引不一定是键</p><h2 id="查看数据库相关信息"><a href="#查看数据库相关信息" class="headerlink" title="查看数据库相关信息"></a>查看数据库相关信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查看数据库列表</span><br><span class="line">SHOW DATABASES;</span><br><span class="line"># 切换到数据库</span><br><span class="line">use DATABASE;</span><br><span class="line"># 查看某张表的表结构</span><br><span class="line">DESC tb_name;</span><br><span class="line"># 查看存储引擎</span><br><span class="line">SHOW ENGINES;</span><br><span class="line"># 查看表的状态</span><br><span class="line">SHOW TABLE STATUS LIKE &apos;TABLE_NAME&apos;\G</span><br><span class="line"># 查看表索引</span><br><span class="line">SHOW INDEXS FROM TABLE_NAME</span><br><span class="line"># 查看支持的排序规则</span><br><span class="line">SHOW COLLATION;</span><br></pre></td></tr></table></figure><hr><h2 id="存储引擎的存储表方式区别"><a href="#存储引擎的存储表方式区别" class="headerlink" title="存储引擎的存储表方式区别"></a>存储引擎的存储表方式区别</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a><code>MyISAM</code></h3><p>每表有三个文件，位于数据库目录中</p><ul><li><code>tb_name.frm</code>:表结构定义</li><li><code>tb_name.MYD</code>数据文件</li><li><code>tb_name.MYI</code>：索引文件</li></ul><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a><code>InnoDB</code></h3><p>两种存储方式</p><h4 id="默认存储方式"><a href="#默认存储方式" class="headerlink" title="默认存储方式"></a>默认存储方式</h4><p>每表一个独立文件和一个多表共享的文件</p><ul><li><code>tb_name.frm</code>:表结构的定义，位于数据库目录中</li><li><code>ibdata</code>#:共享的表空间文件，默认位于数据目录(datadir指向的目录)</li></ul><h4 id="独立的表空间"><a href="#独立的表空间" class="headerlink" title="独立的表空间"></a>独立的表空间</h4><p>此方式有利于表迁移与维护</p><ul><li><code>tb_name.frm</code>:每表有一个表结构文件</li><li><code>tb_name.ibd</code>:一个独有的表空间文件</li></ul><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习题1"><a href="#练习题1" class="headerlink" title="练习题1"></a>练习题1</h3><h4 id="创建-shop-数据库"><a href="#创建-shop-数据库" class="headerlink" title="创建 shop 数据库"></a>创建 <code>shop</code> 数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS shop DEFAULT CHARACTER SET &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure><h4 id="创建-product-表"><a href="#创建-product-表" class="headerlink" title="创建 product 表"></a>创建 <code>product</code> 表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Product</span><br><span class="line">(product_id      CHAR(4)      NOT NULL,</span><br><span class="line"> product_name    VARCHAR(100) NOT NULL,</span><br><span class="line"> product_type    VARCHAR(32)  NOT NULL,</span><br><span class="line"> sale_price      INTEGER      ,</span><br><span class="line"> purchase_price  INTEGER      ,</span><br><span class="line"> regist_date     DATE         ,</span><br><span class="line"> PRIMARY KEY (product_id));</span><br></pre></td></tr></table></figure><h4 id="向-Product-表中新增测试列"><a href="#向-Product-表中新增测试列" class="headerlink" title="向 Product 表中新增测试列"></a>向 <code>Product</code> 表中新增测试列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Product ADD COLUMN insert_column_test VARCHAR(100) NOT NULL DEFAULT &apos;test&apos;;</span><br></pre></td></tr></table></figure><p>新增列名为 <code>insert_column_test</code></p><p>约束为 <code>NOT NULL</code></p><p>默认值为 <code>test</code></p><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E6%9B%B4%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%88%E6%96%B0%E5%A2%9E%E5%88%97%EF%BC%89.png" alt></p><h4 id="删除新增的测试列"><a href="#删除新增的测试列" class="headerlink" title="删除新增的测试列"></a>删除新增的测试列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Product DROP COLUMN insert_column_test;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E6%9B%B4%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%88%E5%88%A0%E9%99%A4%E5%88%97%EF%BC%89.png" alt></p><h4 id="变更表名为-Product1"><a href="#变更表名为-Product1" class="headerlink" title="变更表名为 Product1"></a>变更表名为 <code>Product1</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Product RENAME TO Product1;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E6%9B%B4%E6%96%B0%E8%A1%A8%E5%90%8D.png" alt></p><h4 id="删除新建的数据库"><a href="#删除新建的数据库" class="headerlink" title="删除新建的数据库"></a>删除新建的数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE shop;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt></p><hr><h3 id="练习题2"><a href="#练习题2" class="headerlink" title="练习题2"></a>练习题2</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>编写一条 <code>CREATE TABLE</code> 语句，用来创建一个包含表 1-A 中所列各项的表 <code>Addressbook</code>（地址簿），并为 <code>regist_no</code>（注册编号）列设置主键约束。</p><table><thead><tr><th>列的含义</th><th>列的名称</th><th>数据类型</th><th>约束</th></tr></thead><tbody><tr><td>注册编号</td><td><code>regist_no</code></td><td>整数型</td><td>不能为 <code>NULL</code>、主键</td></tr><tr><td>姓名</td><td><code>name</code></td><td>可变长字符串型（长度为 128 类）</td><td>不能为 <code>NULL</code></td></tr><tr><td>住址</td><td><code>address</code></td><td>可变长字符串类型（长度为 256）</td><td>不能为 <code>NULL</code></td></tr><tr><td>电话号码</td><td><code>tel_no</code></td><td>定长字符串类型（长度为 10）</td><td></td></tr><tr><td>邮箱地址</td><td><code>mail_address</code></td><td>定长字符串类型（长度为 20）</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE address_book (regist_no INTEGER NOT NULL PRIMARY KEY,name VARCHAR(128) NOT NULL COMMENT &apos;姓名&apos;,address VARCHAR(256) NOT NULL COMMENT &apos;住址&apos;,tel_no CHAR(10) COMMENT &apos;电话号码&apos;,mail_address CHAR(20) COMMENT &apos;邮箱地址&apos;);</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%88address_book%EF%BC%89.png" alt></p><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><p>假设在创建练习中的 <code>Addressbook</code> 表时忘记添加如下一列 <code>postal_code</code>（邮政编码）了，请把此列添加到　<code>Addressbook</code> 表中。</p><p>列名　　：<code>postal_code</code></p><p>数据类型：定长字符串类型（长度为 8）</p><p>约束　　：不能为 <code>NULL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE address_book ADD COLUMN postal_code CHAR(8) NOT NULL COMMENT &apos;邮政编码&apos;;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E6%B7%BB%E5%8A%A0%E5%88%97%EF%BC%88address_book%EF%BC%89.png" alt></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>编写 SQL 语句来删除 <code>Addressbook</code> 表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE address_book;</span><br></pre></td></tr></table></figure><p><img src="http://image.geekerit.com/image/blog/database/sql/ddl/%E5%88%A0%E9%99%A4%E8%A1%A8%EF%BC%88address_book%EF%BC%89.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL基本书写规则&quot;&gt;&lt;a href=&quot;#SQL基本书写规则&quot; class=&quot;headerlink&quot; title=&quot;SQL基本书写规则&quot;&gt;&lt;/a&gt;&lt;code&gt;SQL&lt;/code&gt;基本书写规则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQL&lt;/code&gt; 语句要以分号（;）结尾.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SQL&lt;/code&gt; 不区分关键字的大小写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串和日期常数需要使用单引号（’）括起来，数字常数无需加注单引号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL 语句的单词之间需使用&lt;strong&gt;半角&lt;/strong&gt;空格或换行符来进行分隔。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Java常用集合之Map</title>
    <link href="http://yoursite.com/2019/03/11/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/collection/%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E4%B9%8BMap/"/>
    <id>http://yoursite.com/2019/03/11/Java/基础知识/collection/常用集合之Map/</id>
    <published>2019-03-11T06:40:14.000Z</published>
    <updated>2019-10-27T13:57:52.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a><code>Map</code>接口</h2><p>存储双列数据，保存<code>key-value</code>关联数据</p><p><code>key</code> 无序的不可重复的使用<code>Set</code>存储所有的<code>key</code></p><p><code>value</code>无序的可重复的使用<code>collection</code>存储所有的<code>value</code></p><p>一个键值对构成一个<code>Entry</code>对象</p><p><code>Map</code>中的<code>entry</code> 无序的不可重复的，使用<code>Set</code>存储所有的<code>entry</code></p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>名称</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td><code>containsKey(Object key)</code></td><td>如果此映射包含指定键的映射，则返回true。</td><td><code>boolean</code></td></tr><tr><td><code>containsValue(Object value)</code></td><td>如果此映射将一个或多个键映射到指定值，则返回true。</td><td><code>boolean</code></td></tr><tr><td><code>entrySet()</code></td><td>返回此映射中包含的映射的集合视图。</td><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code></td></tr><tr><td><code>get(Object key)</code></td><td>返回指定键映射到的值，如果该映射不包含键的映射，则返回null。</td><td><code>V</code></td></tr><tr><td><code>put(K key, V value)</code></td><td>将指定值与此映射中的指定键关联</td><td><code>V</code></td></tr><tr><td><code>remove(Object key)</code></td><td>如果键存在，则从该映射中删除键的映射</td><td><code>V</code></td></tr><tr><td><code>replace(K key, V value)</code></td><td>仅当指定键的项当前映射到某个值时，才替换该项。</td><td><code>V</code></td></tr><tr><td><code>size()</code></td><td>返回此映射中键值映射的数目。</td><td><code>int</code></td></tr><tr><td><code>values()</code></td><td>返回此映射中包含的值的集合视图。</td><td><code>Collection&lt;V&gt;</code></td></tr><tr><td><code>keySet()</code></td><td>返回此映射中包含的键的集合视图。</td><td><code>Set&lt;K&gt;</code></td></tr></tbody></table><a id="more"></a><h3 id="常用子类"><a href="#常用子类" class="headerlink" title="常用子类"></a>常用子类</h3><p><code>HashMap</code>，<code>TreeMap</code>,<code>LinkedHashMap</code>，<code>HashTable</code>等</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><code>HashMap</code></h2><p><code>HashMap</code>的键如果使用自定义的类，那么自定义的类要求必须重写<code>equals()</code>与<code>hashCode()</code>方法</p><h3 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h3><h4 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h4><p>在实例化之后底层创建了一个长度为16的一维数组entry[] table;</p><p>首先调用键所在类的<code>hashCode()</code>计算键的哈希值，此哈希值经过某种算法后，得到<code>entry</code>在数组中的存放位置。</p><p>如果该位置上数据为空，那么<code>entry</code>添加成功</p><p>如果该位置的数据不为空，则去比较该entry的键与已存在键的哈希值</p><p>​    如果键的哈希值与已存在的键的哈希值不同，那么<code>entry</code>添加成功</p><p>​    如果键的哈希值与某一个数据的哈希值相同时，继续调用键所在类的<code>equals()</code>方法</p><p>​        当<code>equals()</code>方法返回<code>false</code>时则<code>entry</code>添加成功</p><p>​        当<code>equals()</code>方法返回<code>true</code>时使用新添加<code>entry</code>的值替换原有的值，此时的<code>put</code>操作类似于修改原有键值对。</p><p>在添加数据的过程中会涉及到扩容问题，当超出临界值（数组容量*负载因子）并且需要存放元素的位置非空时发生扩容。默认扩容方式为扩容为原来的2倍，并将原有数据重新计算位置后存放。</p><h4 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h4><p>在创建实例时没有创建数组，而是在首次put操作时底层才会进行数组的创建</p><p>jdk7的底层结构是数组+链表</p><p>jdk8的底层结构是数组+链表+红黑树</p><p>当数组的某一个索引位置上的元素以链表形式存在的数据个数大于8并且当前数组的长度大于16时，此时该索引位置上的所有数据改为使用红黑树进行存储。</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p><img src="C:\Users\15927\AppData\Roaming\Typora\typora-user-images\1559018910972.png" alt="1559018910972"></p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定hashMap的初始化容量以及负载因子的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定hashMap的初始化容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 负载因子赋值0.75f</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定初始化容量以及负载因子构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断初始化容量参数合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">    <span class="comment">// 初始化容量超出最大值时设置为最大值</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">// 负载因子合法性检测</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求出2的n次方 &gt;= initialCapacity</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数为Map的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 传入集合的大小</span></span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断table数组是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            <span class="comment">// 扩容</span></span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取key的hash值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// 对象的hashCode值 ^ 对象的hashCode值的高位（前16位）</span></span><br><span class="line">    <span class="comment">// 目的 提高hash的随机性</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据传入的key计算hashCode值</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断table数组是否为空或者长度为0</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 初始化table</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// i 就是元素在table数组中存储的位置</span></span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 本质就是取余运算，目的在于优化计算速度</span></span><br><span class="line">    <span class="comment">// 该操作是判断需要存放的数组该位置是否为空</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 创建节点，直接存放到计算出来的tab[i]位置</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// tab[i]有元素的情况</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// hash值相同的情况</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 判断是否是树结构，JDK1.8 红黑树优化方案</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 基于红黑树的插入逻辑</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 链表插入元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 判断p的下一个元素是否为空</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 判断当前链表的数量是否大于树结构的阈值</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">// 转换结构，链表-&gt;红黑树（优化查询性能）</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果当前链表包含要插入的值，结束遍历</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断插入的值是否存在于hashMap中</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改次数+1</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 判断当前数组大小是否大于阈值</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        <span class="comment">// 扩容</span></span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 数组初始值</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 扩容前的变量初始化</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">// 扩容后的变量初始化</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 老容量达到最大容量时不再进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 老容量*2=新容量</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;   </span><br><span class="line">        <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        <span class="comment">// 负载因子*初始容量=阈值</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 准备重新对元素进行定位</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 获取第j个位置的元素</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 清空原数组</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 判断原有j的位置上是否有元素</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 重新计算位置进行元素保存</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 红黑树拆分</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 遍历链表，将链表节点按照顺序进行分组</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 计算原有元素在扩容后还在原位置</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// old链表添加到一组</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 计算原有元素在扩容后不在原位置</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// new链表添加到一组</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 原位置j+原容量 = 新位置</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        <span class="comment">// 元素要存储的位置p</span></span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">        <span class="comment">// hash没有冲突的情况</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 定位要删除的节点node</span></span><br><span class="line">            node = p;</span><br><span class="line">        <span class="comment">// 有冲突，在同一个位置上不只是一个元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 红黑树定位删除元素</span></span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 链表定位删除元素</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node要删除的元素</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 红黑树删除节点</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                <span class="comment">// 链表删除节点</span></span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 数组中p位置的对象的下一个元素 = 要删除的元素的下一个元素</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><code>LinkedHashMap</code></h2><p>保证在遍历元素时可以按照添加的顺序实现遍历，原因在于在原有的<code>HashMap</code>底层结构基础上添加了一对指针，指向前一个与后一个元素，对于频繁的遍历操作效率高于<code>HashMap</code>。</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><code>TreeMap</code></h2><p>保证按照添加的<code>key-value</code>对进行排序，实现排序遍历。考虑<code>key</code>的自然排序或者定制排序。</p><p>添加的键必须是同一类创建的对象，因为要按照键进行排序</p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a><code>HashTable</code></h2><p><code>properties</code>常用来处理配置文件，<code>key</code>与<code>value</code>都是<code>String</code>类型</p><h2 id="HashMap-与-HashTable的区别"><a href="#HashMap-与-HashTable的区别" class="headerlink" title="HashMap 与 HashTable的区别"></a><code>HashMap</code> 与 <code>HashTable</code>的区别</h2><p><code>HashTable</code>的推出时间早于 <code>HashMap</code>，采用同步处理数据的方式，属于线程安全的操作，效率低，并且不允许设置映射的键值为<code>null</code>；而<code>HashMap</code>异步处理数据，属于线程非安全的操作，效率高，允许将键值设置为<code>null</code>。</p><h2 id="Iterator输出的问题"><a href="#Iterator输出的问题" class="headerlink" title="Iterator输出的问题"></a><code>Iterator</code>输出的问题</h2><p>Map集合利用<code>Iterator</code>输出的步骤</p><ul><li>利用<code>Map</code>接口的<code>entrySet()</code>方法将<code>Map</code>集合转换为<code>Set</code>集合，泛型是<code>Map.Entry&lt;K,V&gt;</code></li><li>利用<code>Set</code>集合的<code>Iterator()</code>方法将集合进行输出</li><li>每次<code>Iterator</code>循环取出的都是Map.Entry接口对象，利用此对象能够进行<code>key</code>与<code>value</code>的取出</li></ul><p>简单示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; stringMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        stringMap.put(<span class="string">"1"</span>,<span class="number">1</span>);</span><br><span class="line">        stringMap.put(<span class="string">"2"</span>,<span class="number">2</span>);</span><br><span class="line">        stringMap.put(<span class="string">"3"</span>,<span class="number">3</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = stringMap.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; next = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">"键："</span> + next.getKey() + <span class="string">"值："</span> + next.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Map接口&quot;&gt;&lt;a href=&quot;#Map接口&quot; class=&quot;headerlink&quot; title=&quot;Map接口&quot;&gt;&lt;/a&gt;&lt;code&gt;Map&lt;/code&gt;接口&lt;/h2&gt;&lt;p&gt;存储双列数据，保存&lt;code&gt;key-value&lt;/code&gt;关联数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key&lt;/code&gt; 无序的不可重复的使用&lt;code&gt;Set&lt;/code&gt;存储所有的&lt;code&gt;key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;value&lt;/code&gt;无序的可重复的使用&lt;code&gt;collection&lt;/code&gt;存储所有的&lt;code&gt;value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一个键值对构成一个&lt;code&gt;Entry&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;中的&lt;code&gt;entry&lt;/code&gt; 无序的不可重复的，使用&lt;code&gt;Set&lt;/code&gt;存储所有的&lt;code&gt;entry&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;containsKey(Object key)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果此映射包含指定键的映射，则返回true。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;containsValue(Object value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果此映射将一个或多个键映射到指定值，则返回true。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;entrySet()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回此映射中包含的映射的集合视图。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get(Object key)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回指定键映射到的值，如果该映射不包含键的映射，则返回null。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;put(K key, V value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将指定值与此映射中的指定键关联&lt;/td&gt;
&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remove(Object key)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果键存在，则从该映射中删除键的映射&lt;/td&gt;
&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;replace(K key, V value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅当指定键的项当前映射到某个值时，才替换该项。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回此映射中键值映射的数目。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回此映射中包含的值的集合视图。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Collection&amp;lt;V&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;keySet()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回此映射中包含的键的集合视图。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Set&amp;lt;K&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Map - HashMap" scheme="http://yoursite.com/tags/Map-HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Thread API详细介绍</title>
    <link href="http://yoursite.com/2019/03/11/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/thread/Thread%20API%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/03/11/Java/基础知识/thread/Thread API详细介绍/</id>
    <published>2019-03-11T06:40:14.000Z</published>
    <updated>2019-10-27T13:57:52.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><h2 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h2><p>通过Thread的无参构造创建线程对象Thread，默认有一个线程名，以Thread-开头，从0开始计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h2><p>通过Thread的构造方法为线程指定名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, <span class="keyword">null</span>, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>通过Thread的构造方法给Thread设置逻辑执行单元</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Runnable与线程名称"><a href="#Runnable与线程名称" class="headerlink" title="Runnable与线程名称"></a>Runnable与线程名称</h2><p>通过Thread的构造方法同时给Thread设置逻辑单元以及线程的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target, String name)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, target, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程组与Runnable"><a href="#线程组与Runnable" class="headerlink" title="线程组与Runnable"></a>线程组与Runnable</h2><p>通过Thread的构造方法同时给Thread设置线程组以及逻辑单元</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, Runnable target)</span> </span>&#123;</span><br><span class="line">    init(group, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程组与线程名称"><a href="#线程组与线程名称" class="headerlink" title="线程组与线程名称"></a>线程组与线程名称</h2><p>通过Thread的构造方法同时给Thread设置线程组以及线程名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, String name)</span> </span>&#123;</span><br><span class="line">    init(group, <span class="keyword">null</span>, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程组，Runnable与线程名称"><a href="#线程组，Runnable与线程名称" class="headerlink" title="线程组，Runnable与线程名称"></a>线程组，Runnable与线程名称</h2><p>通过Thread的构造方法同时给Thread设置线程组、逻辑单元以及线程名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name)</span> </span>&#123;</span><br><span class="line">    init(group, target, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程组，Runnable与线程名称以及线程栈大小"><a href="#线程组，Runnable与线程名称以及线程栈大小" class="headerlink" title="线程组，Runnable与线程名称以及线程栈大小"></a>线程组，Runnable与线程名称以及线程栈大小</h2><p>通过Thread的构造方法设置线程的<code>stacksize</code>，代表着该线程占用的stack的大小。</p><p>如果没有指定<code>stacksize</code>的大小，默认是0，0表示会忽略该参数。</p><p>该参数会被JNI函数调用，需要注意的是该参数在一些平台有效，在一些平台则无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name, <span class="keyword">long</span> stackSize)</span> </span>&#123;</span><br><span class="line">    init(group, target, name, stackSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>JVM栈的大小是固定的，如果调大了某个线程的栈的大小，那么对于JVM来说，可分配给其他线程的栈内存就会减少，那么创建的线程数自然也会减少</p><p>如果在构造Thread的时候没有传递Runnable并且也没有复写Thread类中的run()方法，该调用线程的start()方法时不会执行任何操作；如果传递了Runnable接口的实例，或者重写了Thread类中的run()方法，那么调用start()方法就会执行该方法的逻辑单元。</p><p>如果构造线程对象时未传入<code>ThreadGroup</code>，<code>Thread</code>会默认获取父线程的<code>ThreadGroup</code>作为该线程的<code>ThreadGroup</code>，此时子线程与父线程位于同一个<code>ThreadGroup</code>中。</p><hr><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><h2 id="设置线程为守护线程。"><a href="#设置线程为守护线程。" class="headerlink" title="设置线程为守护线程。"></a>设置线程为守护线程。</h2><p>当<code>JVM</code>中运行的唯一线程都是守护线程时，<code>Java</code>虚拟机将退出。</p><p><strong>注意</strong>当线程启动之后就不能再去设置线程为守护线程否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDaemon</span><span class="params">(<span class="keyword">boolean</span> on)</span> </span>&#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="comment">// 检查线程的当前状态</span></span><br><span class="line">    <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    daemon = on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断当前线程是否为守护线程"><a href="#判断当前线程是否为守护线程" class="headerlink" title="判断当前线程是否为守护线程"></a>判断当前线程是否为守护线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isDaemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> daemon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当进行长连接的时候需要不断的通过发送心跳包来保证连接的可用性，此时去检查连接可用性的线程可以设置为守护线程，这样做的原因是如果连接线程已经结束了，我们需要去通知检查线程或者手动停止线程，但是线程的stop方法已经被标记为了Deprecated，调用stop方法是不合适的，而把检查状态的线程设置为守护线程好处是在连接线程挂掉的情况下不会造成JVM由于连接  线程不断报错而无法停止，浪费系统资源。</p><hr><h1 id="线程基本信息"><a href="#线程基本信息" class="headerlink" title="线程基本信息"></a>线程基本信息</h1><h2 id="线程名称-1"><a href="#线程名称-1" class="headerlink" title="线程名称"></a>线程名称</h2><h3 id="设置线程名称"><a href="#设置线程名称" class="headerlink" title="设置线程名称"></a>设置线程名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        setNativeName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取线程名称"><a href="#获取线程名称" class="headerlink" title="获取线程名称"></a>获取线程名称</h3><p>没有显示指定线程名称的情况下是从Thread-0开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程名称案例"><a href="#线程名称案例" class="headerlink" title="线程名称案例"></a>线程名称案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/16 18:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread();</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 执行结果</span></span><br><span class="line"><span class="comment">         *  Thread-0</span></span><br><span class="line"><span class="comment">         *  Thread-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(t1.getName());</span><br><span class="line">        System.out.println(t2.getName());</span><br><span class="line"></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="string">"T-name"</span>);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"do something."</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  执行结果</span></span><br><span class="line"><span class="comment">         *      T-name</span></span><br><span class="line"><span class="comment">         *      Thread-2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(t3.getName());</span><br><span class="line">        System.out.println(t4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程ID"><a href="#线程ID" class="headerlink" title="线程ID"></a>线程ID</h2><h3 id="获取线程的ID"><a href="#获取线程的ID" class="headerlink" title="获取线程的ID"></a>获取线程的ID</h3><p>是在<code>JVM</code>启动后线程数开始进行自增操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取当前线程"><a href="#获取当前线程" class="headerlink" title="获取当前线程"></a>获取当前线程</h2><p>返回对当前正在执行的线程对象的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> Thread <span class="title">currentThread</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取线程所属线程组"><a href="#获取线程所属线程组" class="headerlink" title="获取线程所属线程组"></a>获取线程所属线程组</h2><p>注意如果当前线程已经处于“死亡”状态，该方法将返回null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ThreadGroup <span class="title">getThreadGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><h3 id="获取线程的优先级"><a href="#获取线程的优先级" class="headerlink" title="获取线程的优先级"></a>获取线程的优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置线程的优先级"><a href="#设置线程的优先级" class="headerlink" title="设置线程的优先级"></a>设置线程的优先级</h3><p>注意设置优先级只是代表该线程获得CPU调度的几率会比较高，并不保证一定能够优先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span> </span>&#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="comment">// 检查参数的合法性，最大优先级为10，最小优先级为1</span></span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果线程组不为空的情况下，优先级会被设置为线程组的优先级</span></span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">            newPriority = g.getMaxPriority();</span><br><span class="line">        &#125;</span><br><span class="line">        setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆栈跟踪"><a href="#堆栈跟踪" class="headerlink" title="堆栈跟踪"></a>堆栈跟踪</h2><p>将当前线程的堆栈跟踪打印到标准错误流。此方法仅用于调试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dumpStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Exception(<span class="string">"Stack trace"</span>).printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkAccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        security.checkAccess(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="获取线程的类加载器"><a href="#获取线程的类加载器" class="headerlink" title="获取线程的类加载器"></a>获取线程的类加载器</h3><p>返回此Thread的上下文<code>ClassLoader</code>。</p><p>上下文ClassLoader由线程的创建者提供，供加载类和资源时在此线程中运行的代码使用。如果未设置，则默认为父线程的ClassLoader上下文。</p><p>原始线程的上下文ClassLoader通常设置为用于加载应用程序的类加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getContextClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (contextClassLoader == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ClassLoader.checkClassLoaderPermission(contextClassLoader,</span><br><span class="line">                                               Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> contextClassLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置线程的类加载器"><a href="#设置线程的类加载器" class="headerlink" title="设置线程的类加载器"></a>设置线程的类加载器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContextClassLoader</span><span class="params">(ClassLoader cl)</span> </span>&#123;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sm.checkPermission(<span class="keyword">new</span> RuntimePermission(<span class="string">"setContextClassLoader"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    contextClassLoader = cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断言线程是否拥有某对象监视锁"><a href="#断言线程是否拥有某对象监视锁" class="headerlink" title="断言线程是否拥有某对象监视锁"></a>断言线程是否拥有某对象监视锁</h3><p>当且仅当当前线程在指定对象上保存监视器锁时返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">holdsLock</span><span class="params">(Object obj)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取堆栈信息"><a href="#获取堆栈信息" class="headerlink" title="获取堆栈信息"></a>获取堆栈信息</h2><h4 id="返回表示此线程的堆栈转储的堆栈跟踪元素数组"><a href="#返回表示此线程的堆栈转储的堆栈跟踪元素数组" class="headerlink" title="返回表示此线程的堆栈转储的堆栈跟踪元素数组"></a>返回表示此线程的堆栈转储的堆栈跟踪元素数组</h4><p>如果此线程尚未启动，已启动但尚未安排由系统运行或已终止，则此方法将返回零长度数组。 </p><p>如果返回的数组长度非零，那么数组的第一个元素表示堆栈的顶部，这是序列中最近的方法调用。数组的最后一个元素表示堆栈的底部，这是序列中最远的方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StackTraceElement[] getStackTrace() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread()) &#123;</span><br><span class="line">        <span class="comment">// check for getStackTrace permission</span></span><br><span class="line">        SecurityManager security = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            security.checkPermission(</span><br><span class="line">                SecurityConstants.GET_STACK_TRACE_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// optimization so we do not call into the vm for threads that</span></span><br><span class="line">        <span class="comment">// have not yet started or have terminated</span></span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_STACK_TRACE;</span><br><span class="line">        &#125;</span><br><span class="line">        StackTraceElement[][] stackTraceArray = dumpThreads(<span class="keyword">new</span> Thread[] &#123;<span class="keyword">this</span>&#125;);</span><br><span class="line">        StackTraceElement[] stackTrace = stackTraceArray[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// a thread that was alive during the previous isAlive call may have</span></span><br><span class="line">        <span class="comment">// since terminated, therefore not having a stacktrace.</span></span><br><span class="line">        <span class="keyword">if</span> (stackTrace == <span class="keyword">null</span>) &#123;</span><br><span class="line">            stackTrace = EMPTY_STACK_TRACE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stackTrace;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Don't need JVM help for current thread</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Exception()).getStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回所有活动线程的堆栈跟踪映射。"><a href="#返回所有活动线程的堆栈跟踪映射。" class="headerlink" title="返回所有活动线程的堆栈跟踪映射。"></a>返回所有活动线程的堆栈跟踪映射。</h2><p>映射键是线程，每个映射值都是StackTraceElement数组，表示相应Thread的堆栈转储。返回的堆栈跟踪采用为getStackTrace方法指定的格式。调用此方法时，线程可能正在执行。每个线程的堆栈跟踪仅表示快照，并且可以在不同时间获得每个堆栈跟踪。如果虚拟机没有关于线程的堆栈跟踪信息，则将在映射值中返回零长度数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Thread, StackTraceElement[]&gt; getAllStackTraces() &#123;</span><br><span class="line">    <span class="comment">// check for getStackTrace permission</span></span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        security.checkPermission(</span><br><span class="line">            SecurityConstants.GET_STACK_TRACE_PERMISSION);</span><br><span class="line">        security.checkPermission(</span><br><span class="line">            SecurityConstants.MODIFY_THREADGROUP_PERMISSION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get a snapshot of the list of all threads</span></span><br><span class="line">    Thread[] threads = getThreads();</span><br><span class="line">    StackTraceElement[][] traces = dumpThreads(threads);</span><br><span class="line">    Map&lt;Thread, StackTraceElement[]&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;(threads.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">        StackTraceElement[] stackTrace = traces[i];</span><br><span class="line">        <span class="keyword">if</span> (stackTrace != <span class="keyword">null</span>) &#123;</span><br><span class="line">            m.put(threads[i], stackTrace);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else terminated so we don't put it in the map</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取线程状态"><a href="#获取线程状态" class="headerlink" title="获取线程状态"></a>获取线程状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// get current thread state</span></span><br><span class="line">    <span class="keyword">return</span> sun.misc.VM.toThreadState(threadStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="join"><a href="#join" class="headerlink" title="join()"></a><code>join()</code></h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a><code>API</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 线程join的三种方式 */</span></span><br><span class="line"><span class="comment">// 等待线程死亡,类似于调用第二个方法指定等待时间为0毫秒</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="comment">// 等待线程死亡（等待时间为指定毫秒数）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="comment">// 等待线程死亡（等待时间为指定毫秒数+纳秒数）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis,<span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/17 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            IntStream.range(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">                .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + i));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            IntStream.range(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">                .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + i));</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        <span class="comment">// 程序会等到t1,t2线程全部执行完成才会继续执行主线程中的方法，并且t1,t2线程会交替执行</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">            .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果在调用Object类的<code>wait（），wait（long）</code>或<code>wait（long，int）</code>方法，或者<code>join（），join（long），join（long，int），sleep（long）</code>或<code>sleep（long，int）</code>方法，然后它的中断状态将被清除，它将收到<code>InterruptedException</code>。</p><h2 id="测试当前线程是否已被中断。"><a href="#测试当前线程是否已被中断。" class="headerlink" title="测试当前线程是否已被中断。"></a>测试当前线程是否已被中断。</h2><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>此方法清除线程的中断状态。换句话说，如果要连续两次调用此方法，则第二次调用将返回false（除非当前线程在第一次调用已清除其中断状态之后且在第二次调用之前检查它时再次中断）。线程中断被忽略，因为在中断时线程不活动将被此方法反映返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>不重置线程中断状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打断线程"><a href="#打断线程" class="headerlink" title="打断线程"></a>打断线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打断当前线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread())</span><br><span class="line">        checkAccess();</span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        Interruptible b = blocker;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">            interrupt0();           <span class="comment">// Just to set the interrupt flag</span></span><br><span class="line">            b.interrupt(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用本地方法打断线程</span></span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对interrupted-方法要设计成类方法与实例方法的理解"><a href="#对interrupted-方法要设计成类方法与实例方法的理解" class="headerlink" title="对interrupted()方法要设计成类方法与实例方法的理解"></a>对interrupted()方法要设计成类方法与实例方法的理解</h2><p>当我们直接在创建线程时覆写run方法，相当于使用继承<code>Thread</code>类的方式创建线程，该线程属于<code>Thread</code>类的实例，可以直接调用<code>interrupted()</code>实例方法；但是如果在创建线程时将<code>Runnable</code>接口的实现作为参数传递时，<code>Runnable</code>的实现属于<code>Thread</code>中的匿名内部类，是不可以直接调用实例方法的，所以只能通过<code>Thread</code>的静态方法<code>interrupted()</code>来获取当前线程的中断状态。</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/17 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadInterrupt2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 可以直接使用Thread类的实例方法查看当前线程的中断状态</span></span><br><span class="line">                System.out.println(<span class="string">"t1 interrupt state is "</span> + isInterrupted());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 需要调用Thread类中的静态方法查看当前线程的中断状态</span></span><br><span class="line">            System.out.println(<span class="string">"t2 interrupt state is "</span> + Thread.interrupted());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        t2.interrupt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打断当前线程</span></span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">        <span class="comment">// 调用Thread的静态方法interrupted后会清除线程的中断状态，</span></span><br><span class="line">        <span class="comment">// 所以第二次打印Thread的中断状态为false</span></span><br><span class="line">        System.out.println(Thread.interrupted());</span><br><span class="line">        System.out.println(Thread.interrupted());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="线程yield"><a href="#线程yield" class="headerlink" title="线程yield()"></a>线程<code>yield()</code></h1><p>向调度程序提示当前线程是否愿意产生其当前使用的处理器。调度程序可以忽略此提示。 </p><p>Yield是一种启发式尝试，用于改善线程之间的相对进展，否则会过度利用CPU。</p><p>它的使用应与详细的分析和基准测试相结合，以确保它实际上具有所需的效果。</p><p>使用这种方法很少是合适的。它可能对调试或测试目的很有用，它可能有助于重现因竞争条件而产生的错误。</p><p>在设计并发控制结构（例如java.util.concurrent.locks包中的结构）时，它也可能很有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><hr><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>导致当前正在执行的线程休眠（暂时停止执行）指定的毫秒数，具体取决于系统计时器和调度程序的精度和准确性。该线程不会失去任何监视器的所有权。</p><h2 id="休眠指定的毫秒数"><a href="#休眠指定的毫秒数" class="headerlink" title="休眠指定的毫秒数"></a>休眠指定的毫秒数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><h2 id="休眠指定的毫秒数-纳秒数"><a href="#休眠指定的毫秒数-纳秒数" class="headerlink" title="休眠指定的毫秒数+纳秒数"></a>休眠指定的毫秒数+纳秒数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis, <span class="keyword">int</span> nanos)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">            <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; millis == <span class="number">0</span>)) &#123;</span><br><span class="line">        millis++;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(millis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="活跃线程"><a href="#活跃线程" class="headerlink" title="活跃线程"></a>活跃线程</h1><h2 id="判断线程活跃状态"><a href="#判断线程活跃状态" class="headerlink" title="判断线程活跃状态"></a>判断线程活跃状态</h2><p>线程启动后并且还没有死亡就属于活跃状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取活跃线程数"><a href="#获取活跃线程数" class="headerlink" title="获取活跃线程数"></a>获取活跃线程数</h2><p>返回当前线程的线程组及其子组中活动线程数的估计值。递归迭代当前线程的线程组中的所有子组。</p><p>返回的值只是一个估计值，因为当此方法遍历内部数据结构时，线程数可能会动态更改，并且可能会受到某些系统线程的影响。此方法主要用于调试和监视目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">activeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().getThreadGroup().activeCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回此线程所属的线程组。如果此线程已死（已停止），则此方法返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ThreadGroup <span class="title">getThreadGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取活跃线程"><a href="#获取活跃线程" class="headerlink" title="获取活跃线程"></a>获取活跃线程</h2><p> 将当前线程的线程组及其子组中的每个活动线程复制到指定的数组中。</p><p>此方法只调用当前线程的线程组的<code>ThreadGroup.enumerate（Thread []）</code>方法。应用程序可能使用<code>activeCount</code>方法来估计数组应该有多大，但是如果数组太短而无法容纳所有线程，则会以静默方式忽略额外的线程。</p><p>如果获取当前线程的线程组及其子组中的每个活动线程至关重要，则调用者应验证返回的int值是否严格小于<code>tarray</code>的长度。</p><p>由于此方法存在固有的竞争条件，因此建议该方法仅用于调试和监视目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">enumerate</span><span class="params">(Thread tarray[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().getThreadGroup().enumerate(tarray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/16 19:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// t1线程的逻辑执行时间</span></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"t1线程的名称为:"</span> + t1.getName());</span><br><span class="line">        <span class="comment">// t1线程的执行时间必须多于主线程的sleep时间，t1的线程组才为main</span></span><br><span class="line">        <span class="comment">// 因为获取线程组信息时线程的状态必须是活跃的，否则会返回null</span></span><br><span class="line">        System.out.println(<span class="string">"t1线程的线程组信息为:"</span> + t1.getThreadGroup());</span><br><span class="line"></span><br><span class="line">        ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[threadGroup.activeCount()];</span><br><span class="line">        <span class="comment">// 该方法只会将活动线程复制到指定的线程数组中，所以如果在调用该方法时</span></span><br><span class="line">        <span class="comment">// t1线程已经处于“死亡”状态，那么在输出的线程数组中将看不到t1线程</span></span><br><span class="line">        threadGroup.enumerate(threads);</span><br><span class="line"></span><br><span class="line">        Arrays.stream(threads).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="执行逻辑单元"><a href="#执行逻辑单元" class="headerlink" title="执行逻辑单元"></a>执行逻辑单元</h1><h2 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使该线程开始执行; Java虚拟机调用此线程的run 方法。 结果是两个线程同时运行：当前线程从调用返回到start 方法和另一个线程执行运行逻辑。</p><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><p>多次启动线程或者结束后再次启动线程都会抛出异常<code>IllegalThreadStateException</code>。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0标识线程的NEW状态</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">    <span class="comment">// 通知线程组该线程即将启动，以便可以将其添加到组的线程列表中，并且可以递减组的未启动计数</span></span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用本地方法</span></span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">              group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">           <span class="comment">// 本地方法抛出异常时直接调用堆栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h2><p>当构造线程时传入了Runnable接口的实现，就会执行该实现中的run()方法，否则不会产生任何操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用run-方法与start-方法区别"><a href="#调用run-方法与start-方法区别" class="headerlink" title="调用run()方法与start()方法区别"></a>调用run()方法与start()方法区别</h2><p>直接调用线程的run方法一样可以执行指定的逻辑单元，但是这样做是没有意义的，因为我们创建线程的目的是为了能够实现并发操作，而直接调用run方法是主线程去工作，其实程序还是在串行化操作。</p><p>另外一点就是调用start()方法执行逻辑单元只能被调用一次，当线程执行结束后如果再次尝试启动线程会抛出异常；而run方法没有调用限制。</p><p>个人理解就是业务执行逻辑是不确定的，所以应该通过继承Thread类或者实现Runnable接口来将业务逻辑放在run()方法中；而start()方法中会包含固定的线程管理相关的逻辑，比如权限校验，线程状态校验，线程组等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaryn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15 23:22</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 模拟简单的模板方法体验Thread类start()方法与run()方法的巧妙</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        wrapPrint(message);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">wrapPrint</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Template t1 = <span class="keyword">new</span> Template() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">wrapPrint</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"##"</span> + message + <span class="string">"##"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.print(<span class="string">"hello template"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构造方法&quot;&gt;&lt;a href=&quot;#构造方法&quot; class=&quot;headerlink&quot; title=&quot;构造方法&quot;&gt;&lt;/a&gt;构造方法&lt;/h1&gt;&lt;h2 id=&quot;无参构造&quot;&gt;&lt;a href=&quot;#无参构造&quot; class=&quot;headerlink&quot; title=&quot;无参构造&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JDK源码解读" scheme="http://yoursite.com/tags/JDK%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="线程基础" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM之类的加载连接初始化以及类的主动使用</title>
    <link href="http://yoursite.com/2019/03/11/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JVM/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A5%E5%8F%8A%E7%B1%BB%E7%9A%84%E4%B8%BB%E5%8A%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/11/Java/基础知识/JVM/深入理解JVM之类的加载连接初始化以及类的主动使用/</id>
    <published>2019-03-10T16:00:00.000Z</published>
    <updated>2019-10-27T13:57:52.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在Java代码中，类型的加载、连接与初始化[过程都是在程序运行期间完成的，提供了更大的灵活性，增加了更多的可能性与灵活性</p><blockquote><p>加载：最常见的形式就是将已经存在的<code>class</code>文件从磁盘上加载到内存中</p><p>连接：将类与类之间的调用关系确定好（比如将类与类之间的符号引用转化为直接引用），并且完成对字节码的验证、校验等（字节码文件可能被人为修改）</p><p>初始化：对静态变量的赋值等工作</p><p>灵活性：类的加载、连接与初始化并不一定严格按照顺序进行，具体根据JVM规范的要求，如果JVM只是做了描述，那么根据厂商的不同可能具体的实现也会各不相同。</p></blockquote><a id="more"></a><h1 id="Java虚拟机与程序的生命周期"><a href="#Java虚拟机与程序的生命周期" class="headerlink" title="Java虚拟机与程序的生命周期"></a>Java虚拟机与程序的生命周期</h1><p>如下几种情况Java虚拟机将结束生命周期</p><ul><li>程序中执行了 <code>System.exit()</code>方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止 </li></ul><blockquote><p>个人理解虚拟机结束生命周期可以分为两种情况：第一种是我们<strong>期望的</strong>程序生命周期结束，比如主动在程序中调用exit()方法或者程序正常结束；第二种就是我们<strong>不可预见的</strong>程序结束生命周期，比如程序抛出无法捕获的异常或者操作系统层面发生错误引起的程序结束。</p></blockquote><h1 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>将类的<code>.class</code>文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个<code>java.lang.Class</code>对象，用于封装类在方法区内的数据结构</p><h2 id="加载-class文件的方式"><a href="#加载-class文件的方式" class="headerlink" title="加载.class文件的方式"></a>加载.class文件的方式</h2><ul><li>从本地系统直接加载</li><li>通过网络下载<code>.class</code>文件</li><li>从<code>zip,jar</code>等归档文件中加载<code>.class</code>文件</li><li>从专有数据库中提取<code>.class</code>文件</li><li>将<code>Java</code>源文件动态编译为<code>.class</code>文件<ul><li>动态代理     </li></ul></li></ul><hr><h1 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>类被Java虚拟机加载后，就进入连接阶段。连接阶段Java虚拟机会将已经读入到<strong>内存</strong>中的类的<strong>二进制数据</strong>合并到虚拟机的<strong>运行时环境</strong>中去。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>确保被加载类的<strong>正确性</strong>（保证字节码文件符合<code>JVM</code>的规范与要求）</p><h3 id="验证内容"><a href="#验证内容" class="headerlink" title="验证内容"></a>验证内容</h3><ul><li>类文件的结构检查</li><li>语义检查</li><li>字节码验证</li><li>二进制兼容性验证</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h3><p>为类的<strong>静态变量</strong>分配内存，并将其设置为<strong>默认值</strong></p><blockquote><p>在准备阶段其实虚拟机中还没有创建类的对象实例，所以涉及不到给对象实例分配内存</p></blockquote><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析过程就是在类型的常量池中寻找类、接口、字段和方法的<strong>符号引用</strong>，把这些符号引用替换成<strong>直接引用</strong>的过程</p><hr><h1 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p> 为类的<strong>静态变量</strong>赋予程序指定的初始值</p><h3 id="静态变量初始化的两种途径"><a href="#静态变量初始化的两种途径" class="headerlink" title="静态变量初始化的两种途径"></a>静态变量初始化的两种途径</h3><ul><li><p>在静态变量的声明处进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure></li><li><p>在静态代码块中进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> String STR2 =  UUID.randomUUID().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="初始化时机"><a href="#初始化时机" class="headerlink" title="初始化时机"></a>初始化时机</h2><p>Java虚拟机初始化一个类时要求它的所有<strong>父类</strong>都已经被初始化，但是这条规则不适用于接口。</p><p>只有当程序访问的静态变量或者静态方法确实在当前类或者当前接口中定义时，才可以认为是对类或者接口的主动使用。</p><h2 id="类的初始化步骤"><a href="#类的初始化步骤" class="headerlink" title="类的初始化步骤"></a>类的初始化步骤</h2><ul><li>假如类还没有被加载和连接，那么先进行加载和连接</li><li>假如类存在直接父类，并且这个父类还没有被初始化，那么就先初始化直接父类</li><li>假如类中存在初始化语句，那就依次执行这些初始化语句（按照声明顺序自上而下初始化）</li></ul><h2 id="接口初始化"><a href="#接口初始化" class="headerlink" title="接口初始化"></a>接口初始化</h2><ul><li>在初始化一个类时，并不会先初始化它所实现的接口</li><li>在初始化一个接口时，并不会先初始化它的父接口</li></ul><p>只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</p><p>对于接口中的变量默认就是被<code>public static final</code>进行修饰的，在方法中调用接口中的常量时，如果该常量是编译期可以确定的值，那么是不会引起对接口的初始化的；如果该常量是运行期才能够确定的值，那么会对该接口进行初始化，但是不会初始化该接口的父接口。</p><h2 id="静态代码块与实例代码块"><a href="#静态代码块与实例代码块" class="headerlink" title="静态代码块与实例代码块"></a>静态代码块与实例代码块</h2><p>静态代码块是在类<strong>初始化</strong>阶段被执行的，代码块中的方法只会被执行一次；而实例代码块是在每次<strong>创建对象</strong>的时候执行的，执行时机是在每次构造方法被调用前先去执行实例代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"c static block."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"invoke c"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="静态变量引用"><a href="#静态变量引用" class="headerlink" title="静态变量引用"></a>静态变量引用</h3><p>对于静态字段来说，只有<strong>直接定义</strong>了该字段的类才会被初始化。</p><p>虽然只有直接定义字段的类才会被初始化，但是并不意味着虚拟机不会执行类的加载与连接工作。</p><p>对于下面的示例代码，虽然使用子类去调用父类中的静态变量，但是表示的是对父类的主动使用，那么就只会导致对父类进行初始化而不会初始化子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String STR = <span class="string">"hello world in MyTest"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyChild.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"this is MyParent static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild</span> <span class="keyword">extends</span>  <span class="title">MyParent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str1 = <span class="string">"myChild hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"this is MyChild static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">[Loaded com.geekerit.jvmlearn.classloader.MyTest from file:/E:/IDEA_FILE/<span class="number">1</span>/JVMInAction/target/classes/]</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 两个类都已经被加载到虚拟机中</span></span><br><span class="line">[Loaded com.geekerit.jvmlearn.classloader.MyParent from file:/E:/IDEA_FILE/<span class="number">1</span>/JVMInAction/target/classes/]</span><br><span class="line">[Loaded com.geekerit.jvmlearn.classloader.MyChild from file:/E:/IDEA_FILE/<span class="number">1</span>/JVMInAction/target/classes/]</span><br><span class="line"><span class="comment">// 从打印结果看出虽然通过MyChild调用父类的静态变量，但是并没有打印MyChild中静态代码块的语句，说明MyChild类并没有进行初始化</span></span><br><span class="line"><span class="keyword">this</span> is MyParent <span class="keyword">static</span> block</span><br><span class="line">hello world</span><br><span class="line">[Loaded java.lang.Shutdown from E:\JAVA\jdk8\jre\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.Shutdown$Lock from E:\JAVA\jdk8\jre\lib\rt.jar]</span><br></pre></td></tr></table></figure><h3 id="当一个类在初始化时，要求其父类已经全部初始化完毕"><a href="#当一个类在初始化时，要求其父类已经全部初始化完毕" class="headerlink" title="当一个类在初始化时，要求其父类已经全部初始化完毕"></a>当一个类在初始化时，要求其父类已经全部初始化完毕</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String STR = <span class="string">"hello world in MyTest"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyChild.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"this is MyParent static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild</span> <span class="keyword">extends</span>  <span class="title">MyParent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"myChild hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"this is MyChild static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从程序的执行结果可以看出来虽然我们只是调用了子类的静态变量，但是还是会先去初始化其父类，然后再对子类进行初始化</span></span><br><span class="line">[Loaded com.geekerit.jvmlearn.classloader.MyTest from file:/E:/IDEA_FILE/jvm_learn/target/classes/]</span><br><span class="line">......</span><br><span class="line">[Loaded com.geekerit.jvmlearn.classloader.MyParent from file:/E:/IDEA_FILE/jvm_learn/target/classes/]</span><br><span class="line">[Loaded com.geekerit.jvmlearn.classloader.MyChild from file:/E:/IDEA_FILE/jvm_learn/target/classes/]</span><br><span class="line"><span class="keyword">this</span> is MyParent <span class="keyword">static</span> block</span><br><span class="line"><span class="keyword">this</span> is MyChild <span class="keyword">static</span> block</span><br><span class="line">myChild hello world</span><br><span class="line">[Loaded java.lang.Shutdown from E:\JAVA\jdk8\jre\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.Shutdown$Lock from E:\JAVA\jdk8\jre\lib\rt.jar]</span><br></pre></td></tr></table></figure><h3 id="调用常量的初始化"><a href="#调用常量的初始化" class="headerlink" title="调用常量的初始化"></a>调用常量的初始化</h3><p>编译期常量</p><p>常量在<strong>编译阶段</strong>如果值是可以确定的，那么该常量会存入到调用这个常量的方法所在的类的常量池中，本质上，调用类并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里由于是main方法调用的MyParent类中的常量，那么程序在编译阶段就会将该常量放入到main方法所在的类也就是MyTest类的常量池中，那么在程序运行时实际上引用的是MyTest类中的常量，与MyPatent类已经没有任何关系，那么MyParent类自然不会被触发初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent.STR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"this is MyParent static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果以及类加载关键信息 */</span></span><br><span class="line"><span class="comment">// 加载main方法所在的启动类</span></span><br><span class="line">[Loaded com.geekerit.jvm_learn.classloader.MyTest from file:/E:/IDEA_FILE/jvm_learn/target/classes/]</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 只打印出了常量信息，并没有执行MyParent类的静态代码块，说明MyParent类并没有被初始化</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>运行期常量</p><p>当一个常量的值是在<strong>运行期</strong>才可以确定的，那么其常量就不会被放到调用类的常量池中，只有在程序运行时使用到该常量时，会导致对这个常量所在的类的主动使用，从而导致这个类被初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// STR只有在运行时才能确定具体的值，所以该方法会导致MyParent3类的初始化</span></span><br><span class="line">        System.out.println(MyParent3.STR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent3</span></span>&#123;</span><br><span class="line">    <span class="comment">// 运行时常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR = UUID.randomUUID().toString();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent3 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 程序执行结果 */</span></span><br><span class="line">MyParent3 <span class="keyword">static</span> block</span><br><span class="line">a89726ae-<span class="number">920e-4</span>c57-<span class="number">9f</span>6c-d1da8414d834</span><br></pre></td></tr></table></figure><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>对于数组实例来说，其类型是由JVM在<strong>运行期</strong>动态生成的，例如下边代码中表示为<code>class [Lcom.geekerit.jvmlearn.classloader.MyParent4;</code>，动态生成的类型其父类型为<code>Object.</code></p><p>对于数组来说，<code>Javadoc</code>经常将构成数组的元素称为<code>component</code>，实际上就是将数组降低一个维度之后的类型。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyParent4[] myParent4s = <span class="keyword">new</span> MyParent4[<span class="number">1</span>];</span><br><span class="line">        System.out.println(myParent4s.getClass());</span><br><span class="line">        System.out.println(myParent4s.getClass().getSuperclass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] booleans = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(booleans.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent4</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent4 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果 */</span></span><br><span class="line">class [Lcom.geekerit.jvm_learn.classloader.MyParent4;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">------------</span></span><br><span class="line">class [I</span><br><span class="line">class [Z</span><br></pre></td></tr></table></figure><h3 id="接口初始化-1"><a href="#接口初始化-1" class="headerlink" title="接口初始化"></a>接口初始化</h3><p>当一个接口在初始化时，并不要求其父接口都完成了初始化，只有在真正使用到父接口的时候（如引用接口中所定义的常量时），才会初始化</p><p>由于接口中不允许定义静态代码块，所以我们在接口内定义一个线程，当我们使用接口中的线程时，如果对接口进行了初始化，那么线程中的实例代码块就会被执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用子接口中的静态变量时父接口中的实例代码块并没有被执行，意味着调用子接口中的静态变量并没有导致对父接口的初始化</span></span><br><span class="line">        System.out.println(MyIter2.THREAD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyIter1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Thread THREAD = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"MyIter1 invoke..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MyIter1 。。。"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyIter2</span> <span class="keyword">extends</span> <span class="title">MyIter1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Thread THREAD = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"MyIter2 invoke..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MyIter2 。。。"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">MyIter2 invoke...</span><br><span class="line">MyIter2 。。。</span><br></pre></td></tr></table></figure><p>当一个类被初始化的时候，它所实现的接口是不会被初始化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest5</span> </span>&#123;</span><br><span class="line"><span class="comment">// 程序的输出结果为6，并不会输出接口中实例代码块的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyChild5.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyPatent5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Thread THREAD = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"MyParent5 invoke..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild5</span> <span class="keyword">implements</span> <span class="title">MyPatent5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态变量赋值"><a href="#静态变量赋值" class="headerlink" title="静态变量赋值"></a>静态变量赋值</h3><p>类加载器在<strong>准备阶段</strong>会给静态变量赋予其系统内置的初始值，而在初始化阶段才会赋给静态变量程序中显示指定的初始值 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用类的静态方法获取类的实例</span></span><br><span class="line">        MyParent6 myParent6 = MyParent6.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"counta:"</span> + MyParent6.counta);</span><br><span class="line">        System.out.println(<span class="string">"countb:"</span> + MyParent6.countb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent6</span></span>&#123;</span><br><span class="line"><span class="comment">// ②类初始化时由于程序并没有对变量counta显示赋值，counta会被设置为默认值0,而countb会被设置为显示指定的初始值0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counta;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> countb = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// ③ 执行该语句时会调用该类的无参构造创建类的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyParent6 myParent6 = <span class="keyword">new</span> MyParent6();</span><br><span class="line"><span class="comment">// ④ 创建类实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyParent6</span><span class="params">()</span></span>&#123;    </span><br><span class="line">        <span class="comment">// 对类中的静态变量的值进行操作，此时counta=0;countb=0;</span></span><br><span class="line">        counta++;<span class="comment">// counta==1;</span></span><br><span class="line">        countb++;<span class="comment">// countb==1;</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//① 获取实例时会调用该类的静态方法，在调用时就会触发对该类的初始化，初始化时类会从上到下执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyParent6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myParent6;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">counta:<span class="number">1</span></span><br><span class="line">countb:<span class="number">1</span></span><br></pre></td></tr></table></figure><p>调整静态变量<code>countb</code>的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用类的静态方法获取类的实例</span></span><br><span class="line">        MyParent6 myParent6 = MyParent6.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"counta:"</span> + MyParent6.counta);</span><br><span class="line">        System.out.println(<span class="string">"countb:"</span> + MyParent6.countb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent6</span></span>&#123;</span><br><span class="line"><span class="comment">// ② 没有显示指定counta的值，将保持counta类加载准备阶段的默认值0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counta;</span><br><span class="line"><span class="comment">// ③ 调用该类的无参构造创建类的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyParent6 myParent6 = <span class="keyword">new</span> MyParent6();</span><br><span class="line"><span class="comment">// ④ 创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyParent6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 此时counta已经完成初始化，counta=0;</span></span><br><span class="line">        counta++;<span class="comment">// counta==1;</span></span><br><span class="line">        <span class="comment">// 此时countb尚未完成初始化，使用类加载准备阶段时的值，countb=0;</span></span><br><span class="line">        countb++;<span class="comment">// countb==1;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ⑤ 将countb的值初始化为指定值0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> countb = <span class="number">0</span>;<span class="comment">// countb==0;</span></span><br><span class="line"><span class="comment">//① 获取实例时会调用该类的静态方法，在调用时就会触发对该类的初始化，初始化时类会从上到下执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyParent6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myParent6;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">counta:<span class="number">1</span></span><br><span class="line">countb:<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>调用<code>ClassLoader</code>类的<code>loadClass()</code>方法加载一个类，并不是对类的主动使用，不会导致对类的初始化；而通过反射去获取类的<code>class</code>对象属于对类的主动使用，会导致对类的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        String className = <span class="string">"com.geekerit.jvmlearn.classloader.Load"</span>;</span><br><span class="line">        Class&lt;?&gt; aClass = systemClassLoader.loadClass(className);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        <span class="comment">// 反射获取Class对象</span></span><br><span class="line">        aClass = Class.forName(className);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Load</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Load static block..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 程序执行结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">geekerit</span>.<span class="title">jvmlearn</span>.<span class="title">classloader</span>.<span class="title">Load</span></span></span><br><span class="line"><span class="class">---------</span></span><br><span class="line"><span class="class"><span class="title">Load</span> <span class="title">static</span> <span class="title">block</span>...</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">com</span>.<span class="title">geekerit</span>.<span class="title">jvmlearn</span>.<span class="title">classloader</span>.<span class="title">Load</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h1><p>虚拟机想要去创建一个类，第一步必然应该先找到该类的二进制数据即类的<code>.class</code>文件，这就是类的<strong>加载</strong>；而虚拟机为了保证类能够被安全加载，在<strong>连接阶段</strong>的第一步需要先对查找到的数据进行<strong>验证</strong>，只有验证通过后才会进入<strong>准备</strong>阶段去给类变量（静态变量）分配内存并根据其类型初始化为默认值，在准备阶段的最后一步会将类中的符号引用转换为直接引用；在类的初始化阶段会将程序指定的值赋给类变量。</p><hr><h1 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h1><p>Java程序对类的使用方式分为两种：主动使用与被动使用。所有的<code>Java</code>虚拟机实现必须在每个类或接口被<code>Java</code>程序<strong>“首次主动使用”</strong>时再进行初始化。</p><h2 id="类主动使用的情况"><a href="#类主动使用的情况" class="headerlink" title="类主动使用的情况"></a>类主动使用的情况</h2><h3 id="创建类的实例"><a href="#创建类的实例" class="headerlink" title="创建类的实例"></a>创建类的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUseCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClassCreate m1 = <span class="keyword">new</span> MyClassCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassCreate</span>被初始化</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassCreate static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 控制台输出结果，静态代码块被执行，说明MyClassCreate被初始化</span></span><br><span class="line">MyClassCreate <span class="keyword">static</span> block..</span><br></pre></td></tr></table></figure><h3 id="访问某个类或接口的静态变量，或者对该静态变量赋值"><a href="#访问某个类或接口的静态变量，或者对该静态变量赋值" class="headerlink" title="访问某个类或接口的静态变量，或者对该静态变量赋值"></a>访问某个类或接口的<strong>静态变量</strong>，或者对该静态变量赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUseCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyClassStaticFieldGet.STR);</span><br><span class="line">        MyClassStaticFieldSet.STR = <span class="string">"Set Value"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassStaticFieldGet</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String STR = <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassStaticField static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassStaticFieldSet</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String STR = <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassStaticFieldSet static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 控制台输出结果</span></span><br><span class="line">MyClassStaticFieldGet <span class="keyword">static</span> block..</span><br><span class="line">Hello World</span><br><span class="line">MyClassStaticFieldSet <span class="keyword">static</span> block..</span><br></pre></td></tr></table></figure><h3 id="调用类的静态方法"><a href="#调用类的静态方法" class="headerlink" title="调用类的静态方法"></a>调用类的<strong>静态方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUseCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClassStaticMethod.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassStaticMethod</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassStaticMethod"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassStaticMethod static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">MyClassStaticMethod <span class="keyword">static</span> block..</span><br><span class="line">MyClassStaticMethod</span><br></pre></td></tr></table></figure><h3 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUseCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.geekerit.jvmlearn.classloader.MyClassReflect"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassReflect</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassReflect static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">MyClassReflect <span class="keyword">static</span> block..</span><br></pre></td></tr></table></figure><h3 id="初始化一个类的子类"><a href="#初始化一个类的子类" class="headerlink" title="初始化一个类的子类"></a>初始化一个类的子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUseCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        MyClassChild classChild = <span class="keyword">new</span> MyClassChild();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassParent</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClassParent static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassChild</span> <span class="keyword">extends</span> <span class="title">MyClassParent</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">MyClassParent <span class="keyword">static</span> block..</span><br></pre></td></tr></table></figure><h3 id="Java虚拟机启动时被标明为启动类的类"><a href="#Java虚拟机启动时被标明为启动类的类" class="headerlink" title="Java虚拟机启动时被标明为启动类的类"></a>Java虚拟机启动时被标明为<strong>启动类</strong>的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUseCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"ClassUseCase static block.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">ClassUseCase <span class="keyword">static</span> block..</span><br></pre></td></tr></table></figure><h3 id="JDK7开始提供动态语言支持"><a href="#JDK7开始提供动态语言支持" class="headerlink" title="JDK7开始提供动态语言支持"></a><code>JDK7</code>开始提供<strong>动态语言</strong>支持</h3><p><code>java.lang.invoke.MethodHandle</code>实例的解析结果<code>REF_getStatic,REF_putStatic,REF_invokeStatic</code>句柄对应的类没有初始化时，则初始化</p><hr><h1 id="类的卸载"><a href="#类的卸载" class="headerlink" title="类的卸载"></a>类的卸载</h1><p>类被卸载后将不能再创建该类的对象，除非重新将该类的字节码文件加载到<code>JVM</code>中。</p><p>当类被加载连接和初始化之后，它的生命周期就开始了。当代表类的<code>Class</code>对象不再被引用时，<code>Class</code>对象就会结束生命周期，类在方法区内的数据也会被卸载，从而结束类的生命周期。</p><p><strong>一个类何时结束生命周期取决于代表他的Class对象何时结束生命周期。</strong></p><p>由<code>Java</code>虚拟机自带的类加载器（根类加载器、扩展类加载器以及系统类加载器）加载的类，在虚拟机的生命周期中始终不会被卸载。<code>Java</code>虚拟机本身会始终引用这些类加载器，而这些类加载器又会始终引用他们所加载的类的<code>Class</code>对象，因此这些<code>Class</code>对象始终是可触及的。</p><p>由用户自定义的类加载器加载的类是可以被卸载的。</p><hr><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="Java自带的查询虚拟机使用情况的工具"><a href="#Java自带的查询虚拟机使用情况的工具" class="headerlink" title="Java自带的查询虚拟机使用情况的工具"></a>Java自带的查询虚拟机使用情况的工具</h2><p><code>jconsole</code></p><p><code>jvisualvm</code></p><p><code>jmap</code>命令行工具</p><h2 id="助记符"><a href="#助记符" class="headerlink" title="助记符"></a>助记符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 反编译Java的`.class`文件</span><br><span class="line">javap -c test.class</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ldc 表示将int，float或者String类型的常量值从常量池中推送至栈顶</span><br><span class="line">bipush 表示将单字节（-128-127）的常量值推送至栈顶</span><br><span class="line">sipush 表示将一个短整型的常量值（-32768-32767）推送至栈顶</span><br><span class="line">iconst_1 表示将数值1推送至栈顶（iconst_m1 ~ iconst_5标识将常量-1-5推送至栈顶）</span><br><span class="line">anewarray 表示创建一个引用类型（如类，接口，数组等）的数组，并将其引用值压入栈顶</span><br><span class="line">newarray 表示创建一个指定的原始类型（如int,float,char等）的数组，并将其引用值压入栈顶</span><br></pre></td></tr></table></figure><h2 id="JVM相关参数"><a href="#JVM相关参数" class="headerlink" title="JVM相关参数"></a>JVM相关参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX:+TraceClassLoading:用于追踪类的加载信息并进行打印</span><br><span class="line">-XX:+TraceClassUnloading:用于追踪类的卸载信息并进行打印</span><br><span class="line"><span class="comment">// 设置jvm参数的三种形式</span></span><br><span class="line">-XX:+&lt;option&gt;:表示开启option选项</span><br><span class="line">-XX:-&lt;option&gt;:表示关闭option选项</span><br><span class="line">-XX:&lt;option&gt;=&lt;value&gt;:表示将option选项的值设置为value</span><br><span class="line"><span class="comment">// 使用jvisualvm.exe查看类的装载与卸载信息</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在Java代码中，类型的加载、连接与初始化[过程都是在程序运行期间完成的，提供了更大的灵活性，增加了更多的可能性与灵活性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加载：最常见的形式就是将已经存在的&lt;code&gt;class&lt;/code&gt;文件从磁盘上加载到内存中&lt;/p&gt;
&lt;p&gt;连接：将类与类之间的调用关系确定好（比如将类与类之间的符号引用转化为直接引用），并且完成对字节码的验证、校验等（字节码文件可能被人为修改）&lt;/p&gt;
&lt;p&gt;初始化：对静态变量的赋值等工作&lt;/p&gt;
&lt;p&gt;灵活性：类的加载、连接与初始化并不一定严格按照顺序进行，具体根据JVM规范的要求，如果JVM只是做了描述，那么根据厂商的不同可能具体的实现也会各不相同。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="类加载" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化</title>
    <link href="http://yoursite.com/2019/03/03/nosql/redis/%E6%8C%81%E4%B9%85%E5%8C%96/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2019/03/03/nosql/redis/持久化/Redis持久化/</id>
    <published>2019-03-03T09:30:09.000Z</published>
    <updated>2019-10-27T13:57:52.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要进行持久化操作"><a href="#为什么需要进行持久化操作" class="headerlink" title="为什么需要进行持久化操作"></a>为什么需要进行持久化操作</h2><p><code>Redis</code>是纯内存操作，而内存中的内容在发生操作系统宕机或者进程突然退出等情况时会发生丢失，所以需要对<code>Redis</code>服务器中的内容进行持久化操作，将内存中的数据持久化到磁盘中，这样在下次<code>Redis</code>服务启动之前可以利用持久化的文件进行数据恢复，尽可能保证生产数据的完整性。</p><a id="more"></a><hr><h2 id="什么情况下需要开启Redis持久化"><a href="#什么情况下需要开启Redis持久化" class="headerlink" title="什么情况下需要开启Redis持久化"></a>什么情况下需要开启Redis持久化</h2><p>如果只是使用Redis缓存简单的非重要的业务数据，个人认为完全没有必要开启Redis的持久化功能 ，因为只有Redis中的业务数据缺失重要时开启持久化才是有意义的。</p><hr><h2 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>Redis</code> 支持 <code>RDB</code>和 <code>AOF</code> 两种持久化机制。</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h4><p><code>RDB</code>持久化是把当前进程数据生成快照保存到硬盘的过程，触发 <code>RDB</code>持久化过程分为手动触发和自动触发。</p><h4 id="RDB工作流程"><a href="#RDB工作流程" class="headerlink" title="RDB工作流程"></a>RDB工作流程</h4><p>待补充流程图</p><p>1）执行 bgsave 命令，Redis 父进程判断当前是否存在正在执行的子进程，如 RDB/AOF 子进程，如果存在 bgsave 命令直接返回。</p><p>2）父进程执行 fork 操作创建子进程，fork 操作过程中父进程会阻塞，通过 info stats 命令查看 latest_fork_usec 选项，可以获取最近一个 fork 操作的耗时，单位为微秒。</p><p>3）父进程 fork 完成后，bgsave 命令返回“Background saving started”信息并不再阻塞父进程，可以继续响应其他命令。</p><p>4）子进程创建 RDB 文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。执行 lastsave 命令可以获取最后一次生成 RDB 的时间，对应 info 统计的 rdb_last_save_time 选项。</p><p>5）进程发送信号给父进程表示完成，父进程更新统计信息，具体见 info Persistence 下的 rdb_* 相关选项。</p><p>在指定时间间隔内将内存中的数据集快照到磁盘中，恢复时将快照文件直接读取到内存中</p><p>redis会单独fork一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程全部结束后再用这个临时文件替换上次持久化的文件。整个过程中不进行任何的IO操作，确保了极高的性能。</p><h4 id="RDB持久化的优点"><a href="#RDB持久化的优点" class="headerlink" title="RDB持久化的优点"></a>RDB持久化的优点</h4><h5 id="适合全量备份"><a href="#适合全量备份" class="headerlink" title="适合全量备份"></a>适合全量备份</h5><p><code>RDB</code>是一个紧凑压缩的二进制文件，代表 <code>Redis</code> 在某个时间点上的数据快照。非常适用于备份，全量复制等场景。</p><h5 id="数据恢复速度快"><a href="#数据恢复速度快" class="headerlink" title="数据恢复速度快"></a>数据恢复速度快</h5><p>如果需要进行大规模的数据恢复，并且对数据恢复的完整性不是特别敏感，那么RDB的方式要比<code>AOF</code>更加高效。</p><h4 id="使用RDB进行持久化存在哪些问题"><a href="#使用RDB进行持久化存在哪些问题" class="headerlink" title="使用RDB进行持久化存在哪些问题"></a>使用RDB进行持久化存在哪些问题</h4><h5 id="系统开销大"><a href="#系统开销大" class="headerlink" title="系统开销大"></a>系统开销大</h5><p><code>bgsave</code> 每次运行都要执行 fork 操作创建子进程，属于重量级操作，频繁执行成本过高。</p><h5 id="可能丢失部分数据"><a href="#可能丢失部分数据" class="headerlink" title="可能丢失部分数据"></a>可能丢失部分数据</h5><p>RDB按照指定的时间间隔进行数据备份，那么在最后一次时间间隔内发生系统故障时，最后一次还未持久化数据可能会被丢失</p><h5 id="内存占用高"><a href="#内存占用高" class="headerlink" title="内存占用高"></a>内存占用高</h5><p>在fork进程的时候内存中的数据会被克隆，大致2倍的内存膨胀需要考虑</p><h5 id="文件格式兼容问题"><a href="#文件格式兼容问题" class="headerlink" title="文件格式兼容问题"></a>文件格式兼容问题</h5><p><code>RDB</code>文件使用特定格式的二进制文件存储，<code>Redis</code>多个版本之间的<code>RDB</code>文件可能存在不兼容情况</p><h4 id="RDB相关配置解读"><a href="#RDB相关配置解读" class="headerlink" title="RDB相关配置解读"></a>RDB相关配置解读</h4><p>保存文件为<code>dump.rdb</code></p><p>生产环境下会将备份好的RDB文件通过自动化脚本传输到备用机器上，防止出现单机故障造成数据完全丢失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发RDB的默认配置</span></span><br><span class="line"><span class="comment"># 在15min内至少1个key发生修改</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 在5min内至少10个key发生修改</span></span><br><span class="line">220 save 300 10</span><br><span class="line"><span class="comment"># 在60秒内至少10000个key发生修改</span></span><br><span class="line">221 save 60 10000</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 在客户端写操作发生错误时是否停止RDB后台备份</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="comment"># 对于存储到磁盘中的快照设置是否进行压缩存储</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># 对备份数据进行校验</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 触发备份行为</span></span><br><span class="line"><span class="comment"># 全部阻塞后进行保存（阻塞当前 Redis 服务器，直到 RDB 过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。）</span></span><br><span class="line">save</span><br><span class="line"><span class="comment"># 后台异步进行快照保存，快照同时还可以响应客户端的请求（Redis 进程执行 fork 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。阻塞只发生在 fork 阶段，一般时间很短。）</span></span><br><span class="line">bgsave</span><br><span class="line"><span class="comment"># flushall也会触发备份行为，但是生成的RDB文件内容为空</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 恢复备份文件</span></span><br><span class="line"><span class="comment"># 可以将备份文件移动到redis的安装目录启动服务即可</span></span><br><span class="line"><span class="comment"># 获取RDB文件位置</span></span><br><span class="line">CONFIG GET dir</span><br><span class="line"><span class="comment"># 设置RDB文件的保存路径</span></span><br><span class="line">config <span class="built_in">set</span> dir dirName</span><br><span class="line"><span class="comment"># 设置RDB文件的文件名</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename newFileName</span><br><span class="line"><span class="comment"># 是否开启RDB文件压缩</span></span><br><span class="line">config <span class="built_in">set</span> rdbcompression &#123;yes|no&#125;</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 禁用RDB</span></span><br><span class="line"><span class="comment"># 如果需要禁用可以在配置文件中使用如下进行配置</span></span><br><span class="line"> save <span class="string">""</span> </span><br><span class="line"><span class="comment"># 也可以通过客户端进行配置</span></span><br><span class="line">redis-cli config <span class="built_in">set</span> save <span class="string">""</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># RDB文件发生损坏时检测工具</span></span><br><span class="line"><span class="comment"># Redis加载已损坏RDB文件会无法启动</span></span><br><span class="line"><span class="comment"># Short read or OOM loading DB. Unrecoverable error, aborting now.</span></span><br><span class="line">redis-check-dump  <span class="comment"># ？？使用方式</span></span><br></pre></td></tr></table></figure><hr><h3 id="AOF（append-only-file）"><a href="#AOF（append-only-file）" class="headerlink" title="AOF（append only file）"></a><code>AOF</code>（append only file）</h3><h4 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h4><p>以独立日志的方式记录每次写命令，重启时再重新执行 AOF 文件中的命令达到恢复数据的目的。AOF 的主要作用是解决了数据持久化的实时性，目前已经是 Redis 持久化的主流方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启AOF（默认不开启）</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># `AOF`文件命名</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># `AOF`持久化设置</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 重写时是否可以运用appendfsync</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置`AOF`重写的基准值</span></span><br><span class="line"><span class="comment"># 代表当前 AOF 文件空间（aof_current_size）和上一次重写后 AOF 文件空间（aof_base_size）的比值。</span></span><br><span class="line">auto-`AOF`-rewrite-percentage 100</span><br><span class="line"><span class="comment"># 表示运行 AOF 重写时文件最小体积</span></span><br><span class="line">auto-`AOF`-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复`AOF`文件</span></span><br><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure><h4 id="AOF工作流程"><a href="#AOF工作流程" class="headerlink" title="AOF工作流程"></a>AOF工作流程</h4><p>图片</p><p>1）所有的写入命令会追加到 aof_buf（缓冲区）中。</p><ul><li>Redis 使用单线程响应命令，如果每次写 AOF 文件命令都直接追加到硬盘，那么性能完全取决于当前硬盘负载。</li><li>先写入缓冲区 aof_buf 中，还有另一个好处，Redis 可以提供多种缓冲区同步硬盘的策略，在性能和安全性方面做出平衡。</li></ul><p>2）AOF 缓冲区根据对应的策略向硬盘做同步操作。</p><p>3）随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。</p><p>4）当 Redis 服务器重启时，可以加载 AOF 文件进行数据恢复。</p><p><code>AOF</code>文件与RDB文件同时存在时，Redis启动时会优先读取<code>AOF</code>文件进行数据恢复，因为通常情况下<code>AOF</code>文件保存的数据集会比RDB文件保存的数据集更完整，但是如果<code>AOF</code>存在错误会导致Redis服务无法启动</p><p>劣势</p><p>相同数据集<code>AOF</code>文件远大于RDB文件恢复速度同样慢于RDB</p><p><code>AOF</code>的运行效率慢于RDB，每秒同步策略效率较高</p><h4 id="使用AOF恢复数据步骤"><a href="#使用AOF恢复数据步骤" class="headerlink" title="使用AOF恢复数据步骤"></a>使用<code>AOF</code>恢复数据步骤</h4><ul><li>配置文件打开<code>AOF</code>配置</li><li>将<code>AOF</code>文件复制备份到对应目录中</li><li>重启Redis服务进行数据加载</li><li>如果<code>AOF</code>文件被写坏使用命令进行修复后重启服务进行加载</li></ul><h4 id="AOF文件重写机制"><a href="#AOF文件重写机制" class="headerlink" title="AOF文件重写机制"></a>AOF文件重写机制</h4><h5 id="AOF重写刷盘策略"><a href="#AOF重写刷盘策略" class="headerlink" title="AOF重写刷盘策略"></a>AOF重写刷盘策略</h5><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>always</td><td>同步持久化，每次发生数据变更会被立即记录至磁盘中，性能较差但是数据完整性好</td></tr><tr><td>everysec</td><td>默认配置，异步操作，每秒记录一次，可能会数据丢失</td></tr><tr><td>no</td><td>从不同步</td></tr></tbody></table><h5 id="什么是AOF文件重写机制"><a href="#什么是AOF文件重写机制" class="headerlink" title="什么是AOF文件重写机制"></a>什么是AOF文件重写机制</h5><p><code>AOF</code>采用文件追加方式，文件会越来越大，重写机制可以保证<code>AOF</code>文件的大小超过所设定的阈值时，Redis对<code>AOF</code>文件的内容进行压缩，只保留可以恢复数据的最小指令集，可以使用命令<code>bgrewriteAOF</code>触发机制 Redis会记录上次重写时<code>AOF</code>大小，默认配置是当<code>AOF</code>文件大小是上次rewrite后大小的一倍并且文件大于64M时触发</p><h5 id="AOF文件重写后为什么可以变小"><a href="#AOF文件重写后为什么可以变小" class="headerlink" title="AOF文件重写后为什么可以变小"></a>AOF文件重写后为什么可以变小</h5><h6 id="写命令中的数据已经被删除"><a href="#写命令中的数据已经被删除" class="headerlink" title="写命令中的数据已经被删除"></a>写命令中的数据已经被删除</h6><p>旧的AOF文件中可能存在无效的写命令，比如在数据写入之后又发生了数据的删除命令，那么该命令其实已经失效了</p><h6 id="写命令中的数据已经过期"><a href="#写命令中的数据已经过期" class="headerlink" title="写命令中的数据已经过期"></a>写命令中的数据已经过期</h6><p>进程内可能存在超时的数据，在旧的AOF文件中可能存在含有过期时间的写入命令，数据过期后该命令已经失效</p><h6 id="多条写命令的合并"><a href="#多条写命令的合并" class="headerlink" title="多条写命令的合并"></a>多条写命令的合并</h6><p>针对相同键的部分写命令可以进行合并</p><h5 id="AOF重写的优点"><a href="#AOF重写的优点" class="headerlink" title="AOF重写的优点"></a>AOF重写的优点</h5><p>降低了AOF文件占用磁盘的空间</p><p>加快了AOF文件被加载的速度</p><hr><h2 id="Redis持久化文件加载流程"><a href="#Redis持久化文件加载流程" class="headerlink" title="Redis持久化文件加载流程"></a>Redis持久化文件加载流程</h2><p>1）AOF 持久化开启且存在 AOF 文件时，优先加载 AOF 文件</p><p>2）AOF 关闭或者 AOF 文件不存在时，加载 RDB 文件，</p><p>3）加载 AOF/RDB 文件成功后，Redis 启动成功。</p><p>4）AOF/RDB 文件存在错误时，Redis 启动失败并打印错误信息。</p><hr><h2 id="RDB与AOF的性能调优建议"><a href="#RDB与AOF的性能调优建议" class="headerlink" title="RDB与AOF的性能调优建议"></a><code>RDB</code>与<code>AOF</code>的性能调优建议</h2><p>RDB文件只用作数据库数据备份，建议只在Slave上持久化RDB文件，而且配置15分钟备份规则就可以满足需要</p><p>如果开启<code>AOF</code>，好处是最恶劣情况下不会丢失超过两秒的数据，代价是带来了持续的IO操作，并且<code>AOF</code> rewrite最后将产生的新数据写到新文件造成的阻塞几乎不可避免。在硬盘许可的情况下应该尽量减少rewrite的频率，<code>AOF</code>重写的基础大小默认值64M可以设置为5GB以上，默认超过原大小的100%可以改为适当的数值。</p><p>如果不开启<code>AOF</code>，仅靠主从复制实现高可用也是可以的，减去频繁的IO操作与rewrite带来的系统波动，代价是主从如果同时挂掉会丢失数据，启动脚本需要比较主从中的RDB文件，载入较新的RDB文件恢复数据。</p><hr><p>参考资料</p><p>书籍：《Redis开发与运维》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么需要进行持久化操作&quot;&gt;&lt;a href=&quot;#为什么需要进行持久化操作&quot; class=&quot;headerlink&quot; title=&quot;为什么需要进行持久化操作&quot;&gt;&lt;/a&gt;为什么需要进行持久化操作&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;是纯内存操作，而内存中的内容在发生操作系统宕机或者进程突然退出等情况时会发生丢失，所以需要对&lt;code&gt;Redis&lt;/code&gt;服务器中的内容进行持久化操作，将内存中的数据持久化到磁盘中，这样在下次&lt;code&gt;Redis&lt;/code&gt;服务启动之前可以利用持久化的文件进行数据恢复，尽可能保证生产数据的完整性。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="持久化" scheme="http://yoursite.com/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring-MVC接收参数</title>
    <link href="http://yoursite.com/2019/02/26/framework/Spring%20MVC/Spring%20MVC%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2019/02/26/framework/Spring MVC/Spring MVC接收参数/</id>
    <published>2019-02-26T03:16:14.000Z</published>
    <updated>2019-10-27T13:57:52.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接收方式"><a href="#接收方式" class="headerlink" title="接收方式"></a>接收方式</h2><h3 id="不用注解直接接受参数"><a href="#不用注解直接接受参数" class="headerlink" title="不用注解直接接受参数"></a>不用注解直接接受参数</h3><ul><li>需要注意的是controller中的形参需要与HTTP请求的参数名称保持一致</li><li>URL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/param/no/annotation?userId=1&amp;username=arwin&amp;age=24</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/no/annotation"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">noAnnotation</span><span class="params">(Long userId, String username, Integer age)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getMap(userId, username, age);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Map <span class="title">getMap</span><span class="params">(Long userId, String username, Integer age)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">       paramsMap.put(<span class="string">"id"</span>, userId);</span><br><span class="line">       paramsMap.put(<span class="string">"username"</span>, username);</span><br><span class="line">       paramsMap.put(<span class="string">"age"</span>, age);</span><br><span class="line">       <span class="keyword">return</span> paramsMap;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用-RequestParam-注解接收参数"><a href="#使用-RequestParam-注解接收参数" class="headerlink" title="使用 @RequestParam 注解接收参数"></a>使用 <code>@RequestParam</code> 注解接收参数</h3><ul><li>URL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/param/request/param?user_id=1&amp;user_name=arwin</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map <span class="title">getMap</span><span class="params">(Long userId, String username, Integer age)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">       paramsMap.put(<span class="string">"id"</span>, userId);</span><br><span class="line">       paramsMap.put(<span class="string">"username"</span>, username);</span><br><span class="line">       paramsMap.put(<span class="string">"age"</span>, age);</span><br><span class="line">       <span class="keyword">return</span> paramsMap;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/request/param"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">requestParam</span><span class="params">(@RequestParam(value = <span class="string">"user_id"</span>)</span> Long userId,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"user_name"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"user_age"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"18"</span>)</span> Integer age) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getMap(userId, username, age);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestBody-接收-JSON-参数"><a href="#使用-RequestBody-接收-JSON-参数" class="headerlink" title="使用 @RequestBody 接收 JSON 参数"></a>使用 <code>@RequestBody</code> 接收 <strong>JSON</strong> 参数</h3><ul><li>URL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/param/request/body</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/request/body"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">requestBody</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-PathVariable-接收参数"><a href="#通过-PathVariable-接收参数" class="headerlink" title="通过 @PathVariable 接收参数"></a>通过 <code>@PathVariable</code> 接收参数</h3><ul><li>URL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/param/url/1</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/url/&#123;userId&#125;"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getByUrl</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Long userId)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getMap(userId,<span class="string">"url"</span>,<span class="number">20</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="接收数组类型参数"><a href="#接收数组类型参数" class="headerlink" title="接收数组类型参数"></a>接收数组类型参数</h3><ul><li>URL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/param/request/array?intArr=1,2,3&amp;longArr=1,2,3&amp;strArr=arwin,aaryn</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/request/array"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">requestArray</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> [] intArr, Long []longArr, String[] strArr)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">       paramsMap.put(<span class="string">"intArr"</span>, intArr);</span><br><span class="line">       paramsMap.put(<span class="string">"longArr"</span>, longArr);</span><br><span class="line">       paramsMap.put(<span class="string">"strArr"</span>, strArr);</span><br><span class="line">       <span class="keyword">return</span> paramsMap;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="自定义参数转换规则"><a href="#自定义参数转换规则" class="headerlink" title="自定义参数转换规则"></a>自定义参数转换规则</h2><h3 id="设置自定义的参数转换器（规则-id-userName-note-）"><a href="#设置自定义的参数转换器（规则-id-userName-note-）" class="headerlink" title="设置自定义的参数转换器（规则:{id}-{userName}-{note}）"></a>设置自定义的参数转换器（规则:{id}-{userName}-{note}）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">convert</span><span class="params">(String userStr)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        String []strArr = userStr.split(<span class="string">"-"</span>);</span><br><span class="line">        Long id = Long.parseLong(strArr[<span class="number">0</span>]);</span><br><span class="line">        String userName = strArr[<span class="number">1</span>];</span><br><span class="line">        String note = strArr[<span class="number">2</span>];</span><br><span class="line">        user.setUserId(id);</span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        user.setNote(note);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义控制器进行测试"><a href="#定义控制器进行测试" class="headerlink" title="定义控制器进行测试"></a>定义控制器进行测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/converter&quot;)</span><br><span class="line">  @ResponseBody</span><br><span class="line">  public User getUserByConverter(User user) &#123;</span><br><span class="line">      return user;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="访问接口查看"><a href="#访问接口查看" class="headerlink" title="访问接口查看"></a>访问接口查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/param/converter?user=1-username1-note_1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接收方式&quot;&gt;&lt;a href=&quot;#接收方式&quot; class=&quot;headerlink&quot; title=&quot;接收方式&quot;&gt;&lt;/a&gt;接收方式&lt;/h2&gt;&lt;h3 id=&quot;不用注解直接接受参数&quot;&gt;&lt;a href=&quot;#不用注解直接接受参数&quot; class=&quot;headerlink&quot; title=&quot;不用注解直接接受参数&quot;&gt;&lt;/a&gt;不用注解直接接受参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要注意的是controller中的形参需要与HTTP请求的参数名称保持一致&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://127.0.0.1:8081/param/no/annotation?userId=1&amp;amp;username=arwin&amp;amp;age=24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;控制器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&quot;/no/annotation&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@ResponseBody&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Map &lt;span class=&quot;title&quot;&gt;noAnnotation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long userId, String username, Integer age)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getMap(userId, username, age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map &lt;span class=&quot;title&quot;&gt;getMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long userId, String username, Integer age)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Map&amp;lt;String, Object&amp;gt; paramsMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       paramsMap.put(&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       paramsMap.put(&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       paramsMap.put(&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;, age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; paramsMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis键空间通知</title>
    <link href="http://yoursite.com/2019/02/26/nosql/redis/%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/Redis%E9%94%AE%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/02/26/nosql/redis/使用场景/Redis键通知/</id>
    <published>2019-02-26T03:16:14.000Z</published>
    <updated>2019-10-27T13:57:52.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="中文文档"><a href="#中文文档" class="headerlink" title="中文文档"></a>中文文档</h3><p><a href="http://redisdoc.com/topic/notification.html" target="_blank" rel="noopener">键通知事件介绍</a></p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><ul><li>键空间通知：事件的订阅者可以拿到的信息是某一个键被执行事件的名称，是针对某一个键发生的改动进行的事件监控；</li><li>键事件通知：事件的订阅者可以拿到的信息是发生该事件的键名称，是针对某一事件进行的主体监控，例如监控过期键，监控被删除键等；</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>默认情况下该通知行为是关闭的，原因可能有：</p><ul><li>开启键空间通知功能需要消耗一些 CPU</li><li>该功能对于大多数的使用者可能并没有意义</li></ul><a id="more"></a><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ol><li><p><code>redis</code> 配置文件 <code>redis.conf</code> 中设置键通知</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ex为示例，实际根据自己需要参照参数介绍进行配置</span></span><br><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure></li><li><p>登录 <code>redis</code> 服务端后执行命令进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ex为示例，实际根据自己需要参照参数介绍进行配置</span></span><br><span class="line">config <span class="built_in">set</span> notify-keyspace-events Ex</span><br></pre></td></tr></table></figure></li></ol><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><table><thead><tr><th>字符</th><th>通知类型</th></tr></thead><tbody><tr><td><code>K</code></td><td>键空间通知，所有通知以 <code>__keyspace@&lt;db&gt;__</code> 为前缀</td></tr><tr><td><code>E</code></td><td>键事件通知，所有通知以 <code>__keyevent@&lt;db&gt;__</code> 为前缀</td></tr><tr><td><code>g</code></td><td><code>DEL</code> 、 <code>EXPIRE</code> 、 <code>RENAME</code> 等类型无关的通用命令的通知</td></tr><tr><td><code>$</code></td><td>字符串命令的通知</td></tr><tr><td><code>l</code></td><td>列表命令的通知</td></tr><tr><td><code>s</code></td><td>集合命令的通知</td></tr><tr><td><code>h</code></td><td>哈希命令的通知</td></tr><tr><td><code>z</code></td><td>有序集合命令的通知</td></tr><tr><td><code>x</code></td><td>过期事件：每当有过期键被删除时发送</td></tr><tr><td><code>e</code></td><td>驱逐(evict)事件：每当有键因为 <code>maxmemory</code> 政策而被删除时发送</td></tr><tr><td><code>A</code></td><td>参数 <code>g$lshzxe</code> 的别名</td></tr></tbody></table><h2 id="Springboot-使用"><a href="#Springboot-使用" class="headerlink" title="Springboot 使用"></a><code>Springboot</code> 使用</h2><h3 id="项目配置-redis-连接信息"><a href="#项目配置-redis-连接信息" class="headerlink" title="项目配置  redis 连接信息"></a>项目配置  <code>redis</code> 连接信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">******</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    cache-names:</span> <span class="string">redisCache</span></span><br></pre></td></tr></table></figure><h3 id="启动类中创建任务池，等待处理-redis-消息"><a href="#启动类中创建任务池，等待处理-redis-消息" class="headerlink" title="启动类中创建任务池，等待处理 redis 消息"></a>启动类中创建任务池，等待处理 <code>redis</code> 消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任务池</span></span><br><span class="line">  <span class="keyword">private</span> ThreadPoolTaskScheduler taskScheduler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建任务池，运行线程等待处理Redis的消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>  任务池</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title">initTaskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (taskScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> taskScheduler;</span><br><span class="line">      &#125;</span><br><span class="line">      taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">      taskScheduler.setPoolSize(<span class="number">20</span>);</span><br><span class="line">      <span class="keyword">return</span> taskScheduler;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="定义-redis-的监听容器"><a href="#定义-redis-的监听容器" class="headerlink" title="定义 redis 的监听容器"></a>定义 <code>redis</code> 的监听容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 定义Redis的监听容器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 监听容器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">initRedisContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       RedisMessageListenerContainer container</span><br><span class="line">               = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">       <span class="comment">// Redis连接工厂</span></span><br><span class="line">       container.setConnectionFactory(connectionFactory);</span><br><span class="line">       <span class="comment">// 设置运行任务池</span></span><br><span class="line">       container.setTaskExecutor(initTaskScheduler());</span><br><span class="line">       <span class="comment">// 定义监听渠道，名称为topic1</span></span><br><span class="line">       Topic topicTest = <span class="keyword">new</span> ChannelTopic(<span class="string">"topic1"</span>);</span><br><span class="line">       <span class="comment">// 针对键过期事件定义监听渠道</span></span><br><span class="line">       Topic topicEvent = <span class="keyword">new</span> ChannelTopic(<span class="string">"__keyevent@0__:expired"</span>);</span><br><span class="line">       <span class="comment">// 针对具体的键定义监听渠道</span></span><br><span class="line">       Topic topicSpace = <span class="keyword">new</span> ChannelTopic(<span class="string">"__keyspace@0__:key1"</span>);</span><br><span class="line">       <span class="comment">// 针对正则匹配的键定义监听渠道</span></span><br><span class="line">       Topic topicSpaceOfPattern = <span class="keyword">new</span> PatternTopic(<span class="string">"__keyspace@0__:key*"</span>);</span><br><span class="line">    <span class="comment">// 创建需要redis监听的渠道集合</span></span><br><span class="line">       Collection&lt;Topic&gt; topicCollection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       topicCollection.add(topicTest);</span><br><span class="line">       topicCollection.add(topicEvent);</span><br><span class="line">       topicCollection.add(topicSpace);</span><br><span class="line">       topicCollection.add(topicSpaceOfPattern);</span><br><span class="line">       <span class="comment">// 使用监听器监听Redis的消息</span></span><br><span class="line">       container.addMessageListener(redisMsgListener,topicCollection);</span><br><span class="line">       <span class="keyword">return</span> container;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="创建-redis-消息监听器-RedisMessageListener"><a href="#创建-redis-消息监听器-RedisMessageListener" class="headerlink" title="创建 redis 消息监听器 RedisMessageListener"></a>创建 <code>redis</code> 消息监听器 <code>RedisMessageListener</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消息体</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        <span class="comment">// 渠道名称</span></span><br><span class="line">        String topic = <span class="keyword">new</span> String(pattern);</span><br><span class="line">        System.out.println(body);</span><br><span class="line">        System.out.println(topic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h2><h3 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h3><p>业务场景为会员定制化服务，会员自己设定周期订购服务，要求在订购期前提醒用户进行确认收货地址，并且在收到商品后的七天之内将不满意的商品进行退回。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>时间节点为任务，可以使用<code>redis</code>键空间通知完成，在每个节点生成监控键，并且需要注意键的设计，因为<code>redis</code>的键空间通知在键过期后只能得到过期的键名称，无法获取过期键的内容。</p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p><a href="https://github.com/geekeritcom/springboot-redis-notification.git" target="_blank" rel="noopener">源码地址</a></p><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><p>案例是利用<code>redis</code>的键空间通知的键过期事件通知，获取到过期键的内容进行业务处理，所以<code>redis</code>键的设计至关重要，在业务复杂的情况下可以使用 <code>统一前缀+业务类型+业务主体信息</code>作为键，方便进行业务区分。</p><p>另外<code>redis</code>的键过期事件并不是在过期时间到达后立即发生，而是在<code>redis</code>过期键在被驱逐后才会发生，这决定于<code>redis</code>的过期键驱逐策略，所以过期时间不一定会特别精准，如果对时间有高精准要求的业务请慎重使用此解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;h3 id=&quot;中文文档&quot;&gt;&lt;a href=&quot;#中文文档&quot; class=&quot;headerlink&quot; title=&quot;中文文档&quot;&gt;&lt;/a&gt;中文文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://redisdoc.com/topic/notification.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;键通知事件介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;个人理解&quot;&gt;&lt;a href=&quot;#个人理解&quot; class=&quot;headerlink&quot; title=&quot;个人理解&quot;&gt;&lt;/a&gt;个人理解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;键空间通知：事件的订阅者可以拿到的信息是某一个键被执行事件的名称，是针对某一个键发生的改动进行的事件监控；&lt;/li&gt;
&lt;li&gt;键事件通知：事件的订阅者可以拿到的信息是发生该事件的键名称，是针对某一事件进行的主体监控，例如监控过期键，监控被删除键等；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;默认情况下该通知行为是关闭的，原因可能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启键空间通知功能需要消耗一些 CPU&lt;/li&gt;
&lt;li&gt;该功能对于大多数的使用者可能并没有意义&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成JSP</title>
    <link href="http://yoursite.com/2019/02/20/framework/springboot/Spring%20Boot%E9%9B%86%E6%88%90JSP%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2019/02/20/framework/springboot/Spring Boot集成JSP步骤/</id>
    <published>2019-02-20T03:16:14.000Z</published>
    <updated>2019-10-27T13:57:52.789Z</updated>
    
    <content type="html"><![CDATA[<h4 id="maven项目添加相关依赖"><a href="#maven项目添加相关依赖" class="headerlink" title="maven项目添加相关依赖"></a>maven项目添加相关依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- tomcat支持 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- jstl标签库 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="在main目录下新建webapp-WEB-INF目录"><a href="#在main目录下新建webapp-WEB-INF目录" class="headerlink" title="在main目录下新建webapp/WEB-INF目录"></a>在main目录下新建<code>webapp/WEB-INF</code>目录</h4><p><img src="http://image.geekerit.com/image/blog/springboot/jsp/folder.png-geekerit" alt="1551164322062"></p><h4 id="Module-Settings中设置web选项"><a href="#Module-Settings中设置web选项" class="headerlink" title="Module Settings中设置web选项"></a><code>Module Settings</code>中设置<strong>web</strong>选项</h4><p><img src="http://image.geekerit.com/image/blog/springboot/jsp/modulesettings.png-geekerit" alt="1551164401499"></p><p><img src="http://image.geekerit.com/image/blog/springboot/jsp/web.png-geekerit" alt="1551164436759"></p><p><img src="http://image.geekerit.com/image/blog/springboot/jsp/webresource.png-geekerit" alt="1551164466177"></p><h4 id="项目配置文件中设置jsp文件的访问路径"><a href="#项目配置文件中设置jsp文件的访问路径" class="headerlink" title="项目配置文件中设置jsp文件的访问路径"></a>项目配置文件中设置<code>jsp</code>文件的访问路径</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    view:</span></span><br><span class="line">      <span class="comment"># 页面默认前缀目录</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/jsp/</span></span><br><span class="line">      <span class="comment"># 响应页面默认后缀</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure><h4 id="新建jsp文件"><a href="#新建jsp文件" class="headerlink" title="新建jsp文件"></a>新建<code>jsp</code>文件</h4><p><img src="http://image.geekerit.com/image/blog/springboot/jsp/createjsp.png-geekerit" alt="1551164505124"></p><h4 id="controller中设置访问路径"><a href="#controller中设置访问路径" class="headerlink" title="controller中设置访问路径"></a><code>controller</code>中设置访问路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过maven插件启动项目并测试访问"><a href="#通过maven插件启动项目并测试访问" class="headerlink" title="通过maven插件启动项目并测试访问"></a>通过<code>maven</code>插件启动项目并测试访问</h4><p><img src="http://image.geekerit.com/image/blog/springboot/jsp/plugin.png-geekerit" alt="1551164789173"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;maven项目添加相关依赖&quot;&gt;&lt;a href=&quot;#maven项目添加相关依赖&quot; class=&quot;headerlink&quot; title=&quot;maven项目添加相关依赖&quot;&gt;&lt;/a&gt;maven项目添加相关依赖&lt;/h4&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- tomcat支持 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.tomcat.embed&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;tomcat-embed-jasper&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- jstl标签库 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>redis基础数据结构之SortedSet有序集合</title>
    <link href="http://yoursite.com/2019/01/24/nosql/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SortedSet/"/>
    <id>http://yoursite.com/2019/01/24/nosql/redis/数据结构/SortedSet/</id>
    <published>2019-01-24T10:46:14.000Z</published>
    <updated>2019-10-27T13:57:52.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ZADD"><a href="#ZADD" class="headerlink" title="ZADD"></a>ZADD</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZADD key score member [[score member] [score member] ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><p>key 要添加的有序集合的键名称</p></li><li><p>score 要添加的有序集合成员的分数</p></li><li><p>member 要添加到有序集合中的成员</p></li><li><p>[score member] 表示可以同时添加多个成员与对应分支的键值对</p><a id="more"></a><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将一个或多个 <code>member</code> 元素及其 <code>score</code> 值加入到有序集 <code>key</code> 当中。<br>如果某个 <code>member</code> 已经是有序集的成员，那么更新这个 <code>member</code> 的 <code>score</code> 值，并通过重新插入这个 <code>member</code> 元素，来保证该 <code>member</code> 在正确的位置上。<br><code>score</code> 值可以是整数值或双精度浮点数。<br>如果 <code>key</code> 不存在，则创建一个空的有序集并执行 <a href="http://redisdoc.com/sorted_set/zadd.html#zadd" target="_blank" rel="noopener">ZADD</a> 操作。<br>当 <code>key</code> 存在但不是有序集类型时，返回一个错误。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(M*log(N))， <code>N</code> 是有序集的基数， <code>M</code> 为成功添加的新成员的数量。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。</p><h3 id="示例图片"><a href="#示例图片" class="headerlink" title="示例图片"></a>示例图片</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548210174303-aec12a70-879d-49ce-8d29-424592cf0e1e.png#align=left&amp;display=inline&amp;height=389&amp;linkTarget=_blank&amp;name=zadd.png&amp;originHeight=389&amp;originWidth=655&amp;size=21589&amp;width=655" alt="zadd.png"></p></li></ul><hr><h2 id="ZCARD"><a href="#ZCARD" class="headerlink" title="ZCARD"></a>ZCARD</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCARD key</span><br></pre></td></tr></table></figure><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key 有序集合的键名称<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 的基数。<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(1)<h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3>当 <code>key</code> 存在且是有序集类型时，返回有序集的基数。<br>当 <code>key</code> 不存在时，返回 <code>0</code> 。<h3 id="示例图片-1"><a href="#示例图片-1" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548210351131-c5cb0e5b-db41-4a0f-bd9a-e4f8e8df187f.png#align=left&amp;display=inline&amp;height=121&amp;linkTarget=_blank&amp;name=zcard.png&amp;originHeight=121&amp;originWidth=688&amp;size=10745&amp;width=688" alt="zcard.png"></li></ul><hr><h2 id="ZCOUNT"><a href="#ZCOUNT" class="headerlink" title="ZCOUNT"></a>ZCOUNT</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCOUNT key min max</span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key 有序集合的键名称</li><li>min 有序集合中score的最小取值</li><li>max 有序集合中score的最大取值<h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中， <code>score</code> 值在 <code>min</code> 和 <code>max</code> 之间(默认包括 <code>score</code> 值等于 <code>min</code> 或 <code>max</code> )的成员的数量。<h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N))， <code>N</code> 为有序集的基数。<h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><code>score</code> 值在 <code>min</code> 和 <code>max</code> 之间的成员的数量。<h3 id="示例图片-2"><a href="#示例图片-2" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548210557964-28cefb2d-5a3c-4280-99c5-d725ca0b9f8a.png#align=left&amp;display=inline&amp;height=223&amp;linkTarget=_blank&amp;name=zcount.png&amp;originHeight=223&amp;originWidth=651&amp;size=10530&amp;width=651" alt="zcount.png"></li></ul><hr><h2 id="ZINCRBY"><a href="#ZINCRBY" class="headerlink" title="ZINCRBY"></a>ZINCRBY</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZINCRBY key increment member</span><br></pre></td></tr></table></figure><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key 有序集合的键名称</li><li>increment 对有序集合成员的score值要操作的增量</li><li>member 要操作的有序集合的成员<h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3>为有序集 <code>key</code> 的成员 <code>member</code> 的 <code>score</code> 值加上增量 <code>increment</code> 。<br>可以通过传递一个负数值 <code>increment</code> ，让 <code>score</code> 减去相应的值，比如 <code>ZINCRBY key -5 member</code> ，就是让 <code>member</code> 的 <code>score</code> 值减去 <code>5</code> 。<br>当 <code>key</code> 不存在，或 <code>member</code> 不是 <code>key</code> 的成员时， <code>ZINCRBY key increment member</code> 等同于 <code>ZADD key increment member</code> 。<br>当 <code>key</code> 不是有序集类型时，返回一个错误。<br><code>score</code> 值可以是整数值或双精度浮点数。<h3 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N))<h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3><code>member</code> 成员的新 <code>score</code> 值，以字符串形式表示。<h3 id="示例图片-3"><a href="#示例图片-3" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548210763810-df560811-3585-42be-b303-946b9a99f46a.png#align=left&amp;display=inline&amp;height=150&amp;linkTarget=_blank&amp;name=zincrby.png&amp;originHeight=150&amp;originWidth=742&amp;size=13227&amp;width=742" alt="zincrby.png"></li></ul><hr><h2 id="ZRANGE"><a href="#ZRANGE" class="headerlink" title="ZRANGE"></a>ZRANGE</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key 有序集合的键名称</li><li>start 有序集合成员下标的起始值，0表示第一个成员</li><li>stop 有序集合成员下标的结束值，-1表示最后一个成员</li><li>[WITHSCORES] 可选项，表示查询有序集合成员时是否同时返回成员的score值<h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中，指定区间内的成员。<br>其中成员的位置按 <code>score</code> 值递增(从小到大)来排序。<br>具有相同 <code>score</code> 值的成员按字典序(<a href="http://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="noopener">lexicographical order</a> )来排列。<br>如果你需要成员按 <code>score</code> 值递减(从大到小)来排列，请使用 <a href="http://redisdoc.com/sorted_set/zrevrange.html#zrevrange" target="_blank" rel="noopener">ZREVRANGE</a> 命令。<br>下标参数 <code>start</code> 和 <code>stop</code> 都以 <code>0</code> 为底，也就是说，以 <code>0</code> 表示有序集第一个成员，以 <code>1</code> 表示有序集第二个成员，以此类推。<br>你也可以使用负数下标，以 <code>-1</code> 表示最后一个成员， <code>-2</code> 表示倒数第二个成员，以此类推。<br>超出范围的下标并不会引起错误。<br>比如说，当 <code>start</code> 的值比有序集的最大下标还要大，或是 <code>start &gt; stop</code> 时， <a href="http://redisdoc.com/sorted_set/zrange.html#zrange" target="_blank" rel="noopener">ZRANGE</a> 命令只是简单地返回一个空列表。<br>另一方面，假如 <code>stop</code> 参数的值比有序集的最大下标还要大，那么 Redis 将 <code>stop</code> 当作最大下标来处理。<br>可以通过使用 <code>WITHSCORES</code> 选项，来让成员和它的 <code>score</code> 值一并返回，返回列表以 <code>value1,score1, ..., valueN,scoreN</code> 的格式表示。<br>客户端库可能会返回一些更复杂的数据类型，比如数组、元组等。<h3 id="时间复杂度-4"><a href="#时间复杂度-4" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， <code>N</code> 为有序集的基数，而 <code>M</code> 为结果集的基数。<h3 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h3>指定区间内，带有 <code>score</code> 值(可选)的有序集成员的列表。<h3 id="示例图片-4"><a href="#示例图片-4" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548211162394-9a971c6f-b603-4b08-a692-c0672f6934f1.png#align=left&amp;display=inline&amp;height=597&amp;linkTarget=_blank&amp;name=zrange.png&amp;originHeight=627&amp;originWidth=783&amp;size=37327&amp;width=746" alt="zrange.png"></li></ul><hr><h2 id="ZRANGEBYSCORE"><a href="#ZRANGEBYSCORE" class="headerlink" title="ZRANGEBYSCORE"></a>ZRANGEBYSCORE</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br></pre></td></tr></table></figure><h4 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key 有序集合的键名称</li><li>min 有序集合成员score的最小取值</li><li>max 有序集合成员score的最大取值</li><li>[WITHSCORES] 查询结果是否同时返回符合条件成员的score值</li><li>[LIMIT offset count] 对查询的结果集进行数量限制，offset表示结果集的起始位置，count表示取出结果集的几个结果，例如结果集是[1,2,3]，limit 0 2，则最终结果是[1,2]<h3 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间(包括等于 <code>min</code> 或 <code>max</code> )的成员。有序集成员按 <code>score</code> 值递增(从小到大)次序排列。<br>具有相同 <code>score</code> 值的成员按字典序(<a href="http://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="noopener">lexicographical order</a>)来排列(该属性是有序集提供的，不需要额外的计算)。<br>可选的 <code>LIMIT</code> 参数指定返回结果的数量及区间(就像SQL中的 <code>SELECT LIMIT offset, count</code> )，注意当 <code>offset</code> 很大时，定位 <code>offset</code> 的操作可能需要遍历整个有序集，此过程最坏复杂度为 O(N) 时间。<br>可选的 <code>WITHSCORES</code> 参数决定结果集是单单返回有序集的成员，还是将有序集成员及其 <code>score</code> 值一起返回。<br>该选项自 Redis 2.0 版本起可用。<h4 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h4><code>min</code> 和 <code>max</code> 可以是 <code>-inf</code> 和 <code>+inf</code> ，这样一来，你就可以在不知道有序集的最低和最高 <code>score</code> 值的情况下，使用 <a href="http://redisdoc.com/sorted_set/zrangebyscore.html#zrangebyscore" target="_blank" rel="noopener">ZRANGEBYSCORE</a> 这类命令。<br>默认情况下，区间的取值使用<a href="http://zh.wikipedia.org/wiki/%E5%8D%80%E9%96%93" target="_blank" rel="noopener">闭区间</a> (小于等于或大于等于)，你也可以通过给参数前增加 <code>(</code> 符号来使用可选的<a href="http://zh.wikipedia.org/wiki/%E5%8D%80%E9%96%93" target="_blank" rel="noopener">开区间</a> (小于或大于)。<h3 id="时间复杂度-5"><a href="#时间复杂度-5" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， <code>N</code> 为有序集的基数， <code>M</code> 为被结果集的基数。<h3 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h3>指定区间内，带有 <code>score</code> 值(可选)的有序集成员的列表。<h3 id="示例图片-5"><a href="#示例图片-5" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548211596435-a3af2df2-5a2d-4b5a-ac83-c1632ff32726.png#align=left&amp;display=inline&amp;height=745&amp;linkTarget=_blank&amp;name=zrangebyscore.png&amp;originHeight=752&amp;originWidth=753&amp;size=37070&amp;width=746" alt="zrangebyscore.png"></li></ul><hr><h2 id="ZRANK"><a href="#ZRANK" class="headerlink" title="ZRANK"></a>ZRANK</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANK key member</span><br></pre></td></tr></table></figure><h4 id="参数说明-6"><a href="#参数说明-6" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key 有序集合的键名称</li><li>member 要查询的有序集合中的成员<h3 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中成员 <code>member</code> 的排名。其中有序集成员按 <code>score</code> 值递增(从小到大)顺序排列。<br>排名以 <code>0</code> 为底，也就是说， <code>score</code> 值最小的成员排名为 <code>0</code> 。<br>使用 <a href="http://redisdoc.com/sorted_set/zrevrank.html#zrevrank" target="_blank" rel="noopener">ZREVRANK</a> 命令可以获得成员按 <code>score</code> 值递减(从大到小)排列的排名。<h3 id="时间复杂度-6"><a href="#时间复杂度-6" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N))<h3 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h3>如果 <code>member</code> 是有序集 <code>key</code> 的成员，返回 <code>member</code> 的排名。<br>如果 <code>member</code> 不是有序集 <code>key</code> 的成员，返回 <code>nil</code> 。<h3 id="示例图片-6"><a href="#示例图片-6" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548211757394-f37b3c02-a377-4da7-989f-b957962839c6.png#align=left&amp;display=inline&amp;height=195&amp;linkTarget=_blank&amp;name=zrank.png&amp;originHeight=195&amp;originWidth=619&amp;size=12348&amp;width=619" alt="zrank.png"></li></ul><hr><h2 id="ZREM"><a href="#ZREM" class="headerlink" title="ZREM"></a>ZREM</h2><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREM key member [member ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-7"><a href="#参数说明-7" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>member    要删除的有序集合的成员</li><li>[member …] 可以同时删除多个成员<h3 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h3>移除有序集 <code>key</code> 中的一个或多个成员，不存在的成员将被忽略。<br>当 <code>key</code> 存在但不是有序集类型时，返回一个错误。<h3 id="时间复杂度-7"><a href="#时间复杂度-7" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(M*log(N))， <code>N</code> 为有序集的基数， <code>M</code> 为被成功移除的成员的数量。<h3 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h3>被成功移除的成员的数量，不包括被忽略的成员。<h3 id="示例图片-7"><a href="#示例图片-7" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548212010774-29bdc68e-d2cc-4930-8fbc-4da1efaabb3b.png#align=left&amp;display=inline&amp;height=190&amp;linkTarget=_blank&amp;name=zrem.png&amp;originHeight=190&amp;originWidth=680&amp;size=14473&amp;width=680" alt="zrem.png"></li></ul><hr><h2 id="ZREMRANGEBYRANK"><a href="#ZREMRANGEBYRANK" class="headerlink" title="ZREMRANGEBYRANK"></a>ZREMRANGEBYRANK</h2><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYRANK key start stop</span><br></pre></td></tr></table></figure><h4 id="参数说明-8"><a href="#参数说明-8" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>start    有序集合成员的下标起始值</li><li>stop    有序集合成员的下标结束值<h3 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h3>移除有序集 <code>key</code> 中，指定排名(rank)区间内的所有成员。<br>区间分别以下标参数 <code>start</code> 和 <code>stop</code> 指出，包含 <code>start</code> 和 <code>stop</code> 在内。<br>下标参数 <code>start</code> 和 <code>stop</code> 都以 <code>0</code> 为底，也就是说，以 <code>0</code> 表示有序集第一个成员，以 <code>1</code> 表示有序集第二个成员，以此类推。<br>你也可以使用负数下标，以 <code>-1</code> 表示最后一个成员， <code>-2</code> 表示倒数第二个成员，以此类推。<h3 id="时间复杂度-8"><a href="#时间复杂度-8" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， <code>N</code> 为有序集的基数，而 <code>M</code> 为被移除成员的数量。<h3 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h3>被移除成员的数量。<h3 id="示例图片-8"><a href="#示例图片-8" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548212194944-d8ebf6ca-bf12-469d-a0d7-1e79104fa72b.png#align=left&amp;display=inline&amp;height=299&amp;linkTarget=_blank&amp;name=zremrangebyrank.png&amp;originHeight=299&amp;originWidth=540&amp;size=14154&amp;width=540" alt="zremrangebyrank.png"></li></ul><hr><h2 id="ZREMRANGEBYSCORE"><a href="#ZREMRANGEBYSCORE" class="headerlink" title="ZREMRANGEBYSCORE"></a>ZREMRANGEBYSCORE</h2><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYSCORE key min max</span><br></pre></td></tr></table></figure><h4 id="参数说明-9"><a href="#参数说明-9" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>min   有序集合score的最小取值 </li><li>max    有序集合score的最大取值<h3 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h3>移除有序集 <code>key</code> 中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间(包括等于 <code>min</code> 或 <code>max</code> )的成员。<br>自版本2.1.6开始， <code>score</code> 值等于 <code>min</code> 或 <code>max</code> 的成员也可以不包括在内，详情请参见 <a href="http://redisdoc.com/sorted_set/zrangebyscore.html#zrangebyscore" target="_blank" rel="noopener">ZRANGEBYSCORE</a> 命令。<h3 id="时间复杂度-9"><a href="#时间复杂度-9" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， <code>N</code> 为有序集的基数，而 <code>M</code> 为被移除成员的数量。<h3 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h3>被移除成员的数量。<h3 id="示例图片-9"><a href="#示例图片-9" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548212562199-eed183c1-35a1-4f1e-965b-14a90ed240f8.png#align=left&amp;display=inline&amp;height=373&amp;linkTarget=_blank&amp;name=zremrangebyscore.png&amp;originHeight=373&amp;originWidth=563&amp;size=17948&amp;width=563" alt="zremrangebyscore.png"></li></ul><hr><h2 id="ZREMRANGEBYLEX"><a href="#ZREMRANGEBYLEX" class="headerlink" title="ZREMRANGEBYLEX"></a>ZREMRANGEBYLEX</h2><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYLEX key min max</span><br></pre></td></tr></table></figure><h4 id="参数说明-10"><a href="#参数说明-10" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>min    有序集合中成员下标的起始值</li><li>max    有序集合中成员下标的结束值  <h3 id="作用-10"><a href="#作用-10" class="headerlink" title="作用"></a>作用</h3>对于一个所有成员的分值都相同的有序集合键 <code>key</code> 来说， 这个命令会移除该集合中， 成员介于 <code>min</code> 和 <code>max</code> 范围内的所有元素。<h3 id="时间复杂度-10"><a href="#时间复杂度-10" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， 其中 N 为有序集合的元素数量， 而 M 则为被移除的元素数量。<h3 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h3>整数回复：被移除的元素数量。<h3 id="示例图片-10"><a href="#示例图片-10" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548212737241-34cb7bec-2c1e-45c2-8306-a1eb96cd33a1.png#align=left&amp;display=inline&amp;height=269&amp;linkTarget=_blank&amp;name=zremrangebylex.png&amp;originHeight=269&amp;originWidth=620&amp;size=14487&amp;width=620" alt="zremrangebylex.png"></li></ul><hr><h2 id="ZREVRANGE"><a href="#ZREVRANGE" class="headerlink" title="ZREVRANGE"></a>ZREVRANGE</h2><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure><h4 id="参数说明-11"><a href="#参数说明-11" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>start    有序集合成员下标起始值</li><li>stop    有序集合成员下标结束值</li><li>[WITHSCORES]    是否返回结果集中的成员对应score值<h3 id="作用-11"><a href="#作用-11" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中，指定区间内的成员。<br>其中成员的位置按 <code>score</code> 值递减(从大到小)来排列。<br>具有相同 <code>score</code> 值的成员按字典序的逆序(<a href="http://en.wikipedia.org/wiki/Lexicographical_order#Reverse_lexicographic_order" target="_blank" rel="noopener">reverse lexicographical order</a>)排列。<br>除了成员按 <code>score</code> 值递减的次序排列这一点外， <a href="http://redisdoc.com/sorted_set/zrevrange.html#zrevrange" target="_blank" rel="noopener">ZREVRANGE</a> 命令的其他方面和 <a href="http://redisdoc.com/sorted_set/zrange.html#zrange" target="_blank" rel="noopener">ZRANGE</a> 命令一样。<h3 id="时间复杂度-11"><a href="#时间复杂度-11" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， <code>N</code> 为有序集的基数，而 <code>M</code> 为结果集的基数。<h3 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h3>指定区间内，带有 <code>score</code> 值(可选)的有序集成员的列表。<h3 id="示例图片-11"><a href="#示例图片-11" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548212927373-49b25b90-326d-4dda-8f79-213c43f59a38.png#align=left&amp;display=inline&amp;height=297&amp;linkTarget=_blank&amp;name=zrevrange.png&amp;originHeight=297&amp;originWidth=610&amp;size=12348&amp;width=610" alt="zrevrange.png"></li></ul><hr><h2 id="ZREVRANGEBYSCORE"><a href="#ZREVRANGEBYSCORE" class="headerlink" title="ZREVRANGEBYSCORE"></a>ZREVRANGEBYSCORE</h2><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</span><br></pre></td></tr></table></figure><h4 id="参数说明-12"><a href="#参数说明-12" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>max    有序集合中score的最小取值</li><li>min    有序集合中score的最大取值</li><li>[WITHSCORES]    结果集中是否返回有序集合成员对应的score值</li><li>[LIMIT offset count]    是否对返回的结果集进行数量限制<h3 id="作用-12"><a href="#作用-12" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中， <code>score</code> 值介于 <code>max</code> 和 <code>min</code> 之间(默认包括等于 <code>max</code> 或 <code>min</code> )的所有的成员。有序集成员按 <code>score</code> 值递减(从大到小)的次序排列。<br>具有相同 <code>score</code> 值的成员按字典序的逆序(<a href="http://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="noopener">reverse lexicographical order</a> )排列。<br>除了成员按 <code>score</code> 值递减的次序排列这一点外， <a href="http://redisdoc.com/sorted_set/zrevrangebyscore.html#zrevrangebyscore" target="_blank" rel="noopener">ZREVRANGEBYSCORE</a> 命令的其他方面和 <a href="http://redisdoc.com/sorted_set/zrangebyscore.html#zrangebyscore" target="_blank" rel="noopener">ZRANGEBYSCORE</a> 命令一样。<h3 id="时间复杂度-12"><a href="#时间复杂度-12" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， <code>N</code> 为有序集的基数， <code>M</code> 为结果集的基数。<h3 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h3>指定区间内，带有 <code>score</code> 值(可选)的有序集成员的列表。<h3 id="示例图片-12"><a href="#示例图片-12" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548213446201-cf42c9d8-178c-48d5-920d-792ed382a21c.png#align=left&amp;display=inline&amp;height=211&amp;linkTarget=_blank&amp;name=zrevrangebyscore.png&amp;originHeight=211&amp;originWidth=655&amp;size=10922&amp;width=655" alt="zrevrangebyscore.png"></li></ul><hr><h2 id="ZREVRANK"><a href="#ZREVRANK" class="headerlink" title="ZREVRANK"></a>ZREVRANK</h2><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANK key member</span><br></pre></td></tr></table></figure><h4 id="参数说明-13"><a href="#参数说明-13" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>member    有序集合中要查询的成员<h3 id="作用-13"><a href="#作用-13" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中成员 <code>member</code> 的排名。其中有序集成员按 <code>score</code> 值递减(从大到小)排序。<br>排名以 <code>0</code> 为底，也就是说， <code>score</code> 值最大的成员排名为 <code>0</code> 。<br>使用 <a href="http://redisdoc.com/sorted_set/zrank.html#zrank" target="_blank" rel="noopener">ZRANK</a> 命令可以获得成员按 <code>score</code> 值递增(从小到大)排列的排名。<h3 id="时间复杂度-13"><a href="#时间复杂度-13" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N))<h3 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h3>如果 <code>member</code> 是有序集 <code>key</code> 的成员，返回 <code>member</code> 的排名。<br>如果 <code>member</code> 不是有序集 <code>key</code> 的成员，返回 <code>nil</code> 。<h3 id="示例图片-13"><a href="#示例图片-13" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548213577873-10c78be0-eb88-499e-9172-61de6b9c01ab.png#align=left&amp;display=inline&amp;height=224&amp;linkTarget=_blank&amp;name=zrevrank.png&amp;originHeight=224&amp;originWidth=679&amp;size=12288&amp;width=679" alt="zrevrank.png"></li></ul><hr><h2 id="ZSCORE"><a href="#ZSCORE" class="headerlink" title="ZSCORE"></a>ZSCORE</h2><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSCORE key member</span><br></pre></td></tr></table></figure><h4 id="参数说明-14"><a href="#参数说明-14" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>member    要查询的有序集合中的成员<h3 id="作用-14"><a href="#作用-14" class="headerlink" title="作用"></a>作用</h3>返回有序集 <code>key</code> 中，成员 <code>member</code> 的 <code>score</code> 值。<br>如果 <code>member</code> 元素不是有序集 <code>key</code> 的成员，或 <code>key</code> 不存在，返回 <code>nil</code> 。<h3 id="时间复杂度-14"><a href="#时间复杂度-14" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(1)<h3 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h3><code>member</code> 成员的 <code>score</code> 值，以字符串形式表示。<h3 id="示例图片-14"><a href="#示例图片-14" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548213780395-01149e73-4c86-4c1c-bcf5-5f06fe31467f.png#align=left&amp;display=inline&amp;height=284&amp;linkTarget=_blank&amp;name=zscore.png&amp;originHeight=284&amp;originWidth=621&amp;size=15488&amp;width=621" alt="zscore.png"></li></ul><hr><h2 id="ZUNIONSTORE"><a href="#ZUNIONSTORE" class="headerlink" title="ZUNIONSTORE"></a>ZUNIONSTORE</h2><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br></pre></td></tr></table></figure><h4 id="参数说明-15"><a href="#参数说明-15" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>destination    结果集保存的目标集合</li><li>numkeys    操作集合的数量</li><li>key    要操作的有序集合的键名称</li><li>[key …]    多个有序集合的键名称</li><li>[WEIGHTS weight [weight …]]    是否在聚合之前将有序集合的成员score值乘对应的乘法因子，默认为1</li><li>[AGGREGATE SUM|MIN|MAX]    结果并集的聚合方式<h3 id="作用-15"><a href="#作用-15" class="headerlink" title="作用"></a>作用</h3>计算给定的一个或多个有序集的并集，其中给定 <code>key</code> 的数量必须以 <code>numkeys</code> 参数指定，并将该并集(结果集)储存到 <code>destination</code> 。<br>默认情况下，结果集中某个成员的 <code>score</code> 值是所有给定集下该成员 <code>score</code> 值之 _和_ 。<h4 id="WEIGHTS"><a href="#WEIGHTS" class="headerlink" title="WEIGHTS"></a><strong>WEIGHTS</strong></h4>使用 <code>WEIGHTS</code> 选项，你可以为 _每个_分别_ 指定一个乘法因子(multiplication factor)，每个给定有序集的所有成员的 <code>score</code> 值在传递给聚合函数(aggregation function)之前都要先乘以该有序集的因子。<br>如果没有指定 <code>WEIGHTS</code> 选项，乘法因子默认设置为 <code>1</code> 。<br><strong>AGGREGATE</strong><br>使用 <code>AGGREGATE</code> 选项，你可以指定并集的结果集的聚合方式。<br>默认使用的参数 <code>SUM</code> ，可以将所有集合中某个成员的 <code>score</code> 值之 _和_ 作为结果集中该成员的 <code>score</code> 值；使用参数 <code>MIN</code> ，可以将所有集合中某个成员的 _最小_ <code>score</code> 值作为结果集中该成员的 <code>score</code> 值；而参数 <code>MAX</code> 则是将所有集合中某个成员的 _最大_ <code>score</code> 值作为结果集中该成员的 <code>score</code> 值。<h3 id="时间复杂度-15"><a href="#时间复杂度-15" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)+O(M log(M))， <code>N</code> 为给定有序集基数的总和， <code>M</code> 为结果集的基数。<h3 id="返回值-15"><a href="#返回值-15" class="headerlink" title="返回值"></a>返回值</h3>保存到 <code>destination</code> 的结果集的基数。<h3 id="示例图片-15"><a href="#示例图片-15" class="headerlink" title="示例图片"></a>示例图片</h3></li><li>查询成员成绩之和</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214135873-ce165051-72c0-4897-a997-97cf47475049.png#align=left&amp;display=inline&amp;height=491&amp;linkTarget=_blank&amp;name=zunionscore.png&amp;originHeight=521&amp;originWidth=791&amp;size=27204&amp;width=746" alt="zunionscore.png"></p><ul><li>查询成员的优秀成绩</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214339905-ddcacae9-1b35-4ea4-9bab-14d2928aed6f.png#align=left&amp;display=inline&amp;height=394&amp;linkTarget=_blank&amp;name=zunionscore%20with%20max.png&amp;originHeight=466&amp;originWidth=883&amp;size=25719&amp;width=746" alt="zunionscore with max.png"></p><ul><li>查询成员的较差成绩</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214363681-3403a7a5-02b4-45ee-8ad5-30fd6e18b452.png#align=left&amp;display=inline&amp;height=409&amp;linkTarget=_blank&amp;name=zunionscore%20with%20min.png&amp;originHeight=465&amp;originWidth=848&amp;size=25867&amp;width=746" alt="zunionscore with min.png"></p><ul><li>使用乘法因子完成员工的年终奖的计算</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214396973-b7272d1a-ab44-45f8-9a4d-cce2b4355690.png#align=left&amp;display=inline&amp;height=420&amp;linkTarget=_blank&amp;name=zunionscore%20with%20weights.png&amp;originHeight=494&amp;originWidth=877&amp;size=29392&amp;width=746" alt="zunionscore with weights.png"></p><ul><li>计算出员工在每个项目拿到的年终奖的较大值与较小值</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214458995-3af31eb3-6d07-4c63-b409-7aa1b364e56a.png#align=left&amp;display=inline&amp;height=608&amp;linkTarget=_blank&amp;name=zunionscore%20with%20weights%20and%20max%20min.png&amp;originHeight=625&amp;originWidth=767&amp;size=34146&amp;width=746" alt="zunionscore with weights and max min.png"></p><hr><h2 id="ZINTERSTORE"><a href="#ZINTERSTORE" class="headerlink" title="ZINTERSTORE"></a>ZINTERSTORE</h2><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br></pre></td></tr></table></figure><h4 id="参数说明-16"><a href="#参数说明-16" class="headerlink" title="参数说明"></a>参数说明</h4><p>与ZUNIONSTORE参数意义一致</p><h3 id="作用-16"><a href="#作用-16" class="headerlink" title="作用"></a>作用</h3><p>计算给定的一个或多个有序集的交集，其中给定 <code>key</code> 的数量必须以 <code>numkeys</code> 参数指定，并将该交集(结果集)储存到 <code>destination</code> 。<br>默认情况下，结果集中某个成员的 <code>score</code> 值是所有给定集下该成员 <code>score</code> 值之和.</p><h3 id="时间复杂度-16"><a href="#时间复杂度-16" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(N<em>K)+O(M</em>log(M))， <code>N</code> 为给定 <code>key</code> 中基数最小的有序集， <code>K</code> 为给定有序集的数量， <code>M</code> 为结果集的基数。</p><h3 id="返回值-16"><a href="#返回值-16" class="headerlink" title="返回值"></a>返回值</h3><p>保存到 <code>destination</code> 的结果集的基数。</p><h3 id="示例图片-16"><a href="#示例图片-16" class="headerlink" title="示例图片"></a>示例图片</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214777821-c2dc1489-09d3-4a1c-bec5-c55d365220eb.png#align=left&amp;display=inline&amp;height=393&amp;linkTarget=_blank&amp;name=zinter.png&amp;originHeight=461&amp;originWidth=874&amp;size=22672&amp;width=746" alt="zinter.png"></p><ul><li><br></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548214814800-937a47b3-9221-4aa7-b5fc-5bc4f1a8f6d3.png#align=left&amp;display=inline&amp;height=550&amp;linkTarget=_blank&amp;name=zinter%20with%20max%20min.png&amp;originHeight=629&amp;originWidth=853&amp;size=29984&amp;width=746" alt="zinter with max min.png"></p><hr><h2 id="ZRANGEBYLEX"><a href="#ZRANGEBYLEX" class="headerlink" title="ZRANGEBYLEX"></a>ZRANGEBYLEX</h2><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYLEX key min max [LIMIT offset count]</span><br></pre></td></tr></table></figure><h4 id="参数说明-17"><a href="#参数说明-17" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>min    有序集合成员下标的起始值</li><li>max    有序集合成员下标的结束值</li><li>[LIMIT offset count]    结果集限制<h3 id="作用-17"><a href="#作用-17" class="headerlink" title="作用"></a>作用</h3>当有序集合的所有成员都具有相同的分值时， 有序集合的元素会根据成员的字典序（lexicographical ordering）来进行排序， 而这个命令则可以返回给定的有序集合键 <code>key</code> 中， 值介于 <code>min</code> 和 <code>max</code> 之间的成员。<br>如果有序集合里面的成员带有不同的分值， 那么命令返回的结果是未指定的（unspecified）。<br>命令会使用 C 语言的 <code>memcmp()</code> 函数， 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大。<br>可选的 <code>LIMIT offset count</code> 参数用于获取指定范围内的匹配元素 （就像 SQL 中的 <code>SELECT LIMIT offset count</code> 语句）。 需要注意的一点是， 如果 <code>offset</code> 参数的值非常大的话， 那么命令在返回结果之前， 需要先遍历至 <code>offset</code> 所指定的位置， 这个操作会为命令加上最多 O(N) 复杂度。<h4 id="指定范围区间"><a href="#指定范围区间" class="headerlink" title="指定范围区间"></a>指定范围区间</h4>合法的 <code>min</code> 和 <code>max</code> 参数必须包含 <code>(</code> 或者 <code>[</code> ， 其中 <code>(</code> 表示开区间（指定的值不会被包含在范围之内）， 而 <code>[</code> 则表示闭区间（指定的值会被包含在范围之内）。<br>特殊值 <code>+</code> 和 <code>-</code> 在 <code>min</code> 参数以及 <code>max</code> 参数中具有特殊的意义， 其中 <code>+</code> 表示正无限， 而 <code>-</code> 表示负无限。 因此， 向一个所有成员的分值都相同的有序集合发送命令 <code>ZRANGEBYLEX &lt;zset&gt; - +</code> ， 命令将返回有序集合中的所有元素。<h3 id="时间复杂度-17"><a href="#时间复杂度-17" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N)+M)， 其中 N 为有序集合的元素数量， 而 M 则是命令返回的元素数量。 如果 M 是一个常数（比如说，用户总是使用 <code>LIMIT</code> 参数来返回最先的 10 个元素）， 那么命令的复杂度也可以看作是 O(log(N)) 。<h3 id="返回值-17"><a href="#返回值-17" class="headerlink" title="返回值"></a>返回值</h3>数组回复：一个列表，列表里面包含了有序集合在指定范围内的成员。<h3 id="示例图片-17"><a href="#示例图片-17" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548215079415-882f04ad-0206-40b5-a476-33f3289b25aa.png#align=left&amp;display=inline&amp;height=508&amp;linkTarget=_blank&amp;name=zrangebylex.png&amp;originHeight=557&amp;originWidth=818&amp;size=27035&amp;width=746" alt="zrangebylex.png"></li></ul><hr><h2 id="ZLEXCOUNT"><a href="#ZLEXCOUNT" class="headerlink" title="ZLEXCOUNT"></a>ZLEXCOUNT</h2><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLEXCOUNT key min max</span><br></pre></td></tr></table></figure><h4 id="参数说明-18"><a href="#参数说明-18" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    有序集合的键名称</li><li>min    有序集合的成员下标起始值</li><li>max    有序集合的成员下标结束值<h3 id="作用-18"><a href="#作用-18" class="headerlink" title="作用"></a>作用</h3>对于一个所有成员的分值都相同的有序集合键 <code>key</code> 来说， 这个命令会返回该集合中， 成员介于 <code>min</code> 和 <code>max</code> 范围内的元素数量。<h3 id="时间复杂度-18"><a href="#时间复杂度-18" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(log(N))，其中 N 为有序集合包含的元素数量。<h3 id="返回值-18"><a href="#返回值-18" class="headerlink" title="返回值"></a>返回值</h3>整数回复：指定范围内的元素数量。<h3 id="示例图片-18"><a href="#示例图片-18" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548215227558-230a2b02-fbe4-4d73-997a-9f42d565481e.png#align=left&amp;display=inline&amp;height=180&amp;linkTarget=_blank&amp;name=zlexcount.png&amp;originHeight=180&amp;originWidth=622&amp;size=10625&amp;width=622" alt="zlexcount.png"></li></ul><hr><h2 id="实战案列"><a href="#实战案列" class="headerlink" title="实战案列"></a>实战案列</h2><h3 id="案列说明"><a href="#案列说明" class="headerlink" title="案列说明"></a>案列说明</h3><p>学校进行期末考试完成后部分科目成绩公布如下</p><table><thead><tr><th>姓名</th><th>英语</th><th>数学</th></tr></thead><tbody><tr><td>Alice</td><td>89</td><td>97</td></tr><tr><td>brown</td><td>91</td><td>68</td></tr><tr><td>curry</td><td>76</td><td>99</td></tr><tr><td>danny</td><td>98</td><td>97</td></tr><tr><td>jhon</td><td>89</td><td>97</td></tr><tr><td>klay</td><td>79</td><td>68</td></tr></tbody></table><p><strong>要求：</strong></p><ul><li>将学生的科目成绩分别存储在不同的有序集合中；</li><li>成绩校验后发现curry的英文成绩少计算了13分，在学生的英文成绩记录中进行更正；</li><li>计算英语成绩在90分以上的同学数量；</li><li>列出数学成绩低于80分的同学，并要求知道他们的具体分数；</li><li>将英语成绩按照从低到高的排序方式进行排列，然后将数学成绩按照从高到底的排序方式排列；</li><li>计算所有学生的英语与数学成绩的总和，并且需要根据成绩进行排名；</li><li>查询klay的数学成绩</li><li>danny英文考试作弊，移出本次的成绩清单，并重新计算学生总成绩与排名；</li><li>查询Alice的总成绩的班级排名</li></ul><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><ul><li>使用<strong>ZADD</strong>进行有序集合新增</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224405615-cba8371c-1bfc-403f-8486-aa8bf308f465.png#align=left&amp;display=inline&amp;height=518&amp;linkTarget=_blank&amp;name=1.png&amp;originHeight=518&amp;originWidth=743&amp;size=21062&amp;width=743" alt="1.png"></p><ul><li>使用 <strong>zincrby </strong>进行键的score值的变更 </li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224419988-b00a4ec5-c45b-4c61-a5ae-83f04954f918.png#align=left&amp;display=inline&amp;height=247&amp;linkTarget=_blank&amp;name=update%20curry%20English.png&amp;originHeight=247&amp;originWidth=568&amp;size=8784&amp;width=568" alt="update curry English.png"></p><ul><li>使用 <strong>zcount </strong>进行有序集合根据score值筛选并统计member数量</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224428919-7cf38bd6-beee-4f9f-abdf-0fc5f86e0646.png#align=left&amp;display=inline&amp;height=235&amp;linkTarget=_blank&amp;name=3.png&amp;originHeight=235&amp;originWidth=494&amp;size=7822&amp;width=494" alt="3.png"></p><ul><li>使用 <strong>zrangebyscore </strong>进行成绩筛选<br><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224439087-64060b18-1bd9-41fd-89d8-8caf6fcc4462.png#align=left&amp;display=inline&amp;height=299&amp;linkTarget=_blank&amp;name=4.png&amp;originHeight=299&amp;originWidth=570&amp;size=10658&amp;width=570" alt="4.png"></li><li><strong>zrevrange</strong>将有序集合按照score倒序排列</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224603426-24a46f07-f296-4d03-a180-21df9e3794d0.png#align=left&amp;display=inline&amp;height=418&amp;linkTarget=_blank&amp;name=5.png&amp;originHeight=418&amp;originWidth=579&amp;size=13222&amp;width=579" alt="5.png"></p><ul><li>使用<strong>zunionscore</strong>求出学生的成绩总和</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224657354-8d08b89d-5801-4052-bf54-4e3380eaf785.png#align=left&amp;display=inline&amp;height=252&amp;linkTarget=_blank&amp;name=6.png&amp;originHeight=252&amp;originWidth=532&amp;size=9078&amp;width=532" alt="6.png"></p><ul><li>使用<strong>zscore</strong>查询member的score值</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224723720-78613ec4-f226-432a-8377-a43c514acd55.png#align=left&amp;display=inline&amp;height=60&amp;linkTarget=_blank&amp;name=7.png&amp;originHeight=60&amp;originWidth=413&amp;size=2552&amp;width=413" alt="7.png"></p><ul><li><strong>zrem</strong>删除有序集合中的member</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224777107-9de35135-5906-484a-8660-68198f73d2fa.png#align=left&amp;display=inline&amp;height=199&amp;linkTarget=_blank&amp;name=8.png&amp;originHeight=199&amp;originWidth=427&amp;size=6948&amp;width=427" alt="8.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224804009-5bc73e58-5e47-422c-8769-1b12f84d8217.png#align=left&amp;display=inline&amp;height=197&amp;linkTarget=_blank&amp;name=8%EF%BC%882%EF%BC%89.png&amp;originHeight=197&amp;originWidth=520&amp;size=8891&amp;width=520" alt="8（2）.png"></p><ul><li><strong>zrank</strong>查询元素在有序集合中的排名</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548224834011-54072867-cd8c-4ed3-a3d7-a71b8c904374.png#align=left&amp;display=inline&amp;height=164&amp;linkTarget=_blank&amp;name=9.png&amp;originHeight=164&amp;originWidth=432&amp;size=6017&amp;width=432" alt="9.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ZADD&quot;&gt;&lt;a href=&quot;#ZADD&quot; class=&quot;headerlink&quot; title=&quot;ZADD&quot;&gt;&lt;/a&gt;ZADD&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ZADD key score member [[score member] [score member] ...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;参数说明&quot;&gt;&lt;a href=&quot;#参数说明&quot; class=&quot;headerlink&quot; title=&quot;参数说明&quot;&gt;&lt;/a&gt;参数说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;key 要添加的有序集合的键名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;score 要添加的有序集合成员的分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;member 要添加到有序集合中的成员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[score member] 表示可以同时添加多个成员与对应分支的键值对&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>redis基础学习（二）Set集合</title>
    <link href="http://yoursite.com/2019/01/23/nosql/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2019-01-23-redis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2019/01/23/nosql/redis/数据结构/2019-01-23-redis基础学习(二)/</id>
    <published>2019-01-23T13:38:09.000Z</published>
    <updated>2019-10-27T13:57:52.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SADD"><a href="#SADD" class="headerlink" title="SADD"></a>SADD</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SADD key member [member ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    集合的键名称</li><li>member    要添加到集合中的成员</li><li>[member …]    可以同时添加多个<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3>将一个或多个 <code>member</code> 元素加入到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略。<br>假如 <code>key</code> 不存在，则创建一个只包含 <code>member</code> 元素作成员的集合。<br>当 <code>key</code> 不是集合类型时，返回一个错误。<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 是被添加的元素的数量。</li></ul><a id="more"></a><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>被添加到集合中的新元素的数量，不包括被忽略的元素。</p><h3 id="示例图片"><a href="#示例图片" class="headerlink" title="示例图片"></a>示例图片</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548226307394-493b5d76-0d41-46a8-b399-1a179f01cbf6.png#align=left&amp;display=inline&amp;height=277&amp;linkTarget=_blank&amp;name=sadd.png&amp;originHeight=277&amp;originWidth=733&amp;size=17751&amp;width=733" alt="sadd.png"></p><hr><h2 id="SCARD"><a href="#SCARD" class="headerlink" title="SCARD"></a>SCARD</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCARD key</span><br></pre></td></tr></table></figure><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key     集合的键名称<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3>返回集合 <code>key</code> 的基数(集合中元素的数量)。<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(1)<h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3>集合的基数。<br>当 <code>key</code> 不存在时，返回 <code>0</code> 。<h3 id="示例图片-1"><a href="#示例图片-1" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548226461656-210462b6-9e41-46e0-a875-5f7c9818ac2f.png#align=left&amp;display=inline&amp;height=138&amp;linkTarget=_blank&amp;name=scard.png&amp;originHeight=151&amp;originWidth=816&amp;size=13507&amp;width=746" alt="scard.png"></li></ul><hr><h2 id="SDIFF"><a href="#SDIFF" class="headerlink" title="SDIFF"></a>SDIFF</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDIFF key [key ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    要进行比较的第一个集合</li><li>[key …]    剩余需要与第一个集合进行比较的集合<h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3>返回由第一个集和所有连续集之间的差异产生的集合的成员。<h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 是所有给定集合的成员数量之和。<h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3>一个包含差集成员的列表。<h3 id="示例图片-2"><a href="#示例图片-2" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548226758315-5e1daf91-a6af-4dca-b65e-98fbd9ad3e26.png#align=left&amp;display=inline&amp;height=421&amp;linkTarget=_blank&amp;name=sdiff.png&amp;originHeight=520&amp;originWidth=921&amp;size=37665&amp;width=746" alt="sdiff.png"></li></ul><hr><h2 id="SDIFFSTORE"><a href="#SDIFFSTORE" class="headerlink" title="SDIFFSTORE"></a>SDIFFSTORE</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDIFFSTORE destination key [key ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>destination    结果集要存储的集合名称</li><li>key    要比较的第一个集合</li><li>[key …]    要比较的剩余连续集合<h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3>这个命令的作用和 <a href="http://redisdoc.com/set/sdiff.html#sdiff" target="_blank" rel="noopener">SDIFF</a> 类似，但它将结果保存到 <code>destination</code> 集合，而不是简单地返回结果集。<br>如果 <code>destination</code> 集合已经存在，则将其覆盖。<br><code>destination</code> 可以是 <code>key</code> 本身。<h3 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 是所有给定集合的成员数量之和。<h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3>结果集中的元素数量。<h3 id="示例图片-3"><a href="#示例图片-3" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548226860821-506e2038-b849-43ab-a2a4-362fc71d1b18.png#align=left&amp;display=inline&amp;height=97&amp;linkTarget=_blank&amp;name=sdiffstore.png&amp;originHeight=105&amp;originWidth=805&amp;size=8795&amp;width=746" alt="sdiffstore.png"></li></ul><hr><h2 id="SINTER"><a href="#SINTER" class="headerlink" title="SINTER"></a>SINTER</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SINTER key [key ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    第一个要操作的集合</li><li>[key …]    剩余的连续集合<h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3>返回一个集合的全部成员，该集合是所有给定集合的交集。<br>不存在的 <code>key</code> 被视为空集。<br>当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。<h3 id="时间复杂度-4"><a href="#时间复杂度-4" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N * M)， <code>N</code> 为给定集合当中基数最小的集合， <code>M</code> 为给定集合的个数。<h3 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h3>交集成员的列表。<h3 id="示例图片-4"><a href="#示例图片-4" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548226960282-54c1f84e-8275-4023-936c-4a9bd85a18a1.png#align=left&amp;display=inline&amp;height=397&amp;linkTarget=_blank&amp;name=sinter.png&amp;originHeight=450&amp;originWidth=846&amp;size=33727&amp;width=746" alt="sinter.png"></li></ul><hr><h2 id="SINTERSTORE"><a href="#SINTERSTORE" class="headerlink" title="SINTERSTORE"></a>SINTERSTORE</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SINTERSTORE destination key [key ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>destination    结果集保存的集合名称</li><li>key    操作的第一个集合</li><li>[key …]    剩余的连续集合<h3 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h3>这个命令类似于 <a href="http://redisdoc.com/set/sinter.html#sinter" target="_blank" rel="noopener">SINTER</a> 命令，但它将结果保存到 <code>destination</code> 集合，而不是简单地返回结果集。<br>如果 <code>destination</code> 集合已经存在，则将其覆盖。<br><code>destination</code> 可以是 <code>key</code> 本身。<h3 id="时间复杂度-5"><a href="#时间复杂度-5" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N * M)， <code>N</code> 为给定集合当中基数最小的集合， <code>M</code> 为给定集合的个数。<h3 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h3>结果集中的成员数量。<h3 id="示例图片-5"><a href="#示例图片-5" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548227077066-ec454b83-7c17-49c1-b849-ab854c7a4a85.png#align=left&amp;display=inline&amp;height=90&amp;linkTarget=_blank&amp;name=sinterstore.png&amp;originHeight=90&amp;originWidth=740&amp;size=8004&amp;width=740" alt="sinterstore.png"></li></ul><hr><h2 id="SISMEMBER"><a href="#SISMEMBER" class="headerlink" title="SISMEMBER"></a>SISMEMBER</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SISMEMBER key member</span><br></pre></td></tr></table></figure><h4 id="参数说明-6"><a href="#参数说明-6" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    集合的键名称</li><li>member    要查询的成员<h3 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h3>判断 <code>member</code> 元素是否集合 <code>key</code> 的成员。<h3 id="时间复杂度-6"><a href="#时间复杂度-6" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(1)<h3 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h3>如果 <code>member</code> 元素是集合的成员，返回 <code>1</code> 。<br>如果 <code>member</code> 元素不是集合的成员，或 <code>key</code> 不存在，返回 <code>0</code> 。<h3 id="示例图片-6"><a href="#示例图片-6" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548227703754-98d32404-3fcc-40b8-ad22-1a464a5a740c.png#align=left&amp;display=inline&amp;height=148&amp;linkTarget=_blank&amp;name=sismember.png&amp;originHeight=148&amp;originWidth=608&amp;size=11324&amp;width=608" alt="sismember.png"></li></ul><hr><h2 id="SMEMBERS"><a href="#SMEMBERS" class="headerlink" title="SMEMBERS"></a>SMEMBERS</h2><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure><h4 id="参数说明-7"><a href="#参数说明-7" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    集合的键名称<h3 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h3>返回集合 <code>key</code> 中的所有成员。<br>不存在的 <code>key</code> 被视为空集合。<h3 id="时间复杂度-7"><a href="#时间复杂度-7" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 为集合的基数。<h3 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h3>集合中的所有成员。<h3 id="示例图片-7"><a href="#示例图片-7" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548228022188-bc767c3e-2a3a-41f0-8f74-8f304ac52981.png#align=left&amp;display=inline&amp;height=148&amp;linkTarget=_blank&amp;name=smembers.png&amp;originHeight=148&amp;originWidth=697&amp;size=13778&amp;width=697" alt="smembers.png"></li></ul><hr><h2 id="SMOVE"><a href="#SMOVE" class="headerlink" title="SMOVE"></a>SMOVE</h2><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMOVE <span class="built_in">source</span> destination member</span><br></pre></td></tr></table></figure><h4 id="参数说明-8"><a href="#参数说明-8" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>source    元素所在的集合</li><li>destination    元素要移动到的目标集合</li><li>member    要移动的集合元素<h3 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h3>将 <code>member</code> 元素从 <code>source</code> 集合移动到 <code>destination</code> 集合。<br><a href="http://redisdoc.com/set/smove.html#smove" target="_blank" rel="noopener">SMOVE</a> 是原子性操作。<br>如果 <code>source</code> 集合不存在或不包含指定的 <code>member</code> 元素，则 <a href="http://redisdoc.com/set/smove.html#smove" target="_blank" rel="noopener">SMOVE</a> 命令不执行任何操作，仅返回 <code>0</code> 。否则， <code>member</code> 元素从 <code>source</code> 集合中被移除，并添加到 <code>destination</code> 集合中去。<br>当 <code>destination</code> 集合已经包含 <code>member</code> 元素时， <a href="http://redisdoc.com/set/smove.html#smove" target="_blank" rel="noopener">SMOVE</a> 命令只是简单地将 <code>source</code> 集合中的 <code>member</code> 元素删除。<br>当 <code>source</code> 或 <code>destination</code> 不是集合类型时，返回一个错误。<h3 id="时间复杂度-8"><a href="#时间复杂度-8" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(1)<h3 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h3>如果 <code>member</code> 元素被成功移除，返回 <code>1</code> 。<br>如果 <code>member</code> 元素不是 <code>source</code> 集合的成员，并且没有任何操作对 <code>destination</code> 集合执行，那么返回 <code>0</code> 。<h3 id="示例图片-8"><a href="#示例图片-8" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548228235926-5dd9be28-aa30-4f17-ab30-e163c2fcd903.png#align=left&amp;display=inline&amp;height=470&amp;linkTarget=_blank&amp;name=smove.png&amp;originHeight=509&amp;originWidth=808&amp;size=43707&amp;width=746" alt="smove.png"></li></ul><hr><h2 id="SPOP"><a href="#SPOP" class="headerlink" title="SPOP"></a>SPOP</h2><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SPOP key</span><br></pre></td></tr></table></figure><h4 id="参数说明-9"><a href="#参数说明-9" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    操作的集合的键名称<h3 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h3>移除并返回集合中的一个随机元素。<br>如果只想获取一个随机元素，但不想该元素从集合中被移除的话，可以使用 <a href="http://redisdoc.com/set/srandmember.html#srandmember" target="_blank" rel="noopener">SRANDMEMBER</a> 命令。<h3 id="时间复杂度-9"><a href="#时间复杂度-9" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(1)<h3 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h3>被移除的随机元素。<br>当 <code>key</code> 不存在或 <code>key</code> 是空集时，返回 <code>nil</code> 。<h3 id="示例图片-9"><a href="#示例图片-9" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548250094094-099596fa-8f5e-43e2-a6e8-bbfc45551150.png#align=left&amp;display=inline&amp;height=147&amp;linkTarget=_blank&amp;name=spop.png&amp;originHeight=147&amp;originWidth=589&amp;size=8714&amp;width=589" alt="spop.png"></li></ul><hr><h2 id="SRANDMEMBER"><a href="#SRANDMEMBER" class="headerlink" title="SRANDMEMBER"></a>SRANDMEMBER</h2><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRANDMEMBER key [count]</span><br></pre></td></tr></table></figure><h4 id="参数说明-10"><a href="#参数说明-10" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    集合的键名称</li><li>[count]    要返回的键数量<h3 id="作用-10"><a href="#作用-10" class="headerlink" title="作用"></a>作用</h3>如果命令执行时，只提供了 <code>key</code> 参数，那么返回集合中的一个随机元素。<br>从 Redis 2.6 版本开始， <a href="http://redisdoc.com/set/srandmember.html#srandmember" target="_blank" rel="noopener">SRANDMEMBER</a> 命令接受可选的 <code>count</code> 参数：</li><li>如果 <code>count</code> 为正数，且小于集合基数，那么命令返回一个包含 <code>count</code> 个元素的数组，数组中的元素<strong>各不相同</strong>。如果 <code>count</code> 大于等于集合基数，那么返回整个集合。</li><li>如果 <code>count</code> 为负数，那么命令返回一个数组，数组中的元素<strong>可能会重复出现多次</strong>，而数组的长度为 <code>count</code> 的绝对值。</li></ul><p>该操作和 <a href="http://redisdoc.com/set/spop.html#spop" target="_blank" rel="noopener">SPOP</a> 相似，但 <a href="http://redisdoc.com/set/spop.html#spop" target="_blank" rel="noopener">SPOP</a> 将随机元素从集合中移除并返回，而 <a href="http://redisdoc.com/set/srandmember.html#srandmember" target="_blank" rel="noopener">SRANDMEMBER</a> 则仅仅返回随机元素，而不对集合进行任何改动。</p><h3 id="时间复杂度-10"><a href="#时间复杂度-10" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>只提供 <code>key</code> 参数时为 O(1) 。<br>如果提供了 <code>count</code> 参数，那么为 O(N) ，N 为返回数组的元素个数。</p><h3 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h3><p>只提供 <code>key</code> 参数时，返回一个元素；如果集合为空，返回 <code>nil</code> 。<br>如果提供了 <code>count</code> 参数，那么返回一个数组；如果集合为空，返回空数组。</p><h3 id="示例图片-10"><a href="#示例图片-10" class="headerlink" title="示例图片"></a>示例图片</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548228508172-fa063103-fb85-4218-9cb0-b8b93adef12d.png#align=left&amp;display=inline&amp;height=392&amp;linkTarget=_blank&amp;name=srandmember.png&amp;originHeight=421&amp;originWidth=802&amp;size=31982&amp;width=746" alt="srandmember.png"></p><hr><h2 id="SREM"><a href="#SREM" class="headerlink" title="SREM"></a>SREM</h2><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SREM key member [member ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-11"><a href="#参数说明-11" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    集合的键名称</li><li>member    要删除的集合成员</li><li>[member …]    可同时删除多个<h3 id="作用-11"><a href="#作用-11" class="headerlink" title="作用"></a>作用</h3>移除集合 <code>key</code> 中的一个或多个 <code>member</code> 元素，不存在的 <code>member</code> 元素会被忽略。<br>当 <code>key</code> 不是集合类型，返回一个错误。<h3 id="时间复杂度-11"><a href="#时间复杂度-11" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 为给定 <code>member</code> 元素的数量。<h3 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h3>被成功移除的元素的数量，不包括被忽略的元素。<h3 id="示例图片-11"><a href="#示例图片-11" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548228606623-3cae9cf7-3dee-4967-a9af-49c96d2f93b7.png#align=left&amp;display=inline&amp;height=208&amp;linkTarget=_blank&amp;name=srem.png&amp;originHeight=208&amp;originWidth=560&amp;size=15054&amp;width=560" alt="srem.png"></li></ul><hr><h2 id="SUNION"><a href="#SUNION" class="headerlink" title="SUNION"></a>SUNION</h2><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUNION key [key ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-12"><a href="#参数说明-12" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>key    要操作的第一个集合</li><li>[key …]    剩余的连续集合<h3 id="作用-12"><a href="#作用-12" class="headerlink" title="作用"></a>作用</h3>返回一个集合的全部成员，该集合是所有给定集合的并集。<br>不存在的 <code>key</code> 被视为空集。<h3 id="时间复杂度-12"><a href="#时间复杂度-12" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 是所有给定集合的成员数量之和。<h3 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h3>并集成员的列表。<h3 id="示例图片-12"><a href="#示例图片-12" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548228690972-1f1ef6bf-1bc6-40a1-b9b1-3cbbc30e152a.png#align=left&amp;display=inline&amp;height=267&amp;linkTarget=_blank&amp;name=sunion.png&amp;originHeight=272&amp;originWidth=760&amp;size=20694&amp;width=746" alt="sunion.png"></li></ul><hr><h2 id="SUNIONSTORE"><a href="#SUNIONSTORE" class="headerlink" title="SUNIONSTORE"></a>SUNIONSTORE</h2><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUNIONSTORE destination key [key ...]</span><br></pre></td></tr></table></figure><h4 id="参数说明-13"><a href="#参数说明-13" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>destination    结果集保存的目标集合</li><li>key    要操作的第一个集合</li><li>[key …]    剩余的连续集合<h3 id="作用-13"><a href="#作用-13" class="headerlink" title="作用"></a>作用</h3>这个命令类似于 <a href="http://redisdoc.com/set/sunion.html#sunion" target="_blank" rel="noopener">SUNION</a> 命令，但它将结果保存到 <code>destination</code> 集合，而不是简单地返回结果集。<br>如果 <code>destination</code> 已经存在，则将其覆盖。<br><code>destination</code> 可以是 <code>key</code> 本身。<h3 id="时间复杂度-13"><a href="#时间复杂度-13" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>O(N)， <code>N</code> 是所有给定集合的成员数量之和。<h3 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h3>结果集中的元素数量。<h3 id="示例图片-13"><a href="#示例图片-13" class="headerlink" title="示例图片"></a>示例图片</h3><img src="https://cdn.nlark.com/yuque/0/2019/png/248005/1548228773366-f47ec759-9f3f-4921-9e2a-5b386153654e.png#align=left&amp;display=inline&amp;height=115&amp;linkTarget=_blank&amp;name=sunionstore.png&amp;originHeight=115&amp;originWidth=719&amp;size=7762&amp;width=719" alt="sunionstore.png"></li></ul><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">redis命令参考</a></p></li><li><p><a href="https://redis.io/commands" target="_blank" rel="noopener">redis commands</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SADD&quot;&gt;&lt;a href=&quot;#SADD&quot; class=&quot;headerlink&quot; title=&quot;SADD&quot;&gt;&lt;/a&gt;SADD&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SADD key member [member ...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;参数说明&quot;&gt;&lt;a href=&quot;#参数说明&quot; class=&quot;headerlink&quot; title=&quot;参数说明&quot;&gt;&lt;/a&gt;参数说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;key    集合的键名称&lt;/li&gt;
&lt;li&gt;member    要添加到集合中的成员&lt;/li&gt;
&lt;li&gt;[member …]    可以同时添加多个&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h3&gt;将一个或多个 &lt;code&gt;member&lt;/code&gt; 元素加入到集合 &lt;code&gt;key&lt;/code&gt; 当中，已经存在于集合的 &lt;code&gt;member&lt;/code&gt; 元素将被忽略。&lt;br&gt;假如 &lt;code&gt;key&lt;/code&gt; 不存在，则创建一个只包含 &lt;code&gt;member&lt;/code&gt; 元素作成员的集合。&lt;br&gt;当 &lt;code&gt;key&lt;/code&gt; 不是集合类型时，返回一个错误。&lt;h3 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h3&gt;O(N)， &lt;code&gt;N&lt;/code&gt; 是被添加的元素的数量。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis基础学习（一）</title>
    <link href="http://yoursite.com/2019/01/06/nosql/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2019-01-06-redis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/01/06/nosql/redis/数据结构/2019-01-06-redis基础学习(一)/</id>
    <published>2019-01-06T14:30:09.000Z</published>
    <updated>2019-10-27T13:57:52.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介安装"><a href="#简介安装" class="headerlink" title="简介安装"></a>简介安装</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong><a href="http://www.redis.net.cn/" target="_blank" rel="noopener">redis</a></strong>是一种使用内存作为存储介质的NoSQL型数据库</p><h3 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h3><ul><li><p>缓存常用不常变数据，减少与数据库的交互，提高数据的访问速度</p><p>关系型数据库（mysql等支持的并发访问量较少，而redis支持的并发访问量则成倍增加）</p></li><li><p>分布式锁（setnx,incr）</p></li><li><p>pub/sub模式 </p></li></ul><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong><a href="https://blog.geekerit.com/2018/11/03/2018-11-03-centos7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEredis4/" target="_blank" rel="noopener">centos7安装配置redis4</a></strong></p><hr><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="set操作"><a href="#set操作" class="headerlink" title="set操作"></a>set操作</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>​    将<code>value</code>值关联到<code>key</code>上</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><p>如果key已经关联有其他value，则SET操作会覆盖原有值；</p></li><li><p>如果key原来存在过期时间，当SET操作执行后过期时间将被清除；</p></li></ul><h5 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h5><ul><li>设置键值的同时设置键过期时间</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间单位为秒</span></span><br><span class="line">SET key value EX second</span><br><span class="line"><span class="comment"># 时间单位为毫秒</span></span><br><span class="line">SET key value PX millisecond</span><br></pre></td></tr></table></figure><ul><li>新增键值(键不存在时才会设置)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value NX</span><br></pre></td></tr></table></figure><ul><li>覆盖键值(键存在时才会设置)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value XX</span><br></pre></td></tr></table></figure><hr><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STRLEN key</span><br></pre></td></tr></table></figure><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p>​    返回 <code>key</code> 所储存的字符串值的长度。key不存在时返回长度为0</p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><p>​    当 <code>key</code> 储存的不是字符串值时，返回一个错误。</p><p><img src="http://image.chengnanhuakai.com/image/blog/redis/redis%20strlen%E5%91%BD%E4%BB%A4.png-geekerit" alt></p><hr><h4 id="字符串追加"><a href="#字符串追加" class="headerlink" title="字符串追加"></a>字符串追加</h4><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPEND key value</span><br></pre></td></tr></table></figure><h5 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h5><p>​    如果 <code>key</code> 已经存在并且是一个字符串， <a href="http://doc.redisfans.com/string/append.html#append" target="_blank" rel="noopener">APPEND</a> 命令将 <code>value</code> 追加到 <code>key</code> 原来的值的末尾。</p><p>​    如果 <code>key</code> 不存在， <a href="http://doc.redisfans.com/string/append.html#append" target="_blank" rel="noopener">APPEND</a> 就简单地将给定 <code>key</code> 设为 <code>value</code> ，就像执行 <code>SET key value</code> 一样。</p><p><img src="http://image.chengnanhuakai.com/image/blog/redis/append%E5%91%BD%E4%BB%A4.png-geekerit" alt></p><hr><h4 id="字符串覆盖"><a href="#字符串覆盖" class="headerlink" title="字符串覆盖"></a>字符串覆盖</h4><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETRANGE key offset value</span><br></pre></td></tr></table></figure><h5 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h5><ul><li><p>用 <code>value</code> 参数覆写(overwrite)给定 <code>key</code> 所储存的字符串值，从偏移量 <code>offset</code> 开始。</p></li><li><p>不存在的 <code>key</code> 当作空白字符串处理。</p></li><li><p><a href="http://doc.redisfans.com/string/setrange.html#setrange" target="_blank" rel="noopener">SETRANGE</a> 命令会确保字符串足够长以便将 <code>value</code> 设置在指定的偏移量上，如果给定 <code>key</code> 原来储存的字符串长度比偏移量小(比如字符串只有 <code>5</code> 个字符长，但你设置的 <code>offset</code> 是 <code>10</code> )，那么原字符和偏移量之间的空白将用零字节(zerobytes, <code>&quot;\x00&quot;</code> )来填充。</p></li></ul><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>你能使用的最大偏移量是 2^29-1(536870911) ，因为 Redis 字符串的大小被限制在 512 兆(megabytes)以内。如果你需要使用比这更大的空间，你可以使用多个 <code>key</code> 。</li></ul><p><img src="http://image.chengnanhuakai.com/image/blog/redis/String%20SETRANGE%E5%91%BD%E4%BB%A4.png-geekerit" alt></p><hr><h4 id="获取字符串子串"><a href="#获取字符串子串" class="headerlink" title="获取字符串子串"></a>获取字符串子串</h4><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETRANGE key start end</span><br></pre></td></tr></table></figure><h5 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h5><ul><li><p>返回 <code>key</code> 中字符串值的子字符串，字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定(包括 <code>start</code> 和 <code>end</code> 在内)。</p></li><li><p>负数偏移量表示从字符串最后开始计数， <code>-1</code> 表示最后一个字符， <code>-2</code> 表示倒数第二个，以此类推。</p></li><li><p><a href="http://doc.redisfans.com/string/getrange.html#getrange" target="_blank" rel="noopener">GETRANGE</a> 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求。</p></li></ul><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>​    该操作只支持正向获取子串，不支持回绕操作。例如，你可以获取从0-4下标的子串，但是不能获取从4-2下标的子串。</p><p><img src="http://image.chengnanhuakai.com/image/blog/redis/String%20GETRANGE%E5%91%BD%E4%BB%A4.png-geekerit" alt></p><hr><h4 id="数值增减"><a href="#数值增减" class="headerlink" title="数值增减"></a>数值增减</h4><table><thead><tr><th>命令</th><th>语法</th><th>作用</th><th>注意事项</th></tr></thead><tbody><tr><td>INCR</td><td>INCR key</td><td>将 <code>key</code> 中储存的数字值增一。</td><td>如果 <code>key</code> 不存在，那么 <code>key</code> 的值会先被初始化为 <code>0</code> ，然后再执行 <a href="http://doc.redisfans.com/string/incr.html#incr" target="_blank" rel="noopener">INCR</a> 操作。如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。本操作的值限制在 64 位(bit)有符号数字表示之内。</td></tr><tr><td>INCRBY</td><td>INCRBY key increment</td><td>将 <code>key</code> 所储存的值加上增量 <code>increment</code> 。</td><td>同上</td></tr><tr><td>INCRBYFLOAT</td><td>INCRBYFLOAT key increment</td><td>为 <code>key</code> 中所储存的值加上浮点数增量 <code>increment</code> 。</td><td></td></tr><tr><td>DECR</td><td>DECR key</td><td>将 <code>key</code> 中储存的数字值减一。</td><td>同上</td></tr><tr><td>DECRBY</td><td>DECRBY key decrement</td><td>将 <code>key</code> 所储存的值减去减量 <code>decrement</code> 。</td><td>同上</td></tr></tbody></table><p><img src="http://image.chengnanhuakai.com/image/blog/redis/String%20%E5%A2%9E%E5%87%8F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.png-geekerit" alt></p><hr><h2 id="String实战"><a href="#String实战" class="headerlink" title="String实战"></a>String实战</h2><ul><li><p>get，set命令：常用于数据缓存，与关系型数据库结合使用，存储数据时同时存储在redis与关系型数据库，取值时首先从redis中进行获取，减少与数据库的交互，提高数据的访问速度。</p></li><li><p>setnx:常用于分布式锁，数据不存在时才新增</p></li><li><p>incr:秒杀场景</p></li><li><p>setbit:签到功能，权限分配等</p></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介安装&quot;&gt;&lt;a href=&quot;#简介安装&quot; class=&quot;headerlink&quot; title=&quot;简介安装&quot;&gt;&lt;/a&gt;简介安装&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.redis.net.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis&lt;/a&gt;&lt;/strong&gt;是一种使用内存作为存储介质的NoSQL型数据库&lt;/p&gt;
&lt;h3 id=&quot;常用场景&quot;&gt;&lt;a href=&quot;#常用场景&quot; class=&quot;headerlink&quot; title=&quot;常用场景&quot;&gt;&lt;/a&gt;常用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缓存常用不常变数据，减少与数据库的交互，提高数据的访问速度&lt;/p&gt;
&lt;p&gt;关系型数据库（mysql等支持的并发访问量较少，而redis支持的并发访问量则成倍增加）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分布式锁（setnx,incr）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pub/sub模式 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Springboot集成七牛云搭建自己的免费图床</title>
    <link href="http://yoursite.com/2018/12/15/framework/springboot/2018-12-15-%E5%9F%BA%E4%BA%8E%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%BF%E7%94%A8Spring%20Boot%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yoursite.com/2018/12/15/framework/springboot/2018-12-15-基于七牛云使用Spring Boot实现自己的免费图床/</id>
    <published>2018-12-15T07:50:09.000Z</published>
    <updated>2019-10-27T13:57:52.789Z</updated>
    
    <content type="html"><![CDATA[<p>大家在写markdown的时候时常会用到上传图片的问题，本人使用的是七牛云做图片存储，每月的免费存储流量足够个人笔记使用，下边简单总结下我使用springboot基于七牛云搭建自己的免费图床的步骤，只需要修改关键参数即可体验。</p><a id="more"></a><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/AarynArwin/springboot-image.git" target="_blank" rel="noopener">项目地址</a></h4><h4 id="体验流程"><a href="#体验流程" class="headerlink" title="体验流程"></a>体验流程</h4><h5 id="1-开通自己的七牛云的账号并进行域名配置等操作，具体操作参照七牛云文档"><a href="#1-开通自己的七牛云的账号并进行域名配置等操作，具体操作参照七牛云文档" class="headerlink" title="1.开通自己的七牛云的账号并进行域名配置等操作，具体操作参照七牛云文档"></a>1.开通自己的七牛云的账号并进行域名配置等操作，具体操作参照<a href="https://www.qiniu.com/?hmsr=baidu&amp;hmpl=SEM&amp;hmcu=pinzhuan_title&amp;hmkw=&amp;hmci=" target="_blank" rel="noopener">七牛云文档</a></h5><h5 id="2-下载项目到本地修改配置后启动项目查看效果"><a href="#2-下载项目到本地修改配置后启动项目查看效果" class="headerlink" title="2.下载项目到本地修改配置后启动项目查看效果"></a>2.下载项目到本地修改配置后启动项目查看效果</h5><table><thead><tr><th>需修改参数</th><th>包路径</th><th>参数介绍</th></tr></thead><tbody><tr><td>AK</td><td>constants</td><td>七牛云AK</td></tr><tr><td>SK</td><td>constants</td><td>是否</td></tr><tr><td>BUCKET</td><td>constants</td><td>空间名称</td></tr><tr><td>IMAGE_URL_HTTP_VALUE</td><td>constants</td><td>个人配置的空间域名</td></tr><tr><td>IMAGE_URL_HTTP_VALUE_SUFFIX</td><td>constants</td><td>七牛云开启原图保护的间隔符与后缀，非必须</td></tr><tr><td>logback.xml</td><td>项目根路径下</td><td>修改为自己的本地文件夹的路径即可，否则项目启动可能会报错</td></tr></tbody></table><p><img src="http://image.geekerit.com/image/blog/qiniuyun/%E6%9F%A5%E7%9C%8B%E4%B8%83%E7%89%9B%E4%BA%91%E5%AF%86%E9%92%A5.png-geekerit" alt></p><h5 id="3-启动项目并访问地址进行上传"><a href="#3-启动项目并访问地址进行上传" class="headerlink" title="3.启动项目并访问地址进行上传"></a>3.启动项目并访问地址进行上传</h5><p>访问路径：localhost:8888</p><p>上传成功后即可获取图片地址，直接复制图片路径访问</p><p><img src="http://image.geekerit.com/image/blog/qiniuyun/%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88.png-geekerit" alt></p><p><img src="http://image.geekerit.com/image/blog/qiniuyun/%E7%BB%93%E6%9E%9C%E9%A2%84%E8%A7%88.png-geekerit" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家在写markdown的时候时常会用到上传图片的问题，本人使用的是七牛云做图片存储，每月的免费存储流量足够个人笔记使用，下边简单总结下我使用springboot基于七牛云搭建自己的免费图床的步骤，只需要修改关键参数即可体验。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Springboot" scheme="http://yoursite.com/tags/Springboot/"/>
    
      <category term="七牛云" scheme="http://yoursite.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="图床" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Springboot集成阿里云短信服务</title>
    <link href="http://yoursite.com/2018/12/13/framework/springboot/2018-12-13-Spring%20Boot%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/12/13/framework/springboot/2018-12-13-Spring Boot集成阿里云短信服务/</id>
    <published>2018-12-13T09:25:09.000Z</published>
    <updated>2019-10-27T13:57:52.789Z</updated>
    
    <content type="html"><![CDATA[<p>Some are born great, some achieve greatness, and some have greatness thrust upon them.        有些人天生不凡，有些人后来获得卓越，还有些人被迫伟大。</p><h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h3><ul><li>工具：idea2018.3</li><li>Springboot版本：2.1.1</li><li>JDK版本：1.8</li><li>构建工具：Maven</li><li>API展示：Swagger2</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    互联网项目离不开短信服务，无论是日常的登录验证码或者用户相关的操作以及营销活动，都需要为用户发送短信，本项目为最初始版本的springboot集成阿里云短信服务的demo，只需要下载到本地修改响应开发参数后即可运行，项目的局限性以及优化之后会总结并更新。</p><a id="more"></a><h3 id="使用指引"><a href="#使用指引" class="headerlink" title="使用指引"></a>使用指引</h3><h5 id="1-阿里云短信服务使用指引"><a href="#1-阿里云短信服务使用指引" class="headerlink" title="1.阿里云短信服务使用指引"></a>1.<a href="https://help.aliyun.com/document_detail/59210.html?spm=5176.12207334.0.0.155e1cbea6BkkD" target="_blank" rel="noopener">阿里云短信服务使用指引</a></h5><h5 id="2-根据指引开通服务后开始编写服务代码"><a href="#2-根据指引开通服务后开始编写服务代码" class="headerlink" title="2.根据指引开通服务后开始编写服务代码"></a>2.根据指引开通服务后开始编写服务代码</h5><h5 id="3-添加maven依赖"><a href="#3-添加maven依赖" class="headerlink" title="3.添加maven依赖"></a>3.添加maven依赖</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--阿里云短信通知依赖--&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.aliyun/aliyun-java-sdk-core --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.7.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--阿里云短信依赖json--&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.json/json --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.json&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;json&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;20180130&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="4-项目目录结构介绍"><a href="#4-项目目录结构介绍" class="headerlink" title="4.项目目录结构介绍"></a>4.项目目录结构介绍</h5><p><img src="http://image.geekerit.com/image/blog/springboot/sms/%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D.png" alt></p><h5 id="5-运行需修改参数"><a href="#5-运行需修改参数" class="headerlink" title="5.运行需修改参数"></a>5.运行需修改参数</h5><table><thead><tr><th>参数</th><th>所在目录</th><th>介绍</th></tr></thead><tbody><tr><td>password</td><td>application-dev/application-online</td><td>redis连接密码</td></tr><tr><td>ACCESSSKEY_ID</td><td>constants/SmsConstants</td><td>阿里云短信服务开发者信息AK</td></tr><tr><td>ACCESSKEY_SECRET</td><td>constants/SmsConstants</td><td>阿里云短信服务开发者信息SK</td></tr><tr><td>SIGN_NAME</td><td>constants/SmsConstants</td><td>短信签名</td></tr><tr><td>TEMPLATE_YZ_LOGIN</td><td>constants/SmsConstants</td><td>短信模板</td></tr></tbody></table><blockquote><p>注意事项：</p><p>​    1.运行项目前确认本地9999端口未被占用，否则请修改配置文件的server.port属性；</p><p>​    2.线上项目的SwaggerConfig中的@Profile(value = “dev”)value值设置为自己的线上环境配置文件名称；</p></blockquote><h5 id="6-运行项目输入swagger地址查看接口测试"><a href="#6-运行项目输入swagger地址查看接口测试" class="headerlink" title="6.运行项目输入swagger地址查看接口测试"></a>6.运行项目输入swagger地址查看接口测试</h5><p>地址：localhost:8888/swagger-ui.html</p><p>如果线上环境切换成IP地址即可，生产环境记得禁用swagger。</p><p><strong>说明</strong>：</p><p>​    1.项目只是为了让用户体会阿里云的短信服务的功能，需要用户开通阿里云短信服务的功能后才能进行使用；</p><p>​    2.项目中的短信模板以及短信签名都放在常量类中，项目小的情况下还能进行维护，如果短信服务做独立服务的话应该把这些变量作为参数传递或者使用配置中心进行解耦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Some are born great, some achieve greatness, and some have greatness thrust upon them.        有些人天生不凡，有些人后来获得卓越，还有些人被迫伟大。&lt;/p&gt;
&lt;h3 id=&quot;开发环境：&quot;&gt;&lt;a href=&quot;#开发环境：&quot; class=&quot;headerlink&quot; title=&quot;开发环境：&quot;&gt;&lt;/a&gt;开发环境：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;工具：idea2018.3&lt;/li&gt;
&lt;li&gt;Springboot版本：2.1.1&lt;/li&gt;
&lt;li&gt;JDK版本：1.8&lt;/li&gt;
&lt;li&gt;构建工具：Maven&lt;/li&gt;
&lt;li&gt;API展示：Swagger2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;​    互联网项目离不开短信服务，无论是日常的登录验证码或者用户相关的操作以及营销活动，都需要为用户发送短信，本项目为最初始版本的springboot集成阿里云短信服务的demo，只需要下载到本地修改响应开发参数后即可运行，项目的局限性以及优化之后会总结并更新。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Springboot" scheme="http://yoursite.com/tags/Springboot/"/>
    
      <category term="短信服务" scheme="http://yoursite.com/tags/%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows中使用vmware搭建虚拟机并使用远程连接工具进行统一管理</title>
    <link href="http://yoursite.com/2018/11/20/Linux/2018-11-20-%E4%BD%BF%E7%94%A8vmware%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%A8%8B%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/20/Linux/2018-11-20-使用vmware安装虚拟机并使用远程工具进行管理/</id>
    <published>2018-11-20T15:48:09.000Z</published>
    <updated>2019-10-27T13:57:52.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先需要安装虚拟机软件vmware："><a href="#首先需要安装虚拟机软件vmware：" class="headerlink" title="首先需要安装虚拟机软件vmware："></a>首先需要安装虚拟机软件<code>vmware</code>：</h3><p><a href="https://www.vmware.com/" target="_blank" rel="noopener">官网链接</a></p><h3 id="虚拟机的网络设置："><a href="#虚拟机的网络设置：" class="headerlink" title="虚拟机的网络设置："></a>虚拟机的网络设置：</h3><h4 id="查看自己的宿主机的网络配置，打开CMD输入ipconfig查看"><a href="#查看自己的宿主机的网络配置，打开CMD输入ipconfig查看" class="headerlink" title="查看自己的宿主机的网络配置，打开CMD输入ipconfig查看"></a>查看自己的宿主机的网络配置，打开CMD输入ipconfig查看</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/21.png-geekerit" alt></p><h4 id="在vmware中进行网络设置"><a href="#在vmware中进行网络设置" class="headerlink" title="在vmware中进行网络设置"></a>在vmware中进行网络设置</h4><h5 id="点击编辑—虚拟网络编辑器；"><a href="#点击编辑—虚拟网络编辑器；" class="headerlink" title="点击编辑—虚拟网络编辑器；"></a>点击编辑—虚拟网络编辑器；</h5><a id="more"></a><h5 id="点击更改设置，设置子网IP的网段与宿主机的网段一致；如果宿主机IP为192-168-0-1，则子网IP设置为192-168-0-XXX即可；子网掩码保持默认即可-这样做的目的是为了之后使用远程连接工具管理虚拟机，如果直接使用vmware进行虚拟机的相关操作可以不用与宿主机的IP段保持一致-；注意使用本地的DHCP服务要取消勾选："><a href="#点击更改设置，设置子网IP的网段与宿主机的网段一致；如果宿主机IP为192-168-0-1，则子网IP设置为192-168-0-XXX即可；子网掩码保持默认即可-这样做的目的是为了之后使用远程连接工具管理虚拟机，如果直接使用vmware进行虚拟机的相关操作可以不用与宿主机的IP段保持一致-；注意使用本地的DHCP服务要取消勾选：" class="headerlink" title="点击更改设置，设置子网IP的网段与宿主机的网段一致；如果宿主机IP为192.168.0.1，则子网IP设置为192.168.0.XXX即可；子网掩码保持默认即可(这样做的目的是为了之后使用远程连接工具管理虚拟机，如果直接使用vmware进行虚拟机的相关操作可以不用与宿主机的IP段保持一致)；注意使用本地的DHCP服务要取消勾选："></a>点击更改设置，设置子网IP的网段与宿主机的网段一致；如果宿主机IP为192.168.0.1，则子网IP设置为192.168.0.XXX即可；子网掩码保持默认即可(这样做的目的是为了之后使用远程连接工具管理虚拟机，如果直接使用vmware进行虚拟机的相关操作可以不用与宿主机的IP段保持一致)；注意使用本地的DHCP服务要取消勾选：</h5><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/18%E6%9B%B4%E6%94%B9%E8%AE%BE%E7%BD%AE.png-geekerit" alt></p><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/19.png-geekerit" alt></p><h5 id="点击NET设置，设置自己的网关IP进行记录，之后虚拟机中设置网络时需要；"><a href="#点击NET设置，设置自己的网关IP进行记录，之后虚拟机中设置网络时需要；" class="headerlink" title="点击NET设置，设置自己的网关IP进行记录，之后虚拟机中设置网络时需要；"></a>点击NET设置，设置自己的网关IP进行记录，之后虚拟机中设置网络时需要；</h5><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/20%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80.png" alt></p><h3 id="开始安装虚拟机："><a href="#开始安装虚拟机：" class="headerlink" title="开始安装虚拟机："></a>开始安装虚拟机：</h3><h4 id="创建虚拟机："><a href="#创建虚拟机：" class="headerlink" title="创建虚拟机："></a>创建虚拟机：</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.png-geekerit" alt></p><h4 id="选择稍后安装系统；"><a href="#选择稍后安装系统；" class="headerlink" title="选择稍后安装系统；"></a>选择稍后安装系统；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/2%E7%A8%8D%E5%90%8E%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png-geekerit" alt></p><h4 id="选择要安装的linux的版本；"><a href="#选择要安装的linux的版本；" class="headerlink" title="选择要安装的linux的版本；"></a>选择要安装的<code>linux</code>的版本；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/3%E9%80%89%E6%8B%A9%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC.png-geekerit" alt></p><h4 id="选择要安装的位置并-定义虚拟机名称，一般我以IP进行命名方便进行集群操作，另外虚拟机的安装目录最好统一放在同一目录下；"><a href="#选择要安装的位置并-定义虚拟机名称，一般我以IP进行命名方便进行集群操作，另外虚拟机的安装目录最好统一放在同一目录下；" class="headerlink" title="选择要安装的位置并 定义虚拟机名称，一般我以IP进行命名方便进行集群操作，另外虚拟机的安装目录最好统一放在同一目录下；"></a>选择要安装的位置并 定义虚拟机名称，一般我以IP进行命名方便进行集群操作，另外虚拟机的安装目录最好统一放在同一目录下；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/4%E8%AE%BE%E7%BD%AE%E5%90%8D%E7%A7%B0.png-geekerit" alt></p><h4 id="磁盘大小一般选择默认即可；"><a href="#磁盘大小一般选择默认即可；" class="headerlink" title="磁盘大小一般选择默认即可；"></a>磁盘大小一般选择默认即可；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/5%E8%AE%BE%E7%BD%AE%E7%A3%81%E7%9B%98%E5%A4%A7%E5%B0%8F.png-geekerit" alt></p><h4 id="选择要安装的操作系统；"><a href="#选择要安装的操作系统；" class="headerlink" title="选择要安装的操作系统；"></a>选择要安装的操作系统；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/7%E9%80%89%E6%8B%A9%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F.png-geekerit" alt></p><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/8.png-geekerit" alt="8"></p><h4 id="跳过系统检测开始进行系统安装；"><a href="#跳过系统检测开始进行系统安装；" class="headerlink" title="跳过系统检测开始进行系统安装；"></a>跳过系统检测开始进行系统安装；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/9%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85.png-geekerit" alt></p><h4 id="设置系统的时区以及要支持的语言；"><a href="#设置系统的时区以及要支持的语言；" class="headerlink" title="设置系统的时区以及要支持的语言；"></a>设置系统的时区以及要支持的语言；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/11.1%E8%B0%83%E6%95%B4%E6%97%B6%E9%97%B4%E4%B8%8E%E8%AF%AD%E8%A8%80.png-geekerit" alt></p><h4 id="设置系统网络"><a href="#设置系统网络" class="headerlink" title="设置系统网络;"></a>设置系统网络;</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/11.2%E7%BD%91%E7%BB%9C.png-geekerit" alt></p><p>选择IPV4 <code>Settings--method</code>，选择<code>Manual</code>,<code>Address</code>输入要设置的虚拟机IP，只要与上述自己设置的网关的IP段保持一致即可，<code>Netmask</code>为上述的子网掩码，<code>Gateway</code>为上述自己设置的网关地址，输入完成点击save进行保存：</p><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.png-geekerit" alt></p><h4 id="设置root用户的登录密码；"><a href="#设置root用户的登录密码；" class="headerlink" title="设置root用户的登录密码；"></a>设置root用户的登录密码；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/13%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81.png-geekerit" alt></p><h4 id="添加普通用户并设置登录密码，可略过；"><a href="#添加普通用户并设置登录密码，可略过；" class="headerlink" title="添加普通用户并设置登录密码，可略过；"></a>添加普通用户并设置登录密码，可略过；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/14%E6%B7%BB%E5%8A%A0%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7.png-geekerit" alt></p><h4 id="等待系统安装完成进行重启；"><a href="#等待系统安装完成进行重启；" class="headerlink" title="等待系统安装完成进行重启；"></a>等待系统安装完成进行重启；</h4><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/15%E9%87%8D%E5%90%AF%E7%B3%BB%E7%BB%9F.png-geekerit" alt></p><h4 id="登录系统查看网络信息"><a href="#登录系统查看网络信息" class="headerlink" title="登录系统查看网络信息"></a>登录系统查看网络信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>![(C:\Users\15927\Pictures\学习\开发环境\虚拟机\17编辑网络.png)</p><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/16%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F.png-geekerit" alt="16登录系统"></p><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/17%E7%BC%96%E8%BE%91%E7%BD%91%E7%BB%9C.png-geekerit" alt></p><h4 id="修改网络信息配置文件，设置静态IP"><a href="#修改网络信息配置文件，设置静态IP" class="headerlink" title="修改网络信息配置文件，设置静态IP"></a>修改网络信息配置文件，设置静态IP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">上述的文件名称根据自己的网卡名称编写</span><br></pre></td></tr></table></figure><p>个人配置信息参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;cf0e2c3c-8afe-47a3-96d0-59cc57ad1b14&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.0.5&quot;</span><br><span class="line">PREFIX=&quot;24&quot;</span><br><span class="line">GATEWAY=&quot;192.168.0.100&quot;</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=&quot;192.168.0.100&quot;</span><br><span class="line">IPV6_PRIVACY=&quot;no&quot;</span><br></pre></td></tr></table></figure><p><img src="http://image.chengnanhuakai.com/image/blog/vmware/centos/%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE.png-geekerit" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先需要安装虚拟机软件vmware：&quot;&gt;&lt;a href=&quot;#首先需要安装虚拟机软件vmware：&quot; class=&quot;headerlink&quot; title=&quot;首先需要安装虚拟机软件vmware：&quot;&gt;&lt;/a&gt;首先需要安装虚拟机软件&lt;code&gt;vmware&lt;/code&gt;：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.vmware.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;虚拟机的网络设置：&quot;&gt;&lt;a href=&quot;#虚拟机的网络设置：&quot; class=&quot;headerlink&quot; title=&quot;虚拟机的网络设置：&quot;&gt;&lt;/a&gt;虚拟机的网络设置：&lt;/h3&gt;&lt;h4 id=&quot;查看自己的宿主机的网络配置，打开CMD输入ipconfig查看&quot;&gt;&lt;a href=&quot;#查看自己的宿主机的网络配置，打开CMD输入ipconfig查看&quot; class=&quot;headerlink&quot; title=&quot;查看自己的宿主机的网络配置，打开CMD输入ipconfig查看&quot;&gt;&lt;/a&gt;查看自己的宿主机的网络配置，打开CMD输入ipconfig查看&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://image.chengnanhuakai.com/image/blog/vmware/centos/21.png-geekerit&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;在vmware中进行网络设置&quot;&gt;&lt;a href=&quot;#在vmware中进行网络设置&quot; class=&quot;headerlink&quot; title=&quot;在vmware中进行网络设置&quot;&gt;&lt;/a&gt;在vmware中进行网络设置&lt;/h4&gt;&lt;h5 id=&quot;点击编辑—虚拟网络编辑器；&quot;&gt;&lt;a href=&quot;#点击编辑—虚拟网络编辑器；&quot; class=&quot;headerlink&quot; title=&quot;点击编辑—虚拟网络编辑器；&quot;&gt;&lt;/a&gt;点击编辑—虚拟网络编辑器；&lt;/h5&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="虚拟机" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Vmware" scheme="http://yoursite.com/tags/Vmware/"/>
    
  </entry>
  
</feed>
